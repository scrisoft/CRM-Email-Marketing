var Core$4;
(function (Core) {
    class Instances {
        static instances_list = {};
        static save_instance(instance) {
            this.instances_list[instance] = {
                element: {}
            };
        }
        static get_instance(element) {
            return (typeof this.instances_list.hasOwnProperty(element) !== 'undefined') ? this.instances_list[element] : false;
        }
    }
    Core.Instances = Instances;
})(Core$4 = Core$4 || (Core$4 = {}));

var name$1 = "Emails Composer";
var language = "english";
var base_url = "http://localhost:3000/";
var share_url = "http://localhost:3000/";
var css_url = "http://localhost:3000/public/styles/css/";
var api_url = "http://localhost:3000/";
var builder = {
	template_id: "",
	css: [
		{
			href: "https://fonts.googleapis.com/css2?family=Material+Symbols+Sharp:opsz,wght,FILL,GRAD@24,300,0,0"
		}
	],
	start: {
		animation: true
	},
	resources: {
		elements: {
			sections: {
				general: {
					enabled: true,
					show: true
				},
				advanced: {
					enabled: true,
					show: false
				}
			}
		},
		rows: {
			sections: {
				general: {
					enabled: true,
					show: true
				}
			}
		},
		modules: {
			sections: {
				general: {
					enabled: true,
					show: true
				}
			}
		},
		media: {
			sections: {
				general: {
					enabled: true,
					show: true
				}
			}
		},
		history: {
			sections: {
				general: {
					enabled: true,
					show: true
				}
			}
		}
	}
};
var options = {
	name: name$1,
	language: language,
	base_url: base_url,
	share_url: share_url,
	css_url: css_url,
	api_url: api_url,
	builder: builder
};

var Core$3;
(function (Core) {
    class Options {
        static options_list = {};
        get_option(name) {
            if (typeof Options.options_list.hasOwnProperty(name) !== 'undefined') {
                return Options.options_list[name];
            }
            else {
                return false;
            }
        }
        replace_options(updated_options) {
            if (Object.keys(Options.options_list).length < 1) {
                Options.options_list = options;
            }
            if (Object.keys(updated_options).length > 0) {
                let default_options = Object.keys(Options.options_list);
                let new_options = {};
                let group_options = (c_options, d_options, old_obj, n_options) => {
                    let total_options = d_options.length;
                    for (var t = 0; t < total_options; t++) {
                        if (!old_obj) {
                            n_options[d_options[t]] = c_options[d_options[t]];
                        }
                        else if (typeof c_options[d_options[t]] === 'object') {
                            if (Object.keys(c_options[d_options[t]]).length > 0) {
                                n_options[d_options[t]] = c_options[d_options[t]];
                                if (typeof old_obj[d_options[t]] === 'object') {
                                    if (Array.isArray(old_obj[d_options[t]])) {
                                        n_options[d_options[t]] = c_options[d_options[t]].concat(old_obj[d_options[t]]);
                                    }
                                    else {
                                        group_options(c_options[d_options[t]], Object.keys(c_options[d_options[t]]), old_obj[d_options[t]], n_options[d_options[t]]);
                                    }
                                }
                                else {
                                    group_options(c_options[d_options[t]], Object.keys(c_options[d_options[t]]), false, n_options[d_options[t]]);
                                }
                            }
                            else {
                                n_options[d_options[t]] = {};
                            }
                        }
                        else {
                            n_options[d_options[t]] = old_obj[d_options[t]] ? old_obj[d_options[t]] : c_options[d_options[t]];
                        }
                    }
                };
                group_options(Options.options_list, default_options, updated_options, new_options);
                Options.options_list = new_options;
            }
        }
    }
    Core.Options = Options;
})(Core$3 = Core$3 || (Core$3 = {}));

var Abstracts;
(function (Abstracts) {
    class Options {
        static saved_options = {};
        params;
        constructor(params) {
            this.params = params;
        }
        get_option = (option) => {
            let obj = this.prepare_template(this.params, option);
            if ((typeof obj !== 'undefined') && (obj.template !== 'undefined')) {
                let element = option?.element ? ' data-element="' + option?.element + '"' : '';
                Options.saved_options[option.name + '_' + element.replace(' data-element="', '').replace('"', '')] = option;
                return '<li class="ec-display-flex ec-justify-content-space-between" data-option="' + option.name + '"' + element + '>'
                    + obj.template
                    + '</li>';
            }
        };
        get_property = (option) => {
            return this.prepare_property(this.params, option);
        };
    }
    Abstracts.Options = Options;
})(Abstracts = Abstracts || (Abstracts = {}));

var Class$8;
(function (Class) {
    class Events {
        static events_list = null;
        addEventListener(node, action, target, iframe, capture = false) {
            if (!Events.events_list) {
                Events.events_list = [{ node, action, target, iframe, capture }];
            }
            else {
                Events.events_list.push({ node, action, target, iframe, capture });
            }
            if (!node) {
                if (iframe) {
                    let iframes = document.querySelectorAll(iframe);
                    if (typeof iframes !== 'undefined') {
                        iframes[0].contentWindow.addEventListener(action, target, capture);
                    }
                }
                else {
                    document.addEventListener(action, target, capture);
                }
            }
            else {
                let all_nodes = node.length;
                for (var a = 0; a < all_nodes; a++) {
                    node[a].addEventListener(action, target, capture);
                }
            }
        }
        dispatchEvent(node, action) {
            node.dispatchEvent(new Event(action));
        }
        removeEventListener(node, action, target, capture = false) {
            node.removeEventListener(action, target, capture);
        }
    }
    Class.Events = Events;
})(Class$8 = Class$8 || (Class$8 = {}));

var Class$7;
(function (Class) {
    class Https {
        async get(url) {
            return new Promise((resolve, reject) => {
                fetch(url, {
                    method: 'GET'
                })
                    .then(response => {
                    resolve(response.json());
                })
                    .catch(error => {
                    reject(new Error(error));
                });
            });
        }
        async post(url, template, option) {
            return new Promise((resolve, reject) => {
                let params = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                };
                if (template !== null) {
                    params['body'] = JSON.stringify(template);
                }
                else if (option !== null) {
                    params['body'] = JSON.stringify(option);
                }
                let fetch_request = fetch(url, params);
                fetch_request.then(response => {
                    resolve(response.json());
                });
                fetch_request.catch(error => {
                    reject(new Error(error));
                });
            });
        }
        async put(url, update) {
            return new Promise((resolve, reject) => {
                let params = {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                };
                params['body'] = JSON.stringify(update);
                let fetch_request = fetch(url, params);
                fetch_request.then(response => {
                    resolve(response.json());
                });
                fetch_request.catch(error => {
                    reject(new Error(error));
                });
            });
        }
        async delete(url) {
            return new Promise((resolve, reject) => {
                fetch(url, {
                    method: 'DELETE'
                })
                    .then(response => {
                    resolve(response.json());
                })
                    .catch(error => {
                    reject(new Error(error));
                });
            });
        }
    }
    Class.Https = Https;
})(Class$7 = Class$7 || (Class$7 = {}));

var content$1 = {
    html: '<div class="ec-start-loading">'
        + '<div class="ec-start-loading-container">'
        + '<div class="ec-start-loading-counter"></div>'
        + '<div class="ec-start-loading-progress">'
        + '<div class="ec-start-loading-progress-bar"></div>'
        + '</div>'
        + '</div>'
        + '</div>'
};

var Plugins$7;
(function (Plugins) {
    class StartLoading {
        get_content(selector) {
            selector.querySelector('.ec-composer').innerHTML = content$1.html;
            let c = 0, timer = setInterval(() => {
                c = c + 1;
                selector.querySelector('.ec-start-loading-counter').textContent = c + '%';
                selector.querySelector('.ec-start-loading-progress-bar').style.width = c + '%';
                if (c === 100) {
                    clearInterval(timer);
                    setTimeout(() => {
                        selector.querySelector('.ec-start-loading').remove();
                    }, 1200);
                }
            }, 1);
        }
    }
    Plugins.StartLoading = StartLoading;
})(Plugins$7 = Plugins$7 || (Plugins$7 = {}));

var HtmlFormatter$4;
(function (HtmlFormatter) {
    class Prepare {
        code(html) {
            let fcode = html;
            if (fcode.search('< ') > -1) {
                fcode = fcode.replaceAll('< ', '<');
            }
            if (fcode.search(' >') > -1) {
                fcode = fcode.replaceAll(' >', '>');
            }
            if (fcode.search(' <') > -1) {
                fcode = fcode.replaceAll(' <', '<');
            }
            if (fcode.search('<br>') > -1) {
                fcode = fcode.replaceAll('<br>', '<br />');
            }
            if (fcode.search('<br >') > -1) {
                fcode = fcode.replaceAll('<br >', '<br />');
            }
            if (fcode.search('<hr>') > -1) {
                fcode = fcode.replaceAll('<hr>', '<hr />');
            }
            if (fcode.search('<hr >') > -1) {
                fcode = fcode.replaceAll('<hr >', '<hr />');
            }
            fcode = fcode.replaceAll("\r", '');
            fcode = fcode.replaceAll("\n", '');
            return fcode;
        }
    }
    HtmlFormatter.Prepare = Prepare;
})(HtmlFormatter$4 = HtmlFormatter$4 || (HtmlFormatter$4 = {}));

var HtmlFormatter$3;
(function (HtmlFormatter) {
    class Lines {
        add_lines(fcode) {
            let splits = fcode.split("\r\n");
            let open = '';
            let total_splits = splits.length;
            let l = 1;
            do {
                open += this.add_line(splits[(l - 1)].replaceAll('<span class="ec-code-whitespace"> </span>', '<span class="ec-code-whitespace">&nbsp;</span>'));
                l++;
            } while (l < total_splits);
            return open;
        }
        add_line(value) {
            return '<div class="ec-composer-code-editor-line">'
                + '<div class="ec-composer-code-editor-line-code">'
                + value
                + '</div>'
                + '</div>';
        }
    }
    HtmlFormatter.Lines = Lines;
})(HtmlFormatter$3 = HtmlFormatter$3 || (HtmlFormatter$3 = {}));

var HtmlFormatter$2;
(function (HtmlFormatter) {
    class Variables {
        counts = {
            string: 0,
            whitespace: 0,
            tag: {
                start: {
                    open: 0,
                    close: 0,
                    name: {
                        open: 0,
                        close: 0
                    }
                },
                end: {
                    open: 0,
                    name: {
                        open: 0,
                        close: 0
                    }
                },
                meta: {
                    open: 0,
                    close: 0,
                    name: 0,
                    value: 0,
                    equal: 0,
                    slash: 0
                }
            },
            hidden: {
                comment: {
                    open: 0,
                    text: {
                        open: 0
                    },
                    condition: {
                        start: {
                            open: 0
                        },
                        end: {
                            open: 0
                        }
                    }
                },
                tag: {
                    start: {
                        open: 0,
                        close: 0,
                        name: {
                            open: 0,
                            close: 0
                        }
                    },
                    end: {
                        open: 0,
                        name: {
                            open: 0,
                            close: 0
                        }
                    },
                    meta: {
                        open: 0,
                        close: 0,
                        name: 0,
                        value: 0,
                        equal: 0
                    }
                }
            }
        };
        conditions = {
            tag_quotes: ['"', "'", '\"', "\'"]
        };
        classes = [
            'ec-composer-code-editor-line-code',
            'ec-code-string',
            'ec-code-tag-start-open',
            'ec-code-tag-start-name',
            'ec-code-tag-close',
            'ec-code-whitespace',
            'ec-code-tag-end-open',
            'ec-code-tag-end-slash',
            'ec-code-tag-end-name',
            'ec-code-tag-meta-value',
            'ec-code-tag-meta-name',
            'ec-composer-code-editor-caret',
            'ec-code-hidden-comment-open',
            'ec-code-hidden-comment-exclamation',
            'ec-code-hidden-comment-line',
            'ec-code-hidden-comment-text',
            'ec-code-hidden-comment-whitespace',
            'ec-code-hidden-comment-condition-rules',
            'ec-code-hidden-comment-condition-parenthese',
            'ec-code-hidden-comment-tag-end-open',
            'ec-code-hidden-comment-tag-end-slash',
            'ec-code-hidden-comment-tag-start-name',
            'ec-code-hidden-comment-tag-meta-name',
            'ec-code-hidden-comment-tag-meta-equal',
            'ec-code-hidden-comment-tag-meta-value',
            'ec-code-hidden-comment-tag-close',
            'ec-code-hidden-comment-tag-end-name',
            'ec-code-hidden-comment-close',
            'ec-code-tag-meta-equal'
        ];
    }
    HtmlFormatter.Variables = Variables;
})(HtmlFormatter$2 = HtmlFormatter$2 || (HtmlFormatter$2 = {}));

var HtmlFormatter$1;
(function (HtmlFormatter$1) {
    class Spaces {
        _cspace = 0;
        _open = '';
        _space = '&nbsp;&nbsp;&nbsp;&nbsp;';
        _general;
        _in_line = [
            'br',
            'hr'
        ];
        _new_line = [
            'button'
        ];
        _no_ends = [
            'area',
            'base',
            'br',
            'col',
            'embed',
            'hr',
            'img',
            'input',
            'link',
            'meta',
            'param',
            'source',
            'track',
            'wbr',
            'area',
            'base',
            'br',
            'col',
            'embed',
            'hr',
            'img',
            'input',
            'link',
            'meta',
            'param',
            'source',
            'track',
            'wbr',
        ];
        _t_container = '';
        add_spaces(fcode) {
            let splits = fcode.split('<');
            if (splits.length < 2) {
                return fcode.replace(/\s/g, '&nbsp;');
            }
            this._general = new HtmlFormatter.General();
            let tsplits = splits.length;
            let s = 0;
            do {
                let get_tag = this._general.get_tag(splits[s]);
                if (!get_tag.tag) {
                    this._open += (s < 1) ? splits[s] : '<' + splits[s];
                    s++;
                    continue;
                }
                let previous_tag = this._general.get_tag_by_index(splits, (s - 1));
                let next_tag = this._general.get_tag_by_index(splits, (s + 1));
                if (get_tag.start) {
                    if (next_tag.hidden && !next_tag.start && get_tag.hidden && next_tag.hidden) {
                        this._open += (previous_tag.text || ((previous_tag.tag === get_tag.tag) && previous_tag.start && !get_tag.start)) ? '<' + splits[s] : this._space.repeat(this._cspace) + '<' + splits[s];
                        this._open += "\r\n";
                        if (this._cspace > 0)
                            this._cspace--;
                        s++;
                        continue;
                    }
                    else if (previous_tag.text) {
                        this._open += ' ';
                        if (this._new_line.indexOf(get_tag.tag) > -1) {
                            splits[s] = splits[s].replaceAll('<' + get_tag.tag, "\r\n" + this._space.repeat(this._cspace) + '<' + get_tag.tag);
                        }
                    }
                    if (get_tag.text) {
                        if (!this._t_container)
                            this._t_container = get_tag.tag + '_';
                    }
                    else if (this._t_container.split(get_tag.tag + '_').length > 1) {
                        this._t_container += get_tag.tag + '_';
                    }
                    splits[s] = splits[s].replaceAll('> ', '>');
                }
                else {
                    if (next_tag.hidden && !next_tag.start && get_tag.hidden && next_tag.hidden) {
                        this._open += (previous_tag.text || ((previous_tag.tag === get_tag.tag) && previous_tag.start && !get_tag.start)) ? '<' + splits[s] : this._space.repeat(this._cspace) + '<' + splits[s];
                        this._open += "\r\n";
                        if (this._cspace > 0)
                            this._cspace--;
                        s++;
                        continue;
                    }
                    else if (!get_tag.text) {
                        splits[s] = splits[s].replaceAll('> ', '>');
                    }
                    if (this._t_container.split(get_tag.tag + '_').length > 1) {
                        this._t_container = this._t_container.replace(get_tag.tag + '_', '');
                        this._open += '<' + splits[s];
                        if (!this._t_container) {
                            this._open += "\r\n";
                            if (!next_tag.start) {
                                if (this._cspace > 0)
                                    this._cspace--;
                            }
                        }
                        s++;
                        continue;
                    }
                }
                let temp = (previous_tag.text || ((previous_tag.tag === get_tag.tag) && previous_tag.start && !get_tag.start)) ? '<' + splits[s] : this._space.repeat(this._cspace) + '<' + splits[s];
                if (get_tag.start) {
                    if (previous_tag.text) {
                        if (this._new_line.indexOf(get_tag.tag) > -1) {
                            temp = temp.replaceAll('<' + get_tag.tag, "\r\n" + this._space.repeat(this._cspace) + '<' + get_tag.tag);
                        }
                        else {
                            temp = this._space.repeat(this._cspace) + '<' + splits[s];
                        }
                    }
                    else if (get_tag.text && next_tag.start) {
                        let ctag = splits[s].split('>').shift();
                        temp = this._space.repeat(this._cspace) + '<' + ctag + '>';
                        temp += "\r\n";
                        this._cspace++;
                        temp += this._space.repeat(this._cspace) + get_tag.text;
                        temp += "\r\n";
                        this._open += temp;
                        s++;
                        continue;
                    }
                    if ((next_tag.tag === get_tag.tag) && !next_tag.start) {
                        this._open += temp;
                        s++;
                        continue;
                    }
                }
                if ((this._no_ends.indexOf(get_tag.tag) > -1)) {
                    this._open += this._add_end(temp);
                    this._open += "\r\n";
                    if ((this._no_ends.indexOf(next_tag.tag) < 0) && !next_tag.start && !next_tag.hidden) {
                        if (this._cspace > 0)
                            this._cspace--;
                    }
                    s++;
                    continue;
                }
                else if ((this._no_ends.indexOf(previous_tag.tag) > -1) && !previous_tag.text) {
                    temp = temp;
                    if (this._cspace > 0 && !get_tag.start && get_tag.start) {
                        this._cspace--;
                    }
                }
                else if ((this._no_ends.indexOf(previous_tag.tag) > -1) && !get_tag.start) {
                    temp = this._space.repeat(this._cspace) + temp;
                }
                this._open += temp;
                if (!get_tag.text && !get_tag.hidden && !this._t_container) {
                    this._open += "\r\n";
                    if (get_tag.start) {
                        this._cspace++;
                    }
                    else if ((this._cspace > 0) && (next_tag.tag !== get_tag.tag) && !next_tag.start && (this._in_line.indexOf(next_tag.tag) < 0)) {
                        this._cspace--;
                    }
                    else if ((this._cspace > 1) && !next_tag.start) {
                        this._cspace--;
                    }
                    else if (!get_tag.start && !next_tag.start) {
                        if (this._cspace > 0)
                            this._cspace--;
                    }
                }
                else if (get_tag.hidden) {
                    this._open += "\r\n";
                }
                else {
                    this._open += "\r\n";
                    if (get_tag.start) {
                        this._cspace++;
                    }
                    else if ((this._cspace > 0) && (next_tag.tag !== get_tag.tag) && !next_tag.start && (this._in_line.indexOf(next_tag.tag) < 0)) {
                        this._cspace--;
                    }
                    else if ((this._cspace > 1) && !next_tag.start) {
                        this._cspace--;
                    }
                    else if (!get_tag.start && !next_tag.start) {
                        if (this._cspace > 0)
                            this._cspace--;
                    }
                }
                s++;
            } while (s < tsplits);
            return this._open;
        }
        _add_end(tag) {
            return tag.replace(' >', '>').replace('> ', '>').replace('/>', '>').replace('>', ' />').replaceAll('  ', ' ');
        }
    }
    HtmlFormatter$1.Spaces = Spaces;
})(HtmlFormatter$1 = HtmlFormatter$1 || (HtmlFormatter$1 = {}));

var HtmlFormatter;
(function (HtmlFormatter) {
    class General {
        get_tag(tag) {
            if (tag?.split('>').length > 1) {
                let hidden = false;
                let start = false;
                if ((tag.split('<!--').length > 1) || (tag.split('-->').length > 1)) {
                    hidden = true;
                    start = (tag.split('-->').length > 1) ? false : true;
                }
                else {
                    let tag_full = '<' + tag;
                    start = ((tag_full.split('/>').length > 1) || (tag_full.split('</').length > 1) || (tag_full.split('<\/').length > 1)) ? false : true;
                }
                return {
                    tag: tag.split('>').shift().split(' ').shift()?.replace('/', ''),
                    start: start,
                    text: tag.split('>').slice(-1)[0] ? tag.split('>').slice(-1)[0] : '',
                    hidden: hidden
                };
            }
            return {
                tag: '',
                start: false,
                text: '',
                hidden: false
            };
        }
        get_tag_by_index(tags, i) {
            if (typeof tags[i] !== 'undefined') {
                if (tags[i].split('>').length > 1) {
                    let hidden = false;
                    let start = false;
                    if ((tags[i].split('<!--').length > 1) || (tags[i].split('-->').length > 1)) {
                        hidden = true;
                        start = (tags[i].split('-->').length > 1) ? false : true;
                    }
                    else {
                        let tag = '<' + tags[i];
                        start = ((tag.split('/>').length > 1) || (tag.split('</').length > 1) || (tag.split('<\/').length > 1)) ? false : true;
                    }
                    return {
                        tag: tags[i].split('>').shift().split(' ').shift()?.replace('/', ''),
                        start: start,
                        text: tags[i].split('>').slice(-1)[0] ? tags[i].split('>').slice(-1)[0] : '',
                        hidden: hidden
                    };
                }
            }
            return {
                tag: '',
                start: false,
                text: '',
                hidden: false
            };
        }
    }
    HtmlFormatter.General = General;
})(HtmlFormatter = HtmlFormatter || (HtmlFormatter = {}));

var Plugins$6;
(function (Plugins) {
    class HtmlFormatter {
        _params = null;
        _counts = null;
        _conditions = null;
        _fcode = '';
        _continue = 0;
        _index = 0;
        format(params, html) {
            this._params = params;
            this._counts = new HtmlFormatter$2.Variables().counts;
            this._conditions = new HtmlFormatter$2.Variables().conditions;
            html = new HtmlFormatter$4.Prepare().code(html);
            if (typeof this._params.spaces !== 'undefined') {
                if (this._params.spaces) {
                    html = new HtmlFormatter$1.Spaces().add_spaces(html);
                }
            }
            let characters = this._to_html(html).replaceAll(' &nbsp;', ' ').replaceAll('&nbsp;', ' ').split("");
            let tcharacters = characters.length;
            if (tcharacters > 0) {
                do {
                    if (characters[this._index] === '') {
                        this._index++;
                        continue;
                    }
                    else if ((characters[this._index]?.charCodeAt(0) === 32) || (characters[this._index]?.charCodeAt(0) === 160)) {
                        characters[this._index] = ' ';
                    }
                    this._continue = 0;
                    if (this._is_hidden()) {
                        this._hidden_comment(characters);
                    }
                    else if ((this._conditions.tag_quotes.indexOf(characters[this._index]) > -1) && (this._counts.tag.start.open > 0)) {
                        this._tag_meta_value(characters[this._index]);
                    }
                    else if (characters[this._index] === '<') {
                        if (this._counts.tag.start.open > 0) {
                            this._fcode += characters[this._index];
                        }
                        else {
                            this._tag_arrow_left(characters);
                            if (this._continue > 0) {
                                this._continue = 0;
                                this._index++;
                                continue;
                            }
                        }
                    }
                    else if (characters[this._index] === '>') {
                        this._tag_arrow_right(characters);
                    }
                    else if (characters[this._index] === '/') {
                        if (typeof characters[(this._index + 1)] !== 'undefined') {
                            if (characters[(this._index + 1)] === '>') {
                                this._counts.tag.start.open = 0;
                                this._fcode += '</span><span class="ec-code-tag-end-slash">'
                                    + characters[this._index]
                                    + '</span>';
                            }
                            else {
                                this._fcode += '</span><span class="ec-code-tag-meta-value-slash">'
                                    + characters[this._index]
                                    + '</span>';
                                if (characters[(this._index + 1)] !== '/') {
                                    this._fcode += '<span class="ec-code-tag-meta-value">';
                                }
                            }
                        }
                    }
                    else if (characters[this._index] === ' ') {
                        if (this._counts.tag.meta.value > 0) {
                            this._fcode += characters[this._index];
                        }
                        else {
                            this._white_space(characters[this._index]);
                        }
                    }
                    else if (this._counts.tag.start.open > 0) {
                        if (characters[this._index] === '/') {
                            this._fcode += '</span><span class="ec-code-tag-end-slash">'
                                + characters[this._index]
                                + '</span>';
                        }
                        else if (characters[this._index]?.trim() === '') {
                            this._white_space(characters[this._index]);
                        }
                        else {
                            this._tag_open(characters[this._index]);
                        }
                    }
                    else if (this._counts.tag.end.open > 0) {
                        this._tag_close(characters[this._index]);
                    }
                    else if (this._counts.tag.start.name.close > 0) {
                        this._tag_close(characters[this._index]);
                    }
                    else if (characters[this._index]?.trim()) {
                        if (characters[this._index] === '&') {
                            if ((typeof characters[(this._index + 1)] !== 'undefined') && (typeof characters[(this._index + 2)] !== 'undefined') && (typeof characters[(this._index + 3)] !== 'undefined') && (typeof characters[(this._index + 4)] !== 'undefined') && (typeof characters[(this._index + 5)] !== 'undefined')) {
                                if (characters[this._index] + characters[(this._index + 1)] + characters[(this._index + 2)] + characters[(this._index + 3)] + characters[(this._index + 4)] + characters[(this._index + 5)] === '&nbsp;') {
                                    this._ends('string');
                                    this._counts.whitespace = 1;
                                }
                            }
                        }
                        if (this._counts.whitespace > 0) {
                            this._fcode += characters[this._index];
                            if (characters[this._index] === ';') {
                                this._counts.whitespace = 0;
                            }
                        }
                        else {
                            this._string(characters[this._index]);
                        }
                    }
                    else {
                        this._fcode += characters[this._index];
                    }
                    this._index++;
                } while (this._index < tcharacters);
            }
            if (typeof this._params.lines !== 'undefined') {
                if (!this._params.lines) {
                    return new Promise((resolve, reject) => {
                        resolve(this._fcode);
                    });
                }
            }
            let ready_code = new HtmlFormatter$3.Lines().add_lines(this._fcode);
            return new Promise((resolve, reject) => {
                resolve(ready_code);
            });
        }
        _tag_arrow_left(characters) {
            if (this._counts.tag.start.open > 0) {
                this._fcode += '<span>'
                    + characters[this._index]
                    + '</span>';
                this._continue = 1;
            }
            else {
                this._ends('string');
                if (typeof characters[(this._index + 1)] !== 'undefined') {
                    if (characters[(this._index + 1)] === '/') {
                        this._fcode += '<span class="ec-code-tag-end-open">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-tag-end-slash">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._index = this._index + 1;
                        this._counts.tag.end.open = 1;
                        this._counts.tag.end.name.open = 1;
                        this._continue = 1;
                    }
                    else if (characters[(this._index + 1)] === '!') {
                        if (typeof characters[(this._index + 2)] !== 'undefined') {
                            if (characters[(this._index + 2)] === '-') {
                                this._fcode += '<span class="ec-code-hidden-comment-open">'
                                    + characters[this._index]
                                    + '</span>';
                                this._fcode += '<span class="ec-code-hidden-comment-exclamation">'
                                    + characters[(this._index + 1)]
                                    + '</span>';
                                this._counts.hidden.comment.open = 1;
                                this._index = this._index + 1;
                                this._continue = 1;
                            }
                        }
                    }
                }
            }
            if (this._continue < 1) {
                this._fcode += '<span class="ec-code-tag-start-open">'
                    + characters[this._index]
                    + '</span>';
                this._counts.tag.start.open = 1;
                this._counts.tag.start.name.open = 1;
            }
        }
        _tag_arrow_right(characters) {
            this._ends('string');
            if (this._counts.tag.start.name.close > 0) {
                this._counts.tag.end.open = 0;
                this._counts.tag.start.name.close = 0;
            }
            if (this._counts.tag.start.open > 0) {
                this._counts.tag.start.open = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.end.name.close > 0) {
                this._counts.tag.end.name.close = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.meta.name > 0) {
                this._fcode += '</span>';
                this._counts.tag.meta.name = 0;
            }
            if (this._counts.tag.meta.value > 0) {
                this._fcode += '</span>';
                this._counts.tag.meta.value = 0;
            }
            if (this._counts.tag.end.open > 0) {
                this._counts.tag.end.open = 0;
                this._counts.tag.start.name.close = 0;
            }
            this._fcode += '<span class="ec-code-tag-close">'
                + characters[this._index]
                + '</span>';
        }
        _tag_open(char) {
            this._ends('string');
            if (this._counts.tag.start.name.open > 0) {
                this._fcode += '<span class="ec-code-tag-start-name">' + char;
                this._counts.tag.start.name.open = 0;
                this._counts.tag.start.name.close = 1;
            }
            else if (this._counts.tag.start.name.close > 0) {
                this._fcode += char;
            }
            else if (char === '=') {
                this._fcode += '</span>';
                this._fcode += '<span class="ec-code-tag-meta-equal">'
                    + char
                    + '</span>';
                this._counts.tag.meta.name = 0;
                this._counts.tag.meta.value = 1;
                this._counts.tag.meta.equal = 1;
                this._fcode += '<span class="ec-code-tag-meta-value">';
            }
            else if (this._counts.tag.meta.value > 0) {
                this._fcode += char;
            }
            else if (this._counts.tag.meta.name > 0) {
                this._fcode += char;
            }
            else {
                this._fcode += '<span class="ec-code-tag-meta-name">' + char;
                this._counts.tag.meta.name = 1;
            }
        }
        _tag_meta_value(character) {
            if ((this._counts.tag.meta.value > 0) && (this._counts.tag.meta.open > 0)) {
                this._fcode += character;
                this._counts.tag.meta.open = 0;
                this._counts.tag.meta.value = 0;
                this._fcode += '</span>';
            }
            else {
                if (this._counts.tag.meta.equal > 0) {
                    this._counts.tag.meta.equal = 0;
                    this._counts.tag.meta.open = 1;
                }
                else {
                    this._fcode += '<span class="ec-code-tag-meta-value">';
                    this._counts.tag.meta.open = 1;
                    this._counts.tag.meta.value = 1;
                }
                this._fcode += character;
            }
        }
        _tag_close(char) {
            this._ends('string');
            if (this._counts.tag.end.name.open > 0) {
                this._fcode += '<span class="ec-code-tag-end-name">' + char;
                this._counts.tag.end.name.open = 0;
                this._counts.tag.end.name.close = 1;
            }
            else if (this._counts.tag.end.name.close > 0) {
                this._fcode += char;
            }
            else {
                this._fcode += char;
            }
        }
        _white_space(char) {
            this._ends('string');
            if (this._counts.tag.start.name.close > 0) {
                this._counts.tag.start.name.close = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.meta.name > 0) {
                this._counts.tag.meta.name = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.meta.value > 0) {
                this._counts.tag.meta.open = 0;
                this._counts.tag.meta.value = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.end.name.close > 0) {
                this._counts.tag.end.name.close = 0;
                this._fcode += '</span>';
            }
            this._fcode += '<span class="ec-code-whitespace">'
                + '&nbsp;'
                + '</span>';
        }
        _string(char) {
            if (this._counts.tag.start.name.close > 0) {
                this._counts.tag.start.name.close = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.meta.name > 0) {
                this._counts.tag.meta.name = 0;
                this._fcode += '</span>';
            }
            if (this._counts.tag.meta.value > 0) {
                this._counts.tag.meta.open = 0;
                this._counts.tag.meta.value = 0;
                this._fcode += '</span>';
            }
            if (this._counts.string < 1) {
                this._fcode += '<span class="ec-code-string">';
                this._counts.string = 1;
            }
            this._fcode += char;
        }
        _is_hidden() {
            if (this._counts.hidden.comment.open > 0) {
                return true;
            }
            else {
                return false;
            }
        }
        _hidden_comment(characters) {
            this._ends('string');
            if (characters[this._index] === '[') {
                if ((typeof characters[(this._index + 1)] !== 'undefined') && (typeof characters[(this._index + 2)] !== 'undefined')) {
                    if (characters[(this._index + 1)] + characters[(this._index + 2)] === 'if') {
                        this._hidden_comment_ends('text');
                        this._fcode += '<span class="ec-code-hidden-comment-condition-parenthese">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-condition-rules">'
                            + characters[(this._index + 1)]
                            + characters[(this._index + 2)];
                        this._counts.hidden.comment.condition.start.open = 1;
                        this._index = this._index + 2;
                        this._continue = 1;
                    }
                    else if (characters[(this._index + 1)] + characters[(this._index + 2)] === 'en') {
                        this._fcode += '<span class="ec-code-hidden-comment-condition-parenthese">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-condition-rules">'
                            + characters[(this._index + 1)]
                            + characters[(this._index + 2)];
                        this._counts.hidden.comment.condition.end.open = 1;
                        this._index = this._index + 2;
                        this._continue = 1;
                    }
                }
                if (this._continue < 1) {
                    this._fcode += characters[this._index];
                }
            }
            else if (characters[this._index] === ']') {
                if ((typeof characters[(this._index + 1)] !== 'undefined')) {
                    if (characters[(this._index + 1)] === '>') {
                        this._hidden_comment_ends('condition_start');
                        this._fcode += '<span class="ec-code-hidden-comment-condition-parenthese">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-close">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._index = this._index + 1;
                        this._continue = 1;
                    }
                    else if (characters[(this._index + 1)] === '-') {
                        this._hidden_comment_ends('condition_end');
                        this._fcode += '<span class="ec-code-hidden-comment-condition-parenthese">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-line">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._index = this._index + 1;
                        this._continue = 1;
                    }
                }
                if (this._continue < 1) {
                    this._fcode += characters[this._index];
                }
            }
            else if (characters[this._index] === '<') {
                this._hidden_comment_ends('text');
                if ((typeof characters[(this._index + 1)] !== 'undefined') && (typeof characters[(this._index + 2)] !== 'undefined')) {
                    if (characters[(this._index + 1)] + characters[(this._index + 2)] === '![') {
                        this._fcode += '<span class="ec-code-hidden-comment-open">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-exclamation">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._index = this._index + 1;
                        this._continue = 1;
                    }
                    else if (characters[(this._index + 1)] === '/') {
                        this._fcode += '<span class="ec-code-hidden-comment-tag-end-open">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-tag-end-slash">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._index = this._index + 1;
                        this._counts.hidden.tag.end.open = 1;
                        this._counts.hidden.tag.end.name.open = 1;
                        this._continue = 1;
                    }
                    else {
                        this._fcode += '<span class="ec-code-hidden-comment-tag-start-open">'
                            + characters[this._index]
                            + '</span>';
                        this._counts.hidden.tag.start.open = 1;
                        this._counts.hidden.tag.start.name.open = 1;
                        this._continue = 1;
                    }
                }
                if (this._continue < 1) {
                    this._fcode += characters[this._index];
                }
            }
            else if (characters[this._index] === '>') {
                this._hidden_comment_ends('text');
                this._hidden_comment_ends('tag_start');
                this._hidden_comment_ends('tag_name');
                this._hidden_comment_ends('tag_end');
                this._hidden_comment_ends('meta_name');
                this._hidden_comment_ends('meta_value');
                this._fcode += '<span class="ec-code-hidden-comment-tag-close">'
                    + characters[this._index]
                    + '</span>';
            }
            else if ((characters[this._index] === ' ') && (this._counts.hidden.comment.condition.start.open < 1)) {
                this._hidden_comment_ends('text');
                this._hidden_comment_ends('tag_name');
                this._hidden_comment_ends('meta_name');
                this._hidden_comment_ends('meta_value');
                this._fcode += '<span class="ec-code-hidden-comment-whitespace">'
                    + characters[this._index]
                    + '</span>';
            }
            else if (this._counts.hidden.tag.start.name.open > 0) {
                this._fcode += '<span class="ec-code-hidden-comment-tag-start-name">' + characters[this._index];
                this._counts.hidden.tag.start.name.open = 0;
                this._counts.hidden.tag.start.name.close = 1;
            }
            else if (this._counts.hidden.tag.start.name.close > 0) {
                this._fcode += characters[this._index];
            }
            else if (this._counts.hidden.tag.end.name.open > 0) {
                this._fcode += '<span class="ec-code-hidden-comment-tag-end-name">' + characters[this._index];
                this._counts.hidden.tag.end.name.open = 0;
                this._counts.hidden.tag.end.name.close = 1;
            }
            else if (this._counts.hidden.tag.end.name.close > 0) {
                this._fcode += characters[this._index];
            }
            else if ((characters[this._index] === '=') && (this._counts.hidden.tag.start.open > 0)) {
                this._hidden_comment_ends('meta_name');
                this._fcode += '</span>';
                this._fcode += '<span class="ec-code-hidden-comment-tag-meta-equal">'
                    + characters[this._index]
                    + '</span>';
                this._counts.hidden.tag.meta.name = 0;
                this._counts.hidden.tag.meta.value = 1;
                this._counts.hidden.tag.meta.equal = 1;
                this._fcode += '<span class="ec-code-hidden-comment-tag-meta-value">';
            }
            else if (this._counts.hidden.tag.meta.value > 0) {
                this._fcode += characters[this._index];
            }
            else if (this._counts.hidden.tag.meta.name > 0) {
                this._fcode += characters[this._index];
            }
            else if (this._counts.hidden.tag.start.open > 0) {
                this._fcode += '<span class="ec-code-hidden-comment-tag-meta-name">' + characters[this._index];
                this._counts.hidden.tag.meta.name = 1;
            }
            else if (characters[this._index] === '-') {
                if (typeof characters[(this._index + 1)] !== 'undefined') {
                    if (characters[(this._index + 1)] === '>') {
                        this._hidden_comment_ends('text');
                        this._fcode += '<span class="ec-code-hidden-comment-line">'
                            + characters[this._index]
                            + '</span>';
                        this._fcode += '<span class="ec-code-hidden-comment-close">'
                            + characters[(this._index + 1)]
                            + '</span>';
                        this._counts.hidden.comment.open = 0;
                        this._index = this._index + 1;
                        this._continue = 1;
                    }
                }
                if (this._continue < 1) {
                    if (this._counts.hidden.comment.text.open < 1) {
                        this._fcode += '<span class="ec-code-hidden-comment-line">'
                            + characters[this._index]
                            + '</span>';
                    }
                    else {
                        this._fcode += characters[this._index];
                    }
                }
            }
            else {
                if (this._counts.hidden.comment.condition.start.open > 0) {
                    this._fcode += characters[this._index];
                }
                else {
                    if (this._counts.hidden.comment.text.open < 1) {
                        this._counts.hidden.comment.text.open = 1;
                        this._fcode += '<span class="ec-code-hidden-comment-text">';
                    }
                    this._fcode += characters[this._index];
                }
            }
        }
        _ends(group) {
            if (group === 'string') {
                if (this._counts.string > 0) {
                    this._counts.string = 0;
                    this._fcode += '</span>';
                }
            }
        }
        _hidden_comment_ends(group) {
            if (group === 'text') {
                if (this._counts.hidden.comment.text.open > 0) {
                    this._counts.hidden.comment.text.open = 0;
                    this._fcode += '</span>';
                }
            }
            else if (group === 'tag_start') {
                if (this._counts.hidden.tag.start.open > 0) {
                    this._counts.hidden.tag.start.open = 0;
                    this._fcode += '</span>';
                }
            }
            else if (group === 'tag_name') {
                if (this._counts.hidden.tag.start.name.close > 0) {
                    this._counts.hidden.tag.start.name.close = 0;
                    this._fcode += '</span>';
                }
            }
            else if (group === 'tag_end') {
                if (this._counts.hidden.tag.end.name.close > 0) {
                    this._counts.hidden.tag.end.name.close = 0;
                    this._fcode += '</span>';
                }
            }
            else if (group === 'meta_name') {
                if (this._counts.hidden.tag.meta.name > 0) {
                    this._fcode += '</span>';
                    this._counts.hidden.tag.meta.name = 0;
                }
            }
            else if (group === 'meta_value') {
                if (this._counts.hidden.tag.meta.value > 0) {
                    this._fcode += '</span>';
                    this._counts.hidden.tag.meta.value = 0;
                }
            }
            else if (group === 'condition_start') {
                if (this._counts.hidden.comment.condition.start.open > 0) {
                    this._fcode += '</span>';
                    this._counts.hidden.comment.condition.start.open = 0;
                }
            }
            else if (group === 'condition_end') {
                if (this._counts.hidden.comment.condition.end.open > 0) {
                    this._fcode += '</span>';
                    this._counts.hidden.comment.condition.end.open = 0;
                }
            }
        }
        _to_html(html) {
            html = html.replace(/&gt;/g, '>');
            html = html.replace(/&lt;/g, '<');
            html = html.replace(/&quot;/g, '"');
            html = html.replace(/&apos;/g, "'");
            html = html.replace(/&amp;/g, '&');
            return html;
        }
    }
    Plugins.HtmlFormatter = HtmlFormatter;
})(Plugins$6 = Plugins$6 || (Plugins$6 = {}));

var CssFormatter$3;
(function (CssFormatter) {
    class Prepare {
        code(css) {
            let fcode = css;
            fcode = fcode.split('    ').join('');
            fcode = fcode.replaceAll('  ', ' ');
            fcode = fcode.replaceAll(/[\n\r]/g, "");
            if (fcode.search('{') > -1) {
                fcode = fcode.replaceAll('{ ', '{');
                fcode = fcode.replaceAll(' {', '{');
            }
            if (fcode.search('}') > -1) {
                fcode = fcode.replaceAll('  }', '}');
                fcode = fcode.replaceAll(' }', '}');
                fcode = fcode.replaceAll('} ', '}');
            }
            if (fcode.search(':') > -1) {
                fcode = fcode.replaceAll(': ', ':');
                fcode = fcode.replaceAll(' :', ':');
            }
            if (fcode.split('*').length > 0) {
                fcode = fcode.replaceAll('* ', '*');
                fcode = fcode.replaceAll(' *', '*');
            }
            return fcode;
        }
    }
    CssFormatter.Prepare = Prepare;
})(CssFormatter$3 = CssFormatter$3 || (CssFormatter$3 = {}));

var CssFormatter$2;
(function (CssFormatter) {
    class Spaces {
        _cspace = 0;
        _open = '';
        _t_container = '';
        _counts = {
            break: 0,
            start: 0,
            brackets: {
                round: 0,
                curly: 0,
                url: 0
            },
            last: '',
            next: ''
        };
        _rules = {
            break: [';', '{', '}']
        };
        _history = '';
        add_spaces(fcode) {
            let splits = fcode.split('');
            let tsplits = splits.length;
            if (tsplits > 0) {
                for (let s = 0; s < tsplits; s++) {
                    if (typeof splits[(s - 1)] !== 'undefined') {
                        if ((splits[(s - 1)] === '*') && (splits[s] === '/')) {
                            this._open += splits[s];
                            this._open += "\r\n";
                            this._counts.last = "\r\n";
                            this._counts.break = 1;
                            continue;
                        }
                    }
                    if ((splits[s] !== '}') && (splits[s] !== '\n')) {
                        if ((this._counts.brackets.curly > 0) && (this._counts.last === "\r\n")) {
                            this._open += (this._counts.brackets.curly > 1) ? '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' : '&nbsp;&nbsp;&nbsp;&nbsp;';
                        }
                    }
                    else if ((splits[s] === '}') && (this._counts.brackets.curly > 1)) {
                        this._open += '&nbsp;&nbsp;&nbsp;&nbsp;';
                    }
                    this._open += splits[s];
                    this._counts.last = splits[s];
                    if ((splits[s] === '{') && (this._counts.brackets.curly < 1)) {
                        this._counts.brackets.curly = 1;
                    }
                    else if ((splits[s] === '{') && (this._counts.brackets.curly > 0)) {
                        this._counts.brackets.curly = 2;
                    }
                    else if ((splits[s] === '}') && (this._counts.brackets.curly === 2)) {
                        this._counts.brackets.curly = 1;
                        this._counts.break = 0;
                    }
                    else if (splits[s] === '}') {
                        this._counts.brackets.curly = 0;
                        this._counts.break = 0;
                    }
                    if (splits[s] === "\n")
                        this._counts.last = "\r\n";
                    this._add_break(splits[s]);
                }
            }
            return this._open;
        }
        _add_break(char) {
            if (char === "\r\n") {
                this._counts.break = 1;
            }
            else {
                if (this._counts.break < 1) {
                    if (this._rules.break.includes(char)) {
                        if (this._counts.brackets.url > 0) {
                            return;
                        }
                        this._counts.break = 1;
                        this._open += "\r\n";
                        this._counts.last = "\r\n";
                    }
                    else {
                        this._counts.break = 0;
                    }
                }
                else {
                    this._counts.break = 0;
                }
            }
        }
    }
    CssFormatter.Spaces = Spaces;
})(CssFormatter$2 = CssFormatter$2 || (CssFormatter$2 = {}));

var CssFormatter$1;
(function (CssFormatter) {
    class Lines {
        add_lines(fcode) {
            let splits = fcode.split("\r\n");
            let open = '';
            for (let split of splits) {
                if ((split.indexOf('ec-code-css-text') > -1) && (split.indexOf('ec-code-css-dots') > -1) && (split.indexOf('ec-code-css-end') > -1) && (split.indexOf('ec-code-css-curly-bracket-open') < 0)) {
                    split = split.replace('<span class="ec-code-css-dots">:</span>', '<span class="ec-code-css-dots">: </span>');
                }
                open += this.add_line(split);
            }
            return open;
        }
        add_line(value) {
            if (value.length < 1) {
                return '';
            }
            return '<div class="ec-composer-code-editor-line">'
                + '<div class="ec-composer-code-editor-line-code">'
                + value
                + '</div>'
                + '</div>';
        }
    }
    CssFormatter.Lines = Lines;
})(CssFormatter$1 = CssFormatter$1 || (CssFormatter$1 = {}));

var Plugins$5;
(function (Plugins) {
    class CssFormatter {
        _params = null;
        _index = 0;
        _fcode = '';
        _counts = {
            comment: {
                open: 0
            },
            text: {
                open: 0
            }
        };
        _characters = [];
        format(params, css) {
            this._params = params;
            let before_css = css;
            if (typeof this._params.spaces !== 'undefined') {
                if (this._params.spaces) {
                    css = new CssFormatter$3.Prepare().code(css);
                    css = new CssFormatter$2.Spaces().add_spaces(css);
                }
                else {
                    if ((css.length > 4) && !css.substring(0, 8).trim()) {
                        css = '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' + css.slice(8);
                    }
                    else if ((css.length > 3) && !css.substring(0, 4).trim()) {
                        css = (css.substring(4, 5) === '}') ? css.slice(4) : '&nbsp;&nbsp;&nbsp;&nbsp;' + css.slice(4);
                    }
                }
            }
            this._characters = css.split("");
            let tcharacters = this._characters.length;
            if (tcharacters > 0) {
                for (let c = 0; c < tcharacters; c++) {
                    if ((this._characters[this._index] === "\r") || (this._characters[this._index] === "\n")) {
                        this._close_span();
                        this._fcode += this._characters[this._index];
                        this._index++;
                        continue;
                    }
                    if (this._check_comment()) {
                        this._index++;
                    }
                    else if (this._check_comment2()) {
                        c = c + 1;
                        this._index = this._index + 2;
                    }
                    else if (this._check_whitespace()) {
                        c = c + 5;
                        this._index = this._index + 6;
                    }
                    else if (this._check_curly()) {
                        this._index++;
                    }
                    else if (this._check_round()) {
                        this._index++;
                    }
                    else if (this._check_dots()) {
                        this._index++;
                    }
                    else if (this._check_end()) {
                        this._index++;
                    }
                    else if (this._check_at()) {
                        this._index++;
                    }
                    else if (this._check_media()) {
                        c = c + 4;
                        this._index = this._index + 5;
                    }
                    else if (this._check_import()) {
                        c = c + 5;
                        this._index = this._index + 6;
                    }
                    else if (this._check_root()) {
                        c = c + 3;
                        this._index = this._index + 4;
                    }
                    else if (this._check_variable()) {
                        c = c + 1;
                        this._index = this._index + 2;
                    }
                    else if (this._check_text()) {
                        this._index++;
                    }
                    else {
                        this._fcode += this._characters[this._index];
                        this._index++;
                    }
                }
            }
            if ((typeof this._params.spaces === 'undefined') || !this._params.spaces) {
                if ((this._fcode.indexOf('ec-code-css-text') > -1) && (this._fcode.indexOf('ec-code-css-dots') > -1) && (this._fcode.indexOf('ec-code-css-end') > -1) && (this._fcode.indexOf('ec-code-css-curly-bracket-open') < 0) && (before_css.indexOf(': ') > -1)) ;
                else if (before_css.indexOf(': ') > -1) ;
            }
            if (typeof this._params.lines !== 'undefined') {
                if (!this._params.lines) {
                    return new Promise((resolve, reject) => {
                        resolve(this._fcode);
                    });
                }
            }
            let ready_code = new CssFormatter$1.Lines().add_lines(this._fcode);
            return new Promise((resolve, reject) => {
                resolve(ready_code);
            });
        }
        _check_comment() {
            let response = false;
            if (this._counts.comment.open > 0) {
                this._fcode += this._characters[this._index];
                response = true;
                if (this._characters[this._index] === '/') {
                    if (typeof this._characters[(this._index - 1)] !== 'undefined') {
                        if (this._characters[(this._index - 1)] === '*') {
                            this._counts.comment.open = 0;
                            this._fcode += '</span>';
                        }
                    }
                }
            }
            else if (this._characters[this._index] === '/') {
                if (typeof this._characters[(this._index + 1)] !== 'undefined') {
                    if (this._characters[(this._index + 1)] === '*') {
                        this._counts.comment.open = 1;
                        this._fcode += '<span class="ec-code-css-comment">';
                        this._fcode += this._characters[this._index];
                        response = true;
                    }
                }
            }
            return response;
        }
        _check_comment2() {
            let response = false;
            if ((this._characters[this._index] === '/') && (typeof this._characters[(this._index + 1)] !== 'undefined') && (this._characters[(this._index + 1)] === '/')) {
                this._close_span();
                this._fcode += '<span class="ec-code-css-comment2">'
                    + this._characters[this._index] + this._characters[(this._index + 1)]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_whitespace() {
            let response = false;
            if ((typeof this._characters[(this._index + 1)] !== 'undefined') &&
                (typeof this._characters[(this._index + 2)] !== 'undefined') &&
                (typeof this._characters[(this._index + 3)] !== 'undefined') &&
                (typeof this._characters[(this._index + 4)] !== 'undefined') &&
                (typeof this._characters[(this._index + 5)] !== 'undefined') &&
                this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] + this._characters[(this._index + 4)] + this._characters[(this._index + 5)] === '&nbsp;') {
                this._fcode += '<span class="ec-code-whitespace">'
                    + '&nbsp;'
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_curly() {
            let response = false;
            if (['{', '}'].includes(this._characters[this._index])) {
                this._close_span();
            }
            if (this._characters[this._index] === '{') {
                this._fcode += '<span class="ec-code-css-curly-bracket-open">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            else if (this._characters[this._index] === '}') {
                this._fcode += '<span class="ec-code-css-curly-bracket-close">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_round() {
            let response = false;
            if (['(', ')'].includes(this._characters[this._index])) {
                this._close_span();
            }
            if (this._characters[this._index] === '(') {
                this._fcode += '<span class="ec-code-css-round-bracket-open">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            else if (this._characters[this._index] === ')') {
                this._fcode += '<span class="ec-code-css-round-bracket-close">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_dot() {
            let response = false;
            if (this._characters[this._index] === '.') {
                this._fcode += '<span class="ec-code-css-selector-dot">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_dots() {
            let response = false;
            if (this._characters[this._index] === ':') {
                this._close_span();
                this._fcode += '<span class="ec-code-css-dots">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_end() {
            let response = false;
            if (this._characters[this._index] === ';') {
                this._close_span();
                this._fcode += '<span class="ec-code-css-end">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_at() {
            let response = false;
            if (this._characters[this._index] === '@') {
                this._close_span();
                this._fcode += '<span class="ec-code-css-at">'
                    + this._characters[this._index]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_media() {
            let response = false;
            if ((typeof this._characters[(this._index - 1)] !== 'undefined') && (this._characters[(this._index - 1)] === '@')) {
                if ((typeof this._characters[(this._index + 1)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 2)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 3)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 4)] !== 'undefined') &&
                    this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] + this._characters[(this._index + 4)] === 'media') {
                    this._close_span();
                    this._fcode += '<span class="ec-code-css-media">'
                        + this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] + this._characters[(this._index + 4)]
                        + '</span>';
                    response = true;
                }
            }
            return response;
        }
        _check_import() {
            let response = false;
            if ((typeof this._characters[(this._index - 1)] !== 'undefined') && (this._characters[(this._index - 1)] === '@')) {
                if ((typeof this._characters[(this._index + 1)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 2)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 3)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 4)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 5)] !== 'undefined') &&
                    this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] + this._characters[(this._index + 4)] + this._characters[(this._index + 5)] === 'import') {
                    this._close_span();
                    this._fcode += '<span class="ec-code-css-import">'
                        + this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] + this._characters[(this._index + 4)] + this._characters[(this._index + 5)]
                        + '</span>';
                    response = true;
                }
            }
            return response;
        }
        _check_root() {
            let response = false;
            if ((typeof this._characters[(this._index - 1)] !== 'undefined') && (this._characters[(this._index - 1)] === ':')) {
                if ((typeof this._characters[(this._index + 1)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 2)] !== 'undefined') &&
                    (typeof this._characters[(this._index + 3)] !== 'undefined') &&
                    this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)] === 'root') {
                    this._close_span();
                    this._fcode += '<span class="ec-code-css-root">'
                        + this._characters[this._index] + this._characters[(this._index + 1)] + this._characters[(this._index + 2)] + this._characters[(this._index + 3)]
                        + '</span>';
                    response = true;
                }
            }
            return response;
        }
        _check_variable() {
            let response = false;
            if ((this._characters[this._index] === '-') && (typeof this._characters[(this._index + 1)] !== 'undefined') && (this._characters[(this._index + 1)] === '-')) {
                this._close_span();
                this._fcode += '<span class="ec-code-css-variable">'
                    + this._characters[this._index] + this._characters[(this._index + 1)]
                    + '</span>';
                response = true;
            }
            return response;
        }
        _check_text() {
            let response = false;
            if (this._counts.text.open > 0) {
                this._fcode += this._characters[this._index];
                response = true;
            }
            else {
                this._counts.text.open = 1;
                this._fcode += '<span class="ec-code-css-text">';
                this._fcode += this._characters[this._index];
                response = true;
            }
            return response;
        }
        _close_span() {
            if (this._counts.comment.open > 0) {
                this._counts.comment.open = 0;
                this._fcode += '</span>';
            }
            if (this._counts.text.open > 0) {
                this._counts.text.open = 0;
                this._fcode += '</span>';
            }
        }
    }
    Plugins.CssFormatter = CssFormatter;
})(Plugins$5 = Plugins$5 || (Plugins$5 = {}));

var Plugins$4;
(function (Plugins) {
    class Color {
        add_color_box(e, params) {
            let target = e.target;
            if (params.selector.getElementsByClassName('ec-color-box').length > 0) {
                params.selector.getElementsByClassName('ec-color-box')[0].remove();
                if (params.selector.getElementsByClassName('ec-button-color-active').length > 0) {
                    params.selector.getElementsByClassName('ec-button-color-active')[0].classList.remove('ec-button-color-active');
                }
            }
            setTimeout(() => {
                target.closest('.ec-button-color').classList.add('ec-button-color-active');
                let value = (target.getAttribute('data-color') && (target.getAttribute('data-color') !== 'transparent')) ? target.getAttribute('data-color').slice(0, 7) : '';
                let box = '<div class="ec-dropdown ec-dropdown-show ec-dropdown-bottom ec-color-box">'
                    + '<div class="ec-grid">'
                    + '<div class="ec-grid-column-7">'
                    + '<div class="ec-color-opacity-filter">'
                    + '<span></span>'
                    + '</div>'
                    + '</div>'
                    + '<div class="ec-grid-column-5">'
                    + '<input type="text" class="ec-color-input" value="' + value + '" maxlength="7" />'
                    + '</div>'
                    + '</div>'
                    + '<div class="ec-grid">'
                    + '<div class="ec-grid-column-11">'
                    + '<canvas class="ec-color-gradient-selector"></canvas>'
                    + '</div>'
                    + '<div class="ec-grid-column-1">'
                    + '<canvas class="ec-color-gradient-filter"></canvas>'
                    + '</div>'
                    + '</div>'
                    + '</div>';
                params.selector.getElementsByClassName('ec-composer')[0].insertAdjacentHTML('beforeend', box);
                let button_rect = target.getBoundingClientRect();
                let color_box = params.selector.getElementsByClassName('ec-color-box')[0];
                let top_position = (window.innerHeight > (button_rect.top + 40 + 230)) ? (button_rect.top + 40) : (button_rect.top - 245);
                if (window.innerHeight < (button_rect.top + 40 + 230)) {
                    color_box.classList.add('ec-color-box-top');
                }
                color_box.style.cssText = 'top: ' + top_position + 'px;left:' + (button_rect.left - 201) + 'px';
                let rgb_color = this.convert_hex_to_rgb(target.getAttribute('data-color'));
                this.draw_gradient(params, {
                    r: rgb_color['r'],
                    g: rgb_color['g'],
                    b: rgb_color['b']
                });
                this.draw_filter(params);
                this.set_opacity(params, rgb_color['r'], rgb_color['g'], rgb_color['b'], rgb_color['a']);
            }, 300);
        }
        is_hex_valid = (hex) => {
            let regex = /^#?([0-9A-Fa-f]{3}){1,2}$/;
            return regex.test(hex);
        };
        convert_hex_to_rgb = (hex) => {
            if (!hex) {
                return { r: 255, g: 255, b: 255 };
            }
            hex = hex.replaceAll('#', '');
            let r = parseInt(hex.slice(0, 2), 16);
            let g = parseInt(hex.slice(2, 4), 16);
            let b = parseInt(hex.slice(4, 6), 16);
            let rgb;
            if (isNaN(r) || isNaN(g) || isNaN(b)) {
                rgb = {
                    r: 0,
                    g: 0,
                    b: 0
                };
                return rgb;
            }
            let a = parseInt(hex.slice(6, 8), 16) / 255;
            rgb = {
                r: r,
                g: g,
                b: b
            };
            if (!isNaN(a)) {
                rgb.a = a;
            }
            return rgb;
        };
        convert_rgb_to_hex = (r, g, b, a) => {
            r = Math.min(255, Math.max(0, r));
            g = Math.min(255, Math.max(0, g));
            b = Math.min(255, Math.max(0, b));
            a = Math.min(1, Math.max(0, a));
            let rh = r.toString(16).padStart(2, '0');
            let gh = g.toString(16).padStart(2, '0');
            let bh = b.toString(16).padStart(2, '0');
            let ah = Math.round(a * 255).toString(16).padStart(2, '0');
            return (a < 1) ? `#${rh}${gh}${bh}${ah}` : `#${rh}${gh}${bh}`;
        };
        convert_rgb_to_hsl = (r, g, b) => {
            r /= 255;
            g /= 255;
            b /= 255;
            let max = Math.max(r, g, b);
            let min = Math.min(r, g, b);
            let s = 0, l = 0;
            s = l = (max + min) / 2;
            let h = s;
            if (max === min) {
                h = s = 0;
            }
            else {
                const d = max - min;
                s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                switch (max) {
                    case r:
                        h = (g - b) / d + (g < b ? 6 : 0);
                        break;
                    case g:
                        h = (b - r) / d + 2;
                        break;
                    case b:
                        h = (r - g) / d + 4;
                        break;
                }
                h /= 6;
            }
            return [h * 360, s * 100, l * 100];
        };
        set_opacity = (params, r, g, b, a) => {
            let opacity = params.selector.getElementsByClassName('ec-color-opacity-filter')[0];
            opacity.style.setProperty('--background', 'linear-gradient(to right, rgba(' + r + ', ' + g + ', ' + b + ', 1), rgba(255, 0, 0, 0))');
            if (a) {
                let opacity_rect = opacity.getBoundingClientRect();
                opacity.getElementsByTagName('span')[0].style.left = (opacity_rect.width - (((a * 100) / opacity_rect.width) * 100)) + 'px';
            }
            else {
                opacity.getElementsByTagName('span')[0].style.left = '0';
            }
        };
        create_opacity = (e, params, callback) => {
            let target = e.target;
            let filter = params.selector.getElementsByClassName('ec-color-opacity-filter-active')[0];
            let filter_rect = filter.getBoundingClientRect();
            if (((e.clientX - filter_rect.x) >= 0) && ((e.clientX - filter_rect.x) <= (filter_rect.width - 4))) {
                let left = ((e.clientX - filter_rect.x) < 1) ? 0 : (e.clientX - filter_rect.x);
                filter.getElementsByTagName('span')[0].style.cssText = 'left: ' + left + 'px;';
                let slider_width = (100 - ((((filter_rect.width - 4) - left) / (filter_rect.width - 4)) * 100));
                let slider_opacity = ((100 - Math.round(slider_width)) < 10) ? '0.1' + (100 - Math.round(slider_width)) : ((100 - Math.round(slider_width)) < 100) ? '0.' + (100 - Math.round(slider_width)) : '1';
                let color_input = target.closest('.ec-grid').getElementsByClassName('ec-color-input');
                if (color_input.length > 0) {
                    let value = color_input[0]?.value;
                    if (value) {
                        let rgba_color = this.convert_hex_to_rgb(value.slice(0, 7));
                        let rgba = 'rgba(' + rgba_color['r'] + ', ' + rgba_color['g'] + ', ' + rgba_color['b'] + ', ' + slider_opacity + ')';
                        let is_valid = rgba.match(/rgba?\((\d+), (\d+), (\d+)(?:, ([\d.]+))?\)/);
                        if (is_valid) {
                            let [, r, g, b, a] = is_valid.map(Number);
                            let hex = this.convert_rgb_to_hex(r, g, b, a || 1);
                            callback(hex);
                        }
                    }
                }
            }
        };
        draw_gradient = (params, rgb_color) => {
            let hsl = this.convert_rgb_to_hsl(rgb_color['r'], rgb_color['g'], rgb_color['b']);
            let gradient = params.selector.getElementsByClassName('ec-color-gradient-selector')[0];
            let gradient_2d = gradient.getContext('2d', { willReadFrequently: true });
            let gradient_width = gradient.width;
            let gradient_height = gradient.height;
            gradient_2d.clearRect(0, 0, gradient_width, gradient_height);
            let wb_gradient = gradient_2d.createLinearGradient(0, 0, 0, gradient_height);
            wb_gradient.addColorStop(0, '#FFFFFF');
            wb_gradient.addColorStop(1, '#000000');
            let hsl_gradient = gradient_2d.createLinearGradient(0, 0, gradient_width, 0);
            hsl_gradient.addColorStop(0, `hsla(${Math.floor(hsl[0])},100%,50%,0)`);
            hsl_gradient.addColorStop(1, `hsla(${Math.floor(hsl[0])},100%,50%,1)`);
            gradient_2d.fillStyle = hsl_gradient;
            gradient_2d.fillRect(0, 0, gradient_width, gradient_height);
            gradient_2d.fillStyle = wb_gradient;
            gradient_2d.globalCompositeOperation = 'multiply';
            gradient_2d.fillRect(0, 0, gradient_width, gradient_height);
            gradient_2d.globalCompositeOperation = 'source-over';
        };
        draw_filter = (params) => {
            let filter = params.selector.getElementsByClassName('ec-color-gradient-filter')[0];
            let filter_2d = filter.getContext('2d', { willReadFrequently: true });
            let filter_width = filter.width;
            let filter_height = filter.height;
            filter_2d.rect(0, 0, filter_width, filter_height);
            let filter_linear_gradient = filter_2d.createLinearGradient(0, 0, 0, filter_height);
            filter_linear_gradient.addColorStop(0, 'rgba(255, 0, 0, 1)');
            filter_linear_gradient.addColorStop(0.18, 'rgba(255, 255, 0, 1)');
            filter_linear_gradient.addColorStop(0.35, 'rgba(0, 255, 0, 1)');
            filter_linear_gradient.addColorStop(0.55, 'rgba(0, 255, 255, 1)');
            filter_linear_gradient.addColorStop(0.69, 'rgba(0, 0, 255, 1)');
            filter_linear_gradient.addColorStop(0.91, 'rgba(255, 0, 255, 1)');
            filter_linear_gradient.addColorStop(1, 'rgba(255, 0, 0, 1)');
            filter_2d.fillStyle = filter_linear_gradient;
            filter_2d.fill();
        };
        get_gradient_color = (e, params, callback) => {
            let target = e.target;
            let gradient = target.closest('.ec-color-gradient-selector');
            if (gradient instanceof HTMLCanvasElement) {
                let img = new Image();
                img.src = gradient.toDataURL();
                img.onload = () => {
                    let gradient_rect = gradient.getBoundingClientRect();
                    img.width = gradient_rect.width;
                    img.height = gradient_rect.height;
                    let canvas = document.createElement('canvas');
                    canvas.width = img.width;
                    canvas.height = img.height;
                    canvas.getContext('2d', { willReadFrequently: true }).drawImage(img, 0, 0, img.width, img.height);
                    let image_data = canvas.getContext('2d', { willReadFrequently: true }).getImageData(e.offsetX, e.offsetY, 1, 1).data;
                    let input = params.selector.getElementsByClassName('ec-color-input')[0];
                    input.value = "#" + ((1 << 24) | (image_data[0] << 16) | (image_data[1] << 8) | image_data[2]).toString(16).slice(1).toUpperCase();
                    callback(input.value);
                    this.set_opacity(params, image_data[0], image_data[1], image_data[2]);
                };
            }
        };
        get_filter_color = (e, params, callback) => {
            let target = e.target;
            let gradient = target.closest('.ec-color-gradient-filter');
            if (gradient) {
                let filter_2d = gradient.getContext('2d', { willReadFrequently: true });
                let image_data = filter_2d.getImageData(e.offsetX, e.offsetY, 1, 1).data;
                let input = params.selector.getElementsByClassName('ec-color-input')[0];
                input.value = "#" + ((1 << 24) | (image_data[0] << 16) | (image_data[1] << 8) | image_data[2]).toString(16).slice(1).toUpperCase();
                callback(input.value);
                this.draw_gradient(params, {
                    r: image_data[0],
                    g: image_data[1],
                    b: image_data[2]
                });
                this.set_opacity(params, image_data[0], image_data[1], image_data[2]);
            }
        };
        remove_dropdown = (e, params) => {
            if (params.selector.getElementsByClassName('ec-color-box').length > 0) {
                let target = e.target;
                if (target !== null) {
                    if (!target.closest('.ec-dropdown')) {
                        if (params.selector.getElementsByClassName('ec-button-color-active').length > 0) {
                            params.selector.getElementsByClassName('ec-button-color-active')[0].classList.remove('ec-button-color-active');
                        }
                        let color_box = params.selector.getElementsByClassName('ec-color-box')[0];
                        color_box.classList.add('ec-dropdown-hide');
                        setTimeout(() => {
                            color_box.remove();
                        }, 300);
                    }
                }
            }
        };
    }
    Plugins.Color = Color;
})(Plugins$4 = Plugins$4 || (Plugins$4 = {}));

var Resources$N;
(function (Resources) {
    (function (Fonts) {
        class Amatic {
            get_info = () => {
                return {
                    name: 'Amatic SC',
                    slug: 'amatic',
                    link: 'family=Amatic+SC:wght@400;700',
                    property: '\'Amatic SC\', sans-serif',
                    weight: [
                        400,
                        700
                    ]
                };
            };
        }
        Fonts.Amatic = Amatic;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$N = Resources$N || (Resources$N = {}));

var Resources$M;
(function (Resources) {
    (function (Fonts) {
        class Arimo {
            get_info = () => {
                return {
                    name: 'Arimo',
                    slug: 'arimo',
                    link: 'family=Arimo:wght@400;500;600;700',
                    property: '\'Arimo\', sans-serif',
                    weight: [
                        400,
                        500,
                        600,
                        700
                    ]
                };
            };
        }
        Fonts.Arimo = Arimo;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$M = Resources$M || (Resources$M = {}));

var Resources$L;
(function (Resources) {
    (function (Fonts) {
        class Caveat {
            get_info = () => {
                return {
                    name: 'Caveat',
                    slug: 'caveat',
                    link: 'family=Caveat:wght@400;500;600;700',
                    property: '\'Caveat\', sans-serif',
                    weight: [
                        400,
                        500,
                        600,
                        700
                    ]
                };
            };
        }
        Fonts.Caveat = Caveat;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$L = Resources$L || (Resources$L = {}));

var Resources$K;
(function (Resources) {
    (function (Fonts) {
        class Cinzel {
            get_info = () => {
                return {
                    name: 'Cinzel',
                    slug: 'cinzel',
                    link: 'family=Cinzel:wght@400;500;600;700;800;900',
                    property: '\'Cinzel\', sans-serif',
                    weight: [
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Cinzel = Cinzel;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$K = Resources$K || (Resources$K = {}));

var Resources$J;
(function (Resources) {
    (function (Fonts) {
        class Exo {
            get_info = () => {
                return {
                    name: 'Exo',
                    slug: 'exo',
                    link: 'family=Exo:wght@100;200;300;400;500;600;700;800;900',
                    property: '\'Exo\', sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Exo = Exo;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$J = Resources$J || (Resources$J = {}));

var Resources$I;
(function (Resources) {
    (function (Fonts) {
        class Helvetica {
            get_info = () => {
                return {
                    name: 'Helvetica',
                    slug: 'helvetica',
                    link: '',
                    property: 'Helvetica, Arial, sans-serif',
                    weight: [
                        100,
                        400,
                        500,
                        700,
                        900
                    ]
                };
            };
        }
        Fonts.Helvetica = Helvetica;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$I = Resources$I || (Resources$I = {}));

var Resources$H;
(function (Resources) {
    (function (Fonts) {
        class Montserrat {
            get_info = () => {
                return {
                    name: 'Montserrat',
                    slug: 'montserrat',
                    link: 'family=Montserrat:wght@100;200;300;400;500;600;700',
                    property: '\'Montserrat\', sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700
                    ]
                };
            };
        }
        Fonts.Montserrat = Montserrat;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$H = Resources$H || (Resources$H = {}));

var Resources$G;
(function (Resources) {
    (function (Fonts) {
        class Opensans {
            get_info = () => {
                return {
                    name: 'Open Sans',
                    slug: 'opensans',
                    link: 'family=Open+Sans:wght@300;400;500;600;700;800',
                    property: '\'Open Sans\', sans-serif',
                    weight: [
                        300,
                        400,
                        500,
                        600,
                        700,
                        800
                    ]
                };
            };
        }
        Fonts.Opensans = Opensans;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$G = Resources$G || (Resources$G = {}));

var Resources$F;
(function (Resources) {
    (function (Fonts) {
        class Phudu {
            get_info = () => {
                return {
                    name: 'Phudu',
                    slug: 'phudu',
                    link: 'family=Phudu:wght@300;400;500;600;700;800;900',
                    property: '\'Phudu\', sans-serif',
                    weight: [
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Phudu = Phudu;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$F = Resources$F || (Resources$F = {}));

var Resources$E;
(function (Resources) {
    (function (Fonts) {
        class Poppins {
            get_info = () => {
                return {
                    name: 'Poppins',
                    slug: 'poppins',
                    link: 'family=Poppins:wght@100;200;300;400;500;600;700;800;900',
                    property: '\'Poppins\', sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Poppins = Poppins;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$E = Resources$E || (Resources$E = {}));

var Resources$D;
(function (Resources) {
    (function (Fonts) {
        class Lato {
            get_info = () => {
                return {
                    name: 'Lato',
                    slug: 'lato',
                    link: 'family=Lato:wght@100;300;400;700;900',
                    property: '\'Lato\', sans-serif',
                    weight: [
                        100,
                        300,
                        400,
                        700,
                        900
                    ]
                };
            };
        }
        Fonts.Lato = Lato;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$D = Resources$D || (Resources$D = {}));

var Resources$C;
(function (Resources) {
    (function (Fonts) {
        class Notosans {
            get_info = () => {
                return {
                    name: 'Noto Sans',
                    slug: 'notosans',
                    link: 'family=Noto+Sans:ital,wght@0,100;0,200;0,400;0,500;0,600;0,700;0,800;1,100',
                    property: '\'Noto Sans\', sans-serif',
                    weight: [
                        100,
                        200,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Notosans = Notosans;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$C = Resources$C || (Resources$C = {}));

var Resources$B;
(function (Resources) {
    (function (Fonts) {
        class Notosansdisplay {
            get_info = () => {
                return {
                    name: 'Noto Sans Display',
                    slug: 'notosansdisplay',
                    link: 'family=Noto+Sans+Display:wght@100;200;300;400;500;600;700;800;900',
                    property: '\'Noto Sans Display\', sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800
                    ]
                };
            };
        }
        Fonts.Notosansdisplay = Notosansdisplay;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$B = Resources$B || (Resources$B = {}));

var Resources$A;
(function (Resources) {
    (function (Fonts) {
        class Ubuntu {
            get_info = () => {
                return {
                    name: 'Ubuntu',
                    slug: 'ubuntu',
                    link: 'family=Ubuntu:wght@300;400;500;700',
                    property: '\'Ubuntu\', sans-serif',
                    weight: [
                        300,
                        400,
                        500,
                        700
                    ]
                };
            };
        }
        Fonts.Ubuntu = Ubuntu;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$A = Resources$A || (Resources$A = {}));

var Resources$z;
(function (Resources) {
    (function (Fonts) {
        class Indieflower {
            get_info = () => {
                return {
                    name: 'Indie Flower',
                    slug: 'indieflower',
                    link: 'family=Indie+Flower',
                    property: '\'Indie Flower\', sans-serif',
                    weight: [
                        400
                    ]
                };
            };
        }
        Fonts.Indieflower = Indieflower;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$z = Resources$z || (Resources$z = {}));

var Resources$y;
(function (Resources) {
    (function (Fonts) {
        class Jost {
            get_info = () => {
                return {
                    name: 'Jost',
                    slug: 'jost',
                    link: 'family=Jost:ital,wght@0,100..900;1,100..900',
                    property: '\'Jost\', \'Helvetica Neue\', Helvetica, Arial, sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Jost = Jost;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$y = Resources$y || (Resources$y = {}));

var Resources$x;
(function (Resources) {
    (function (Fonts) {
        class Kalam {
            get_info = () => {
                return {
                    name: 'Kalam',
                    slug: 'kalam',
                    link: 'family=Kalam:wght@300;400;700',
                    property: '\'Kalam\', sans-serif',
                    weight: [
                        300,
                        400,
                        700
                    ]
                };
            };
        }
        Fonts.Kalam = Kalam;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$x = Resources$x || (Resources$x = {}));

var Resources$w;
(function (Resources) {
    (function (Fonts) {
        class Roboto {
            get_info = () => {
                return {
                    name: 'Roboto',
                    slug: 'roboto',
                    link: 'family=Roboto:wght@100;300;400;500;700;900',
                    property: '\'Roboto\', sans-serif',
                    weight: [
                        100,
                        300,
                        400,
                        500,
                        700,
                        900
                    ]
                };
            };
        }
        Fonts.Roboto = Roboto;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$w = Resources$w || (Resources$w = {}));

var Resources$v;
(function (Resources) {
    (function (Fonts) {
        class Sacramento {
            get_info = () => {
                return {
                    name: 'Sacramento',
                    slug: 'sacramento',
                    link: 'family=Sacramento',
                    property: '\'Sacramento\', sans-serif',
                    weight: [
                        400
                    ]
                };
            };
        }
        Fonts.Sacramento = Sacramento;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$v = Resources$v || (Resources$v = {}));

var Resources$u;
(function (Resources) {
    (function (Fonts) {
        class Shadowsintolight {
            get_info = () => {
                return {
                    name: 'Shadows Into Light',
                    slug: 'shadowsintolight',
                    link: 'family=Shadows+Into+Light',
                    property: '\'Shadows Into Light\', sans-serif',
                    weight: [
                        400
                    ]
                };
            };
        }
        Fonts.Shadowsintolight = Shadowsintolight;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$u = Resources$u || (Resources$u = {}));

var Resources$t;
(function (Resources) {
    (function (Fonts) {
        class Nunito {
            get_info = () => {
                return {
                    name: 'Nunito',
                    slug: 'nunito',
                    link: 'family=Nunito:wght@200;300;400;500;600;700;800;900',
                    property: '\'Nunito\', sans-serif',
                    weight: [
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Nunito = Nunito;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$t = Resources$t || (Resources$t = {}));

var Resources$s;
(function (Resources) {
    (function (Fonts) {
        class Worksans {
            get_info = () => {
                return {
                    name: 'Work Sans',
                    slug: 'worksans',
                    link: 'family=Work+Sans:wght@100;200;300;400;500;600;700;800;900',
                    property: '\'Work Sans\', sans-serif',
                    weight: [
                        100,
                        200,
                        300,
                        400,
                        500,
                        600,
                        700,
                        800,
                        900
                    ]
                };
            };
        }
        Fonts.Worksans = Worksans;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$s = Resources$s || (Resources$s = {}));

var Resources$r;
(function (Resources) {
    (function (Fonts) {
        class Yellowtail {
            get_info = () => {
                return {
                    name: 'Yellowtail',
                    slug: 'yellowtail',
                    link: 'family=Yellowtail',
                    property: '\'Yellowtail\', sans-serif',
                    weight: [
                        400
                    ]
                };
            };
        }
        Fonts.Yellowtail = Yellowtail;
    })(Resources.Fonts || (Resources.Fonts = {}));
})(Resources$r = Resources$r || (Resources$r = {}));

let amatic = new Resources$N.Fonts.Amatic().get_info();
let arimo = new Resources$M.Fonts.Arimo().get_info();
let caveat = new Resources$L.Fonts.Caveat().get_info();
let cinzel = new Resources$K.Fonts.Cinzel().get_info();
let exo = new Resources$J.Fonts.Exo().get_info();
let helvetica = new Resources$I.Fonts.Helvetica().get_info();
let montserrat = new Resources$H.Fonts.Montserrat().get_info();
let opensans = new Resources$G.Fonts.Opensans().get_info();
let phudu = new Resources$F.Fonts.Phudu().get_info();
let poppins = new Resources$E.Fonts.Poppins().get_info();
let lato = new Resources$D.Fonts.Lato().get_info();
let notosans = new Resources$C.Fonts.Notosans().get_info();
let notosansdisplay = new Resources$B.Fonts.Notosansdisplay().get_info();
let ubuntu = new Resources$A.Fonts.Ubuntu().get_info();
let indieflower = new Resources$z.Fonts.Indieflower().get_info();
let jost = new Resources$y.Fonts.Jost().get_info();
let kalam = new Resources$x.Fonts.Kalam().get_info();
let roboto = new Resources$w.Fonts.Roboto().get_info();
let sacramento = new Resources$v.Fonts.Sacramento().get_info();
let shadowsintolight = new Resources$u.Fonts.Shadowsintolight().get_info();
let nunito = new Resources$t.Fonts.Nunito().get_info();
let worksans = new Resources$s.Fonts.Worksans().get_info();
let yellowtail = new Resources$r.Fonts.Yellowtail().get_info();

var fonts = /*#__PURE__*/Object.freeze({
    __proto__: null,
    amatic: amatic,
    arimo: arimo,
    caveat: caveat,
    cinzel: cinzel,
    exo: exo,
    helvetica: helvetica,
    indieflower: indieflower,
    jost: jost,
    kalam: kalam,
    lato: lato,
    montserrat: montserrat,
    notosans: notosans,
    notosansdisplay: notosansdisplay,
    nunito: nunito,
    opensans: opensans,
    phudu: phudu,
    poppins: poppins,
    roboto: roboto,
    sacramento: sacramento,
    shadowsintolight: shadowsintolight,
    ubuntu: ubuntu,
    worksans: worksans,
    yellowtail: yellowtail
});

var Resources$q;
(function (Resources) {
    (function (Elements) {
        class Text {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="text">'
                    + params.icons('text')
                    + '<div>'
                    + params.words('text')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data" contenteditable="true">'
                    + '<p>'
                    + params.words('this_text_model')
                    + '</p>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                let sizes = [];
                let fonts_list = Object.values(fonts);
                let selected_font = 'lato';
                let font = fonts_list.find(item => item.slug === selected_font);
                let weights = [];
                if (typeof font !== 'undefined') {
                    for (let weight of font.weight) {
                        weights.push({
                            item_id: weight,
                            item_name: weight
                        });
                    }
                }
                for (let s = 7; s < 99; s++) {
                    sizes.push({
                        item_id: s + 'px',
                        item_name: s + 'px'
                    });
                }
                return {
                    desktop: [
                        {
                            title: params.words('ai_assistant'),
                            list: [{
                                    name: 'ai',
                                    template: 'ai',
                                    value: 'chatgpt'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: ''
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: ''
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: ''
                                }, {
                                    name: '--text-link-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_link'),
                                        description: params.words('color_link_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: '--text-link-shadow-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_link_border'),
                                        description: params.words('color_link_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }
                    ],
                    mobile: [
                        {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: ''
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: ''
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: ''
                                }, {
                                    name: '--text-link-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_link'),
                                        description: params.words('color_link_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: '--text-link-shadow-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_link_border'),
                                        description: params.words('color_link_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }
                    ]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                styles += `\n.ec-element-content[data-id="${element_id}"] .ec-element-content-data ul, .ec-element-content[data-id="${element_id}"] .ec-element-content-data ol {`;
                styles += `\n    margin: 0;`;
                styles += `\n    padding: 15px 30px;`;
                styles += `\n}`;
                styles += `\n.ec-element-content[data-id="${element_id}"] .ec-element-content-data ul li, .ec-element-content[data-id="${element_id}"] .ec-element-content-data ol li {`;
                styles += `\n    padding: 0 0 10px;`;
                styles += `\n}`;
                styles += `\n.ec-element-content[data-id="${element_id}"] .ec-element-content-data a {`;
                styles += `\n    text-decoration: none;`;
                styles += `\n    color: var(--text-link-color);`;
                styles += `\n    box-shadow: 0 1px 0 0 var(--text-link-shadow-color);`;
                styles += `\n}`;
                return styles;
            };
        }
        Elements.Text = Text;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$q = Resources$q || (Resources$q = {}));

var ResourcesElementsText = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$q; }
});

var Resources$p;
(function (Resources) {
    (function (Elements) {
        class Button {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="button">'
                    + params.icons('button')
                    + '<div>'
                    + params.words('button')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<a href="#">'
                    + params.words('button')
                    + '</a>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                let sizes = [];
                let fonts_list = Object.values(fonts);
                let selected_font = 'lato';
                let font = fonts_list.find(item => item.slug === selected_font);
                let weights = [];
                if (typeof font !== 'undefined') {
                    for (let weight of font.weight) {
                        weights.push({
                            item_id: weight,
                            item_name: weight
                        });
                    }
                }
                for (let s = 7; s < 99; s++) {
                    sizes.push({
                        item_id: s + 'px',
                        item_name: s + 'px'
                    });
                }
                let styles = [{
                        item_id: 'solid',
                        item_name: 'Solid'
                    }, {
                        item_id: 'dashed',
                        item_name: 'Dashed'
                    }, {
                        item_id: 'dotted',
                        item_name: 'Dotted'
                    }, {
                        item_id: 'double',
                        item_name: 'Double'
                    }, {
                        item_id: 'groove',
                        item_name: 'Groove'
                    }];
                return {
                    desktop: [{
                            title: params.words('content'),
                            list: [
                                {
                                    name: 'text',
                                    template: 'text',
                                    value: params.words('button'),
                                    text: {
                                        label: params.words('text'),
                                        description: params.words('text_button_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'url',
                                    template: 'link',
                                    value: '#',
                                    text: {
                                        label: params.words('url_button'),
                                        description: params.words('url_button_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: true
                        },
                        {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('border'),
                            list: [
                                {
                                    name: 'outline_width',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_width'),
                                        description: params.words('border_width_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'outline_style',
                                    template: 'selector',
                                    value: 'solid',
                                    text: {
                                        label: params.words('border_style'),
                                        description: params.words('border_style_description')
                                    },
                                    element: 'a',
                                    items: styles
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 80,
                                    unit: '%',
                                    text: {
                                        label: params.words('button_width'),
                                        description: params.words('button_width_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('button_position'),
                                        description: params.words('button_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'center',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    element: 'a',
                                    items: sizes
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'color',
                                    template: 'color',
                                    value: '#FFFFFD',
                                    text: {
                                        label: params.words('button_color_text'),
                                        description: params.words('button_color_text_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'outline_color',
                                    template: 'color',
                                    value: '#8db79d',
                                    text: {
                                        label: params.words('button_color_border'),
                                        description: params.words('button_color_border_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#8db79d',
                                    text: {
                                        label: params.words('button_color_background'),
                                        description: params.words('button_color_background_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('border'),
                            list: [
                                {
                                    name: 'outline_width',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_width'),
                                        description: params.words('border_width_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'outline_style',
                                    template: 'selector',
                                    value: 'solid',
                                    text: {
                                        label: params.words('border_style'),
                                        description: params.words('border_style_description')
                                    },
                                    element: 'a',
                                    items: styles
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('button_width'),
                                        description: params.words('button_width_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('button_position'),
                                        description: params.words('button_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'center',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    element: 'a',
                                    items: sizes
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'color',
                                    template: 'color',
                                    value: '#FFFFFD',
                                    text: {
                                        label: params.words('button_color_text'),
                                        description: params.words('button_color_text_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'outline_color',
                                    template: 'color',
                                    value: '#8db79d',
                                    text: {
                                        label: params.words('button_color_border'),
                                        description: params.words('button_color_border_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#8db79d',
                                    text: {
                                        label: params.words('button_color_background'),
                                        description: params.words('button_color_background_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Button = Button;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$p = Resources$p || (Resources$p = {}));

var ResourcesElementsButton = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$p; }
});

var Resources$o;
(function (Resources) {
    (function (Elements) {
        class Image {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="image">'
                    + params.icons('imagesmode')
                    + '<div>'
                    + params.words('image')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<a href="#" class="ec-element-image ec-element-cover">'
                    + params.icons('image')
                    + '</a>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('url'),
                            list: [
                                {
                                    name: 'url',
                                    template: 'link',
                                    value: '#',
                                    text: {
                                        label: params.words('url_image'),
                                        description: params.words('url_image_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('images'),
                            list: [{
                                    name: 'images',
                                    template: 'images',
                                    has_link: false,
                                    element: '.ec-element-image'
                                }],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('image_position'),
                                        description: params.words('image_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'justify_content',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('image_position'),
                                        description: params.words('image_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Image = Image;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$o = Resources$o || (Resources$o = {}));

var ResourcesElementsImage = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$o; }
});

var Resources$n;
(function (Resources) {
    (function (Elements) {
        class Video {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="video">'
                    + params.icons('video_library')
                    + '<div>'
                    + params.words('video')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<a href="#" class="ec-element-image ec-element-cover">'
                    + params.icons('video')
                    + '</a>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('url'),
                            list: [
                                {
                                    name: 'url',
                                    template: 'link',
                                    value: '#',
                                    text: {
                                        label: params.words('url_video'),
                                        description: params.words('url_video_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('cover'),
                            list: [{
                                    name: 'images',
                                    template: 'images',
                                    has_link: true,
                                    element: '.ec-element-image'
                                }],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('image_position'),
                                        description: params.words('image_position_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('image_position'),
                                        description: params.words('image_position_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Video = Video;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$n = Resources$n || (Resources$n = {}));

var ResourcesElementsVideo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$n; }
});

var Resources$m;
(function (Resources) {
    (function (Elements) {
        class Title {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="title">'
                    + params.icons('title')
                    + '<div>'
                    + params.words('title')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<h2>'
                    + params.words('a_sample_content_title')
                    + '</h2>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                let sizes = [];
                let fonts_list = Object.values(fonts);
                let selected_font = 'opensans';
                let font = fonts_list.find(item => item.slug === selected_font);
                let weights = [];
                if (typeof font !== 'undefined') {
                    for (let weight of font.weight) {
                        weights.push({
                            item_id: weight,
                            item_name: weight
                        });
                    }
                }
                for (let s = 7; s < 99; s++) {
                    sizes.push({
                        item_id: s + 'px',
                        item_name: s + 'px'
                    });
                }
                return {
                    desktop: [{
                            title: params.words('content'),
                            list: [
                                {
                                    name: 'text',
                                    template: 'text',
                                    value: params.words('a_sample_content_title'),
                                    text: {
                                        label: params.words('text'),
                                        description: params.words('text_title_description')
                                    },
                                    element: 'h2'
                                },
                            ],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('title_width'),
                                        description: params.words('title_width_description')
                                    },
                                    element: 'h2'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '18px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h2'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '600',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h2'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('title_width'),
                                        description: params.words('title_width_description')
                                    },
                                    element: 'h2'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '18px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h2'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '600',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h2'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h2'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Title = Title;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$m = Resources$m || (Resources$m = {}));

var ResourcesElementsTitle = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$m; }
});

var Resources$l;
(function (Resources) {
    (function (Elements) {
        class Divider {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="divider">'
                    + params.icons('divider')
                    + '<div>'
                    + params.words('divider')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<div></div>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('divider_width'),
                                        description: params.words('divider_width_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('height'),
                            list: [
                                {
                                    name: 'height',
                                    template: 'number',
                                    value: 1,
                                    unit: 'px',
                                    text: {
                                        label: params.words('divider_height'),
                                        description: params.words('divider_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'justify_content',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('divider_position'),
                                        description: params.words('divider_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#828285',
                                    text: {
                                        label: params.words('color_divider_background'),
                                        description: params.words('color_divider_background_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 7,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('divider_width'),
                                        description: params.words('divider_width_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('height'),
                            list: [
                                {
                                    name: 'height',
                                    template: 'number',
                                    value: 1,
                                    unit: 'px',
                                    text: {
                                        label: params.words('divider_height'),
                                        description: params.words('divider_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'div'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'justify_content',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('divider_position'),
                                        description: params.words('divider_position_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#828285',
                                    text: {
                                        label: params.words('color_divider_background'),
                                        description: params.words('color_divider_background_description')
                                    },
                                    element: 'div'
                                }, {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Divider = Divider;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$l = Resources$l || (Resources$l = {}));

var ResourcesElementsDivider = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$l; }
});

var Resources$k;
(function (Resources) {
    (function (Elements) {
        class Spacer {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="spacer">'
                    + params.icons('spacer')
                    + '<div>'
                    + params.words('spacer')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data"></div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('height'),
                            list: [
                                {
                                    name: 'height',
                                    template: 'number',
                                    value: 30,
                                    unit: 'px',
                                    text: {
                                        label: params.words('divider_height'),
                                        description: params.words('divider_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: 'transparent',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('height'),
                            list: [
                                {
                                    name: 'height',
                                    template: 'number',
                                    value: 30,
                                    unit: 'px',
                                    text: {
                                        label: params.words('divider_height'),
                                        description: params.words('divider_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: 'transparent',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Spacer = Spacer;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$k = Resources$k || (Resources$k = {}));

var ResourcesElementsSpacer = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$k; }
});

var Resources$j;
(function (Resources) {
    (function (Elements) {
        class Menu {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="menu">'
                    + params.icons('menu')
                    + '<div>'
                    + params.words('menu')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<ul class="ec-display-flex">'
                    + '<li>'
                    + '<a href="#">'
                    + params.words('item') + ' 1'
                    + '</a>'
                    + '</li>'
                    + '<li>'
                    + '<a href="#">'
                    + params.words('item') + ' 2'
                    + '</a>'
                    + '</li>'
                    + '<li>'
                    + '<a href="#">'
                    + params.words('item') + ' 3'
                    + '</a>'
                    + '</li>'
                    + '</ul>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                let sizes = [];
                let fonts_list = Object.values(fonts);
                let selected_font = 'lato';
                let font = fonts_list.find(item => item.slug === selected_font);
                let weights = [];
                if (typeof font !== 'undefined') {
                    for (let weight of font.weight) {
                        weights.push({
                            item_id: weight,
                            item_name: weight
                        });
                    }
                }
                for (let s = 7; s < 99; s++) {
                    sizes.push({
                        item_id: s + 'px',
                        item_name: s + 'px'
                    });
                }
                let directions = [{
                        item_id: 'column',
                        item_name: params.words('vertical')
                    }, {
                        item_id: 'row',
                        item_name: params.words('horizontal')
                    }];
                return {
                    desktop: [{
                            title: params.words('menu'),
                            list: [
                                {
                                    name: 'menu',
                                    template: 'menu'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('direction'),
                            list: [
                                {
                                    name: 'flex_direction',
                                    template: 'direction',
                                    value: 'column',
                                    text: {
                                        label: params.words('menu_direction'),
                                        description: params.words('menu_direction_description')
                                    },
                                    items: directions,
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('space'),
                            list: [
                                {
                                    name: 'row_gap',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('vertical_space_items'),
                                        description: params.words('vertical_space_items_description')
                                    },
                                    element: 'ul'
                                }, {
                                    name: 'column_gap',
                                    template: 'number',
                                    value: 50,
                                    unit: 'px',
                                    text: {
                                        label: params.words('horizontal_space_items'),
                                        description: params.words('horizontal_space_items_description')
                                    },
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'align_self',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('menu_position'),
                                        description: params.words('menu_position_description')
                                    },
                                    element: '.ec-display-flex'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: ''
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_bullets'),
                                        description: params.words('color_bullets_description')
                                    },
                                    element: 'li'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: '--menu-link-shadow-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_border'),
                                        description: params.words('color_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('direction'),
                            list: [
                                {
                                    name: 'flex_direction',
                                    template: 'direction',
                                    value: 'column',
                                    text: {
                                        label: params.words('menu_direction'),
                                        description: params.words('menu_direction_description')
                                    },
                                    items: directions,
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('space'),
                            list: [
                                {
                                    name: 'row_gap',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('vertical_space_items'),
                                        description: params.words('vertical_space_items_description')
                                    },
                                    element: 'ul'
                                }, {
                                    name: 'column_gap',
                                    template: 'number',
                                    value: 50,
                                    unit: 'px',
                                    text: {
                                        label: params.words('horizontal_space_items'),
                                        description: params.words('horizontal_space_items_description')
                                    },
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 10,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'align_self',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('menu_position'),
                                        description: params.words('menu_position_description')
                                    },
                                    element: '.ec-display-flex'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('text'),
                            list: [
                                {
                                    name: 'line_height',
                                    template: 'number',
                                    value: 22,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: ''
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFF',
                                    text: {
                                        label: params.words('color_background'),
                                        description: params.words('color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_bullets'),
                                        description: params.words('color_bullets_description')
                                    },
                                    element: 'li'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'a'
                                }, {
                                    name: '--menu-link-shadow-color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_border'),
                                        description: params.words('color_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                styles += `\n.ec-element-content[data-id="${element_id}"] .ec-element-content-data ul li a {`;
                styles += `\n    text-decoration: none;`;
                styles += `\n    box-shadow: 0 1px 0 0 var(--menu-link-shadow-color);`;
                styles += `\n}`;
                return styles;
            };
        }
        Elements.Menu = Menu;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$j = Resources$j || (Resources$j = {}));

var ResourcesElementsMenu = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$j; }
});

var Resources$i;
(function (Resources) {
    (function (Elements) {
        class Social {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="social">'
                    + params.icons('share')
                    + '<div>'
                    + params.words('social')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<ul class="ec-display-flex ec-no-list-bullets">'
                    + '<li>'
                    + '<a href="#" data-network="facebook">'
                    + params.icons('facebook')
                    + '</a>'
                    + '</li>'
                    + '<li>'
                    + '<a href="#" data-network="instagram">'
                    + params.icons('instagram')
                    + '</a>'
                    + '</li>'
                    + '<li>'
                    + '<a href="#" data-network="linkedin">'
                    + params.icons('linkedin')
                    + '</a>'
                    + '</li>'
                    + '</ul>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('networks'),
                            list: [
                                {
                                    name: 'social',
                                    template: 'social'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('size'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 24,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icon_width'),
                                        description: params.words('icon_width_description')
                                    },
                                    element: 'svg'
                                }, {
                                    name: 'height',
                                    template: 'number',
                                    value: 24,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icon_height'),
                                        description: params.words('icon_height_description')
                                    },
                                    element: 'svg'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('space'),
                            list: [
                                {
                                    name: 'column_gap',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icons_space'),
                                        description: params.words('icons_space_description')
                                    },
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'align_self',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('icons_position'),
                                        description: params.words('icons_position_description')
                                    },
                                    element: '.ec-display-flex'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 6,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('size'),
                            list: [
                                {
                                    name: 'width',
                                    template: 'number',
                                    value: 24,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icon_width'),
                                        description: params.words('icon_width_description')
                                    },
                                    element: 'svg'
                                }, {
                                    name: 'height',
                                    template: 'number',
                                    value: 24,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icon_height'),
                                        description: params.words('icon_height_description')
                                    },
                                    element: 'svg'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('space'),
                            list: [
                                {
                                    name: 'column_gap',
                                    template: 'number',
                                    value: 5,
                                    unit: 'px',
                                    text: {
                                        label: params.words('icons_space'),
                                        description: params.words('icons_space_description')
                                    },
                                    element: 'ul'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'align_self',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('icons_position'),
                                        description: params.words('icons_position_description')
                                    },
                                    element: '.ec-display-flex'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Social = Social;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$i = Resources$i || (Resources$i = {}));

var ResourcesElementsSocial = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$i; }
});

var Resources$h;
(function (Resources) {
    (function (Elements) {
        class Icons {
            get_info = (params) => {
                return {
                    category: 'general'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="icons">'
                    + params.icons('icons')
                    + '<div>'
                    + params.words('icons')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<a href="#" class="ec-element-image ec-element-cover">'
                    + params.icons('shapes')
                    + '</a>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                return {
                    desktop: [{
                            title: params.words('url'),
                            list: [
                                {
                                    name: 'url',
                                    template: 'link',
                                    value: '#',
                                    text: {
                                        label: params.words('url_icon'),
                                        description: params.words('url_icon_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('icons'),
                            list: [{
                                    name: 'icons',
                                    template: 'icons',
                                    element: ''
                                }],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('icon_position'),
                                        description: params.words('icon_position_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('width'),
                            list: [
                                {
                                    name: 'max_width',
                                    template: 'number',
                                    value: 100,
                                    unit: '%',
                                    text: {
                                        label: params.words('max_width'),
                                        description: params.words('max_width_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('radius'),
                            list: [
                                {
                                    name: 'border_top_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_left_radius'),
                                        description: params.words('border_top_left_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_top_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_top_right_radius'),
                                        description: params.words('border_top_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_right_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_right_radius'),
                                        description: params.words('border_bottom_right_radius_description')
                                    },
                                    element: 'img'
                                }, {
                                    name: 'border_bottom_left_radius',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('border_bottom_left_radius'),
                                        description: params.words('border_bottom_left_radius_description')
                                    },
                                    element: 'img'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('position'),
                            list: [
                                {
                                    name: 'text_align',
                                    template: 'position',
                                    value: 'center',
                                    text: {
                                        label: params.words('icon_position'),
                                        description: params.words('icon_position_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Icons = Icons;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$h = Resources$h || (Resources$h = {}));

var ResourcesElementsIcons = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$h; }
});

var Resources$g;
(function (Resources) {
    (function (Elements) {
        class Product {
            get_info = (params) => {
                return {
                    category: 'advanced'
                };
            };
            get_element = (params) => {
                return '<a href="#" class="ec-element" data-name="product">'
                    + params.icons('product')
                    + '<div>'
                    + params.words('product')
                    + '</div>'
                    + '</a>';
            };
            get_content = (params) => {
                return '<div class="ec-element-content-data">'
                    + '<a href="#" class="ec-element-product">'
                    + '<div class="ec-element-product-image">'
                    + '<span class="ec-element-image ec-element-cover">'
                    + params.icons('image')
                    + '</span>'
                    + '</div>'
                    + '<div class="ec-element-product-description">'
                    + '<h4 contenteditable="true">'
                    + params.words('product')
                    + '</h4>'
                    + '<h5 contenteditable="true">'
                    + params.words('product_short_description')
                    + '</h5>'
                    + '<h6 contenteditable="true">'
                    + params.words('product_size')
                    + '</h6>'
                    + '<p contenteditable="true">'
                    + params.words('product_quantity')
                    + '</p>'
                    + '</div>'
                    + '<div class="ec-element-product-price">'
                    + '<h3 contenteditable="true">'
                    + params.words('product_price')
                    + '</h3>'
                    + '</div>'
                    + '</a>'
                    + '</div>';
            };
            get_events = (params) => {
                return [];
            };
            get_options = (params) => {
                let sizes = [];
                let fonts_list = Object.values(fonts);
                let product_name_selected_font = 'jost';
                let font = fonts_list.find(item => item.slug === product_name_selected_font);
                let weights = [];
                if (typeof font !== 'undefined') {
                    for (let weight of font.weight) {
                        weights.push({
                            item_id: weight,
                            item_name: weight
                        });
                    }
                }
                for (let s = 7; s < 99; s++) {
                    sizes.push({
                        item_id: s + 'px',
                        item_name: s + 'px'
                    });
                }
                return {
                    desktop: [{
                            title: params.words('url'),
                            list: [
                                {
                                    name: 'url',
                                    template: 'link',
                                    value: '#',
                                    text: {
                                        label: params.words('url_product'),
                                        description: params.words('url_product_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: true
                        }, {
                            title: params.words('images'),
                            list: [{
                                    name: 'images',
                                    template: 'images',
                                    has_link: false,
                                    element: '.ec-element-image'
                                }],
                            collapsed: true
                        }, {
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('product_name'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '15px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h4'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '500',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h4'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#0e0b00',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h4'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_description'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h5'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h5'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h5'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_size_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '13px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h6'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h6'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#29292A',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h6'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_quantity_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '13px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'p'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'p'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#29292A',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'p'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_price_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 80,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'center',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '15px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h3'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '500',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h3'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h3'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'border_color',
                                    template: 'color',
                                    value: '#edefec',
                                    text: {
                                        label: params.words('color_border'),
                                        description: params.words('color_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }],
                    mobile: [{
                            title: params.words('margin'),
                            list: [
                                {
                                    name: 'margin_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_top'),
                                        description: params.words('margin_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_right'),
                                        description: params.words('margin_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_bottom'),
                                        description: params.words('margin_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'margin_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('margin_left'),
                                        description: params.words('margin_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('padding'),
                            list: [
                                {
                                    name: 'padding_top',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_top'),
                                        description: params.words('padding_top_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_right',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_right'),
                                        description: params.words('padding_right_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_bottom',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_bottom'),
                                        description: params.words('padding_bottom_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'padding_left',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('padding_left'),
                                        description: params.words('padding_left_description')
                                    },
                                    element: ''
                                }
                            ],
                            collapsed: false
                        }, {
                            title: params.words('product_name'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h4'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '15px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h4'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '500',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h4'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#0e0b00',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h4'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_description'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h5'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '14px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h5'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h5'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h5'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_size_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h6'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '13px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h6'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h6'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#29292A',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h6'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_quantity_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 20,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'left',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'p'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '13px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'p'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '400',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'p'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#29292A',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'p'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('product_price_category'),
                            list: [{
                                    name: 'line_height',
                                    template: 'number',
                                    value: 80,
                                    unit: 'px',
                                    text: {
                                        label: params.words('line_height'),
                                        description: params.words('line_height_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'letter_spacing',
                                    template: 'number',
                                    value: 0,
                                    unit: 'px',
                                    text: {
                                        label: params.words('letter_spacing'),
                                        description: params.words('letter_spacing_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'text_align',
                                    template: 'align',
                                    value: 'center',
                                    text: {
                                        label: params.words('text_align'),
                                        description: params.words('text_align_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'font_family',
                                    template: 'font',
                                    value: product_name_selected_font,
                                    text: {
                                        label: params.words('font_family'),
                                        description: params.words('font_family_description')
                                    },
                                    element: 'h3'
                                }, {
                                    name: 'font_size',
                                    template: 'selector',
                                    value: '15px',
                                    text: {
                                        label: params.words('font_size'),
                                        description: params.words('font_size_description')
                                    },
                                    items: sizes,
                                    element: 'h3'
                                }, {
                                    name: 'font_weight',
                                    template: 'selector',
                                    value: '500',
                                    text: {
                                        label: params.words('font_weight'),
                                        description: params.words('font_weight_description')
                                    },
                                    items: weights,
                                    element: 'h3'
                                }, {
                                    name: 'color',
                                    template: 'color',
                                    value: '#12130f',
                                    text: {
                                        label: params.words('color_text'),
                                        description: params.words('color_text_description')
                                    },
                                    element: 'h3'
                                }],
                            collapsed: false
                        }, {
                            title: params.words('colors'),
                            list: [
                                {
                                    name: 'background_color',
                                    template: 'color',
                                    value: '#FFFFFC',
                                    text: {
                                        label: params.words('column_color_background'),
                                        description: params.words('column_color_background_description')
                                    },
                                    element: ''
                                }, {
                                    name: 'border_color',
                                    template: 'color',
                                    value: '#edefec',
                                    text: {
                                        label: params.words('color_border'),
                                        description: params.words('color_border_description')
                                    },
                                    element: 'a'
                                }
                            ],
                            collapsed: false
                        }]
                };
            };
            get_styles = (element_id) => {
                let styles = ``;
                return styles;
            };
        }
        Elements.Product = Product;
    })(Resources.Elements || (Resources.Elements = {}));
})(Resources$g = Resources$g || (Resources$g = {}));

var ResourcesElementsProduct = /*#__PURE__*/Object.freeze({
    __proto__: null,
    get Resources () { return Resources$g; }
});

var elements$2 = {
    ResourcesElementsText,
    ResourcesElementsButton,
    ResourcesElementsImage,
    ResourcesElementsVideo,
    ResourcesElementsTitle,
    ResourcesElementsDivider,
    ResourcesElementsSpacer,
    ResourcesElementsMenu,
    ResourcesElementsSocial,
    ResourcesElementsIcons,
    ResourcesElementsProduct
};

var PluginsSmallEditorCore$3;
(function (PluginsSmallEditorCore) {
    class Link {
        add_box = (e, params) => {
            e.preventDefault();
            setTimeout(() => {
                let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                let itemplate_position = itemplate.getBoundingClientRect();
                let cwindow = itemplate.contentWindow;
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let target = e.target;
                    if (target.closest('.ec-element-content-data')) {
                        let range = selection.getRangeAt(0);
                        let range_pos = range.getBoundingClientRect();
                        let a = (range.commonAncestorContainer.parentElement.nodeName === 'A') ? range.commonAncestorContainer.parentElement : range.commonAncestorContainer.parentElement.closest('a');
                        if (params.selector.getElementsByClassName('ec-ste-link-box').length < 1) {
                            if (a) {
                                let href = a.getAttribute('href');
                                let link_box = `<div class="ec-ste-link-box">
                                    <div class="ec-display-flex ec-justify-content-start">
                                        <input type="text" value="${href}" placeholder="${params.words('enter_url')}" maxlength="1000">
                                        <div class="ec-ste-link-box-group-buttons">
                                            <button type="button" class="ec-button ec-ste-link-update-button">${params.icons('link_add')}</button>
                                            <button type="button" class="ec-button ec-ste-link-remove-button">${params.icons('link_off')}</button>
                                        </div>
                                    </div>
                                </div>`;
                                params.selector.getElementsByClassName('ec-composer')[0].insertAdjacentHTML('beforeend', link_box);
                            }
                        }
                        let link_box_el = params.selector.getElementsByClassName('ec-ste-link-box')[0];
                        if (itemplate_position.width > (range_pos.x + 260)) {
                            let top = itemplate_position.y + range_pos.y + range_pos.height + 10;
                            let left = itemplate_position.x + range_pos.x - 15;
                            link_box_el.style.cssText = `top: ${top}px;left: ${left}px;--link-box-angle-left: 7px;`;
                            if (a && typeof a.getAttribute('href')) {
                                link_box_el.getElementsByTagName('input')[0].value = a.getAttribute('href');
                            }
                        }
                        if (a) {
                            let new_range = document.createRange();
                            new_range.setStartBefore(a.childNodes[0]);
                            new_range.setEndAfter(a.childNodes[(a.childNodes.length - 1)]);
                            if (selection && target.parentElement) {
                                selection.removeAllRanges();
                                selection.addRange(new_range);
                                a.closest('.ec-element-content-data').focus();
                            }
                        }
                    }
                }
            }, 300);
        };
        update = (e, params) => {
            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = itemplate.contentWindow;
            let selection = cwindow.getSelection();
            if (selection && (selection.rangeCount > 0)) {
                let range = selection.getRangeAt(0);
                let a = range.commonAncestorContainer;
                if (a.nodeType === Node.ELEMENT_NODE) {
                    let target = e.target;
                    let element = a;
                    let value = new Plugins$1.Sanitizer().sanitize_url(target.closest('.ec-display-flex').getElementsByTagName('input')[0].value);
                    if (value) {
                        element.setAttribute('href', value);
                    }
                    params.selector.getElementsByClassName('ec-ste-link-box')[0].remove();
                }
            }
        };
        remove = (e, params) => {
            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = itemplate.contentWindow;
            let selection = cwindow.getSelection();
            if (selection && (selection.rangeCount > 0)) {
                let range = selection.getRangeAt(0);
                let a = range.commonAncestorContainer;
                if (a.nodeType === Node.ELEMENT_NODE) {
                    let element = a;
                    let enodes = element.childNodes;
                    element.replaceWith(...enodes);
                    params.selector.getElementsByClassName('ec-ste-link-box')[0].remove();
                    params.selector.getElementsByClassName('ec-ste-add-link-button')[0].classList.remove('ec-ste-active-button');
                }
            }
        };
    }
    PluginsSmallEditorCore.Link = Link;
})(PluginsSmallEditorCore$3 = PluginsSmallEditorCore$3 || (PluginsSmallEditorCore$3 = {}));

var PluginsSmallEditorCore$2;
(function (PluginsSmallEditorCore) {
    class Font {
        change_font_family = (e, params) => {
            let target = e.target;
            let font = target.getAttribute('data-font');
            if (font) {
                let index = Object.keys(fonts).indexOf(font);
                if (typeof index !== 'number') {
                    show_message(get_word('error_name') + ': ' + get_word('no_font_found'));
                    return;
                }
                let font_params = Object.values(fonts)[index];
                let weights = font_params.weight;
                let weights_list = '';
                if (weights.length > 0) {
                    for (let weight of weights) {
                        weights_list += '<li>'
                            + '<a href="#" data-weight="' + weight + '">'
                            + weight
                            + '</a>'
                            + '</li>';
                    }
                }
                target.closest('.ec-ste-dropdown').getElementsByTagName('span')[0].textContent = font_params.name;
                target.closest('.ec-small-text-editor').getElementsByClassName('ec-ste-text-weights')[0].innerHTML = weights_list;
                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                let cwindow = iframe.contentWindow;
                if (cwindow) {
                    let selection = cwindow.getSelection();
                    if (selection && (selection.rangeCount > 0)) {
                        let text_editor = params.selector.getElementsByClassName('ec-small-text-editor')[0];
                        let font_name = text_editor.querySelector('.ec-ste-dropdown[data-scope="fonts"] span')?.textContent;
                        let fonts_list = Object.values(fonts);
                        let font = fonts_list.find(item => item.name === font_name);
                        if (font) {
                            let small_editor = new Plugins$1.Small_editor();
                            let range = selection.getRangeAt(0);
                            small_editor.apply_tags(params, range, 'font-family', { 'style': `font-family:${font.property};` });
                        }
                    }
                }
            }
        };
        change_font_size = (e, params) => {
            let target = e.target;
            let size = target.getAttribute('data-size');
            if (size) {
                target.closest('.ec-ste-dropdown').getElementsByTagName('span')[0].textContent = size;
                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                let cwindow = iframe.contentWindow;
                if (cwindow) {
                    let selection = cwindow.getSelection();
                    if (selection && (selection.rangeCount > 0)) {
                        let text_editor = params.selector.getElementsByClassName('ec-small-text-editor')[0];
                        let font_name = text_editor.querySelector('.ec-ste-dropdown[data-scope="fonts"] span')?.textContent;
                        let fonts_list = Object.values(fonts);
                        let font = fonts_list.find(item => item.name === font_name);
                        if (font) {
                            let small_editor = new Plugins$1.Small_editor();
                            let range = selection.getRangeAt(0);
                            small_editor.apply_tags(params, range, 'font-size', { 'style': `font-size:${size};` });
                        }
                    }
                }
            }
        };
        change_font_weight = (e, params) => {
            let target = e.target;
            let weight = target.getAttribute('data-weight');
            if (weight) {
                target.closest('.ec-ste-dropdown').getElementsByTagName('span')[0].textContent = weight;
                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                let cwindow = iframe.contentWindow;
                if (cwindow) {
                    let selection = cwindow.getSelection();
                    if (selection && (selection.rangeCount > 0)) {
                        let text_editor = params.selector.getElementsByClassName('ec-small-text-editor')[0];
                        let font_name = text_editor.querySelector('.ec-ste-dropdown[data-scope="fonts"] span')?.textContent;
                        let fonts_list = Object.values(fonts);
                        let font = fonts_list.find(item => item.name === font_name);
                        if (font) {
                            let small_editor = new Plugins$1.Small_editor();
                            let range = selection.getRangeAt(0);
                            small_editor.apply_tags(params, range, 'font-weight', { 'style': `font-weight:${weight};` });
                        }
                    }
                }
            }
        };
        identify_font = (e, params) => {
            let target = e.target;
            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = itemplate.contentWindow;
            let selection = cwindow.getSelection();
            if (selection && (selection.rangeCount > 0)) {
                let range = selection.getRangeAt(0);
                let node = range.commonAncestorContainer;
                if (node.nodeType === Node.ELEMENT_NODE) {
                    target = node;
                }
                else {
                    target = node.parentElement;
                }
            }
            let text_editor = params.selector.getElementsByClassName('ec-small-text-editor')[0];
            let properties = window.getComputedStyle(target);
            let font_name = properties.fontFamily;
            let fonts_list = Object.values(fonts);
            let font = fonts_list.find(item => item.property.replaceAll("'", "").replaceAll('"', '') === font_name.replaceAll("'", "").replaceAll('"', ''));
            if (font) {
                text_editor.querySelector('.ec-ste-dropdown[data-scope="fonts"] span').textContent = font.name;
                let weights = font.weight;
                let weights_list = '';
                if (weights.length > 0) {
                    for (let weight of weights) {
                        weights_list += '<li>'
                            + '<a href="#" data-weight="' + weight + '">'
                            + weight
                            + '</a>'
                            + '</li>';
                    }
                }
                params.selector.getElementsByClassName('ec-ste-text-weights')[0].innerHTML = weights_list;
            }
            text_editor.querySelector('.ec-ste-dropdown[data-scope="text-size"] span').textContent = properties.fontSize;
            text_editor.querySelector('.ec-ste-dropdown[data-scope="text-weight"] span').textContent = properties.fontWeight;
            let rgba = properties.color;
            let color = new Plugins$1.Color();
            let is_valid = rgba.match(/rgba?\((\d+), (\d+), (\d+)(?:, ([\d.]+))?\)/);
            if (is_valid) {
                let [, r, g, b, a] = is_valid.map(Number);
                let hex = color.convert_rgb_to_hex(r, g, b, a || 1);
                params.selector.querySelector('.ec-small-text-editor .ec-button-color').getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                params.selector.querySelector('.ec-small-text-editor .ec-button-color').getElementsByTagName('button')[0].setAttribute('data-color', hex);
            }
            else {
                params.selector.querySelector('.ec-small-text-editor .ec-button-color').getElementsByTagName('button')[0].style.setProperty('--bgcolor', '#12130f');
                params.selector.querySelector('.ec-small-text-editor .ec-button-color').getElementsByTagName('button')[0].setAttribute('data-color', '#12130f');
            }
        };
        get_styles = (target, name) => {
            let current = target;
            while (current) {
                let style = current?.style;
                if (style && current.style && style.getPropertyValue(name)) {
                    return current;
                }
                current = current?.parentElement;
            }
            return null;
        };
    }
    PluginsSmallEditorCore.Font = Font;
})(PluginsSmallEditorCore$2 = PluginsSmallEditorCore$2 || (PluginsSmallEditorCore$2 = {}));

var PluginsSmallEditorCore$1;
(function (PluginsSmallEditorCore) {
    class Color {
        change_text_color = (e, params, color) => {
            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = iframe.contentWindow;
            if (cwindow) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    e.target;
                    let small_editor = new Plugins$1.Small_editor();
                    let range = selection.getRangeAt(0);
                    let parent_element = range.startContainer.parentElement;
                    if (parent_element && parent_element.closest('.ec-element-content-data')) {
                        for (let child of parent_element.closest('.ec-element-content-data').children) {
                            if (small_editor.children_list(child).indexOf(parent_element) > -1) {
                                parent_element = child;
                                break;
                            }
                        }
                        small_editor.apply_tags(params, range, 'text-color', { 'style': `color:${color};` });
                    }
                }
            }
        };
    }
    PluginsSmallEditorCore.Color = Color;
})(PluginsSmallEditorCore$1 = PluginsSmallEditorCore$1 || (PluginsSmallEditorCore$1 = {}));

let PluginsSmallEditorCore = {
    Link: PluginsSmallEditorCore$3.Link,
    Font: PluginsSmallEditorCore$2.Font,
    Color: PluginsSmallEditorCore$1.Color
};

var Plugins$3;
(function (Plugins) {
    class Small_editor {
        text_align_directions = [
            'left',
            'center',
            'right',
            'justify'
        ];
        range;
        tag = '';
        tag_preferences = null;
        counters = {
            selected: 0,
            start: 0,
            end: 0,
            start_complete: 0,
            end_complete: 0,
            tag_childs: 0,
            add_tag: 0,
            remove_tag: 0,
            is_parent: 0
        };
        contents = {
            before: '',
            selected: '',
            after: '',
            tag_start: '',
            tag_end: ''
        };
        nodes = {};
        custom_tags = ['font-family', 'font-size', 'font-weight', 'text-color'];
        text_align = (target, direction) => {
            if (this.text_align_directions.includes(direction)) {
                target.style.textAlign = direction;
            }
        };
        children_list = (parent, result = []) => {
            if (parent.children && parent.children.length > 0) {
                for (let child of parent.children) {
                    result.push(child);
                    this.children_list(child, result);
                }
            }
            return result;
        };
        nodes_list = (parent, result = []) => {
            if (parent.childNodes && parent.childNodes.length > 0) {
                for (let child of parent.childNodes) {
                    result.push(child);
                    this.nodes_list(child, result);
                }
            }
            return result;
        };
        apply_tags = (params, range, tag, preferences) => {
            this.range = range;
            this.tag = tag;
            if (preferences) {
                this.tag_preferences = preferences;
            }
            let template = range.startContainer.parentElement.closest('.ec-composer-template');
            if (template) {
                if (range.toString().length > 0) {
                    this.extract_selected(range.startContainer.parentElement.closest('.ec-element-content-data'), '');
                    let before = this.contents.before;
                    let selected = '<sup data-content="ec-small-editor-temp-selection-start"></sup>' + this.contents.selected + '<sup data-content="ec-small-editor-temp-selection-end"></sup>';
                    let after = this.contents.after;
                    let dom_parser = new DOMParser();
                    let content_nodes = dom_parser.parseFromString(before + '' + selected + '' + after, 'text/html');
                    let start_element = content_nodes.querySelector('sup[data-content="ec-small-editor-temp-selection-start"]');
                    let end_element = content_nodes.querySelector('sup[data-content="ec-small-editor-temp-selection-end"]');
                    this.contents.tag_start = 'ec-small-editor-temp-selection-start';
                    this.contents.tag_end = 'ec-small-editor-temp-selection-end';
                    let closest_start_tag = start_element?.closest(tag);
                    let closest_end_tag = end_element?.closest(tag);
                    if (this.custom_tags.includes(this.tag)) {
                        if (!(preferences && preferences['style'] && (preferences['style'].slice(0, -1) === closest_end_tag?.getAttribute('style')))) {
                            closest_end_tag = null;
                        }
                        else if (!(preferences && preferences['style'] && (preferences['style'].slice(0, -1) === closest_start_tag?.getAttribute('style')))) {
                            closest_start_tag = null;
                        }
                    }
                    this.nodes = {
                        start: closest_start_tag,
                        end: closest_end_tag
                    };
                    let ready_code;
                    if (closest_start_tag) {
                        ready_code = this.remove_tag(content_nodes.getElementsByTagName('body')[0], '');
                        if (this.custom_tags.includes(tag) && preferences && preferences['style']) {
                            if (closest_start_tag.getAttribute('style') + ';' !== preferences['style']) {
                                let dom_parser = new DOMParser();
                                let content = dom_parser.parseFromString(ready_code, 'text/html');
                                let content_data = content.getElementsByClassName('ec-element-content-data')[0];
                                ready_code = this.add_tag(content_data, '');
                            }
                        }
                    }
                    else {
                        ready_code = this.add_tag(content_nodes.getElementsByTagName('body')[0], '');
                    }
                    if ((tag === 'a') && preferences && preferences['href']) {
                        let href = ' href="' + preferences['href'] + '"';
                        ready_code = ready_code.split('</' + tag + '><' + tag + href + '>').join('');
                        ready_code = ready_code.split('<' + tag + href + '></' + tag + '>').join('');
                    }
                    else if (this.custom_tags.includes(tag) && preferences && preferences['style']) {
                        let dom_parser = new DOMParser();
                        let content = dom_parser.parseFromString(ready_code, 'text/html');
                        let content_data = content.getElementsByClassName('ec-element-content-data')[0];
                        ready_code = this.remove_custom_tags(content_data, '');
                    }
                    else {
                        ready_code = ready_code.split('</' + tag + '><' + tag + '>').join('');
                        ready_code = ready_code.split('<' + tag + '></' + tag + '>').join('');
                    }
                    let content = dom_parser.parseFromString(ready_code, 'text/html');
                    if (content.getElementsByClassName('ec-element-content-data').length > 0) {
                        range.startContainer.parentElement.closest('.ec-element-content-data').innerHTML = content.getElementsByClassName('ec-element-content-data')[0].innerHTML;
                    }
                    let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                    let sup_start = template.querySelector('sup[data-content="ec-small-editor-temp-selection-start"]');
                    let sup_end = template.querySelector('sup[data-content="ec-small-editor-temp-selection-end"]');
                    if (!sup_end) {
                        let texts = Array.from(this.nodes_list(template.querySelector('.ec-element-content-data'))).filter(node => node.nodeName === '#text');
                        if (texts.length > 0) {
                            let last = texts[(texts.length - 1)];
                            let node_parent = last.parentElement;
                            let sup = document.createElement('sup');
                            sup.setAttribute('data-content', this.contents.tag_end);
                            let clast = last.cloneNode(true);
                            node_parent.replaceChild(sup, last);
                            node_parent.insertBefore(clast, sup);
                            sup_end = template.querySelector('sup[data-content="ec-small-editor-temp-selection-end"]');
                        }
                    }
                    if (sup_start && sup_end) {
                        let cwindow = itemplate.contentWindow;
                        let node_start = document.createTextNode('');
                        let node_end = document.createTextNode('');
                        sup_start.parentElement.insertBefore(node_start, sup_start);
                        sup_end.parentElement.insertBefore(node_end, sup_end);
                        let new_range = document.createRange();
                        new_range.setStart(sup_start.parentElement.childNodes[Array.from(sup_start.parentElement.childNodes).indexOf(node_start)], 0);
                        new_range.setEnd(sup_end.parentElement.childNodes[Array.from(sup_end.parentElement.childNodes).indexOf(node_end)], 0);
                        let selection = cwindow.getSelection();
                        if (selection) {
                            selection.removeAllRanges();
                            selection.addRange(new_range);
                            sup_start.remove();
                            sup_end.remove();
                        }
                    }
                }
                else {
                    let parent_element = range.startContainer.parentElement;
                    if (parent_element !== null) {
                        if (parent_element.closest('.ec-element-content-data')) {
                            parent_element.closest('.ec-element-content-data').focus();
                        }
                        else {
                            parent_element.getElementsByClassName('ec-element-content-data')[0].focus();
                        }
                    }
                }
            }
        };
        extract_selected = (parent, list) => {
            if (!parent) {
                return list;
            }
            if (parent.childNodes.length > 0) {
                let html_node = parent;
                let node_string = html_node.outerHTML.split('>').shift() + '>';
                let node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                if (this.counters.start_complete < 1) {
                    this.contents.before += node_string;
                }
                if (this.counters.end_complete > 0) {
                    this.contents.selected += node_string;
                }
                if ((this.counters.start_complete > 0) && (this.counters.end_complete < 1)) {
                    this.contents.after += node_string;
                }
                for (let node of parent.childNodes) {
                    if (node.isSameNode(this.range.startContainer)) {
                        this.counters.start = 1;
                    }
                    if (node.isSameNode(this.range.endContainer)) {
                        this.counters.end = 1;
                    }
                    if (node.nodeName === '#text') {
                        let text = '';
                        for (var t = 0; t < node.textContent.length; t++) {
                            if (this.counters.start > 0) {
                                if (t === this.range?.startOffset) {
                                    this.counters.start = 0;
                                    this.counters.start_complete = 1;
                                    this.counters.end_complete = 1;
                                }
                            }
                            if (this.counters.end > 0) {
                                if (t === this.range?.endOffset) {
                                    this.counters.end = 0;
                                    this.counters.end_complete = 0;
                                }
                                else if (t === (node.textContent.length - 1)) {
                                    this.counters.end = 0;
                                    this.counters.end_complete = 0;
                                    this.contents.selected += node.textContent[t];
                                    continue;
                                }
                            }
                            if (this.counters.start_complete < 1) {
                                this.contents.before += node.textContent[t];
                            }
                            if (this.counters.end_complete > 0) {
                                this.contents.selected += node.textContent[t];
                                continue;
                            }
                            if ((this.counters.start_complete > 0) && (this.counters.end_complete < 1)) {
                                this.contents.after += node.textContent[t];
                            }
                            text += node.textContent[t];
                        }
                        node_string += text;
                    }
                    else {
                        if (node.nodeName === 'BR') {
                            if (this.counters.start_complete < 1) {
                                this.contents.before += '<br />';
                            }
                            if (this.counters.end_complete > 0) {
                                this.contents.selected += '<br />';
                            }
                            if ((this.counters.start_complete > 0) && (this.counters.end_complete < 1)) {
                                this.contents.after += '<br />';
                            }
                        }
                        else {
                            if (node.nodeType === Node.ELEMENT_NODE) {
                                let element = node;
                                if (element.childNodes.length < 1) {
                                    node_string += (element.outerHTML === '<p></p>') ? '<p><br></p>' : element.outerHTML;
                                }
                            }
                            node_string += this.extract_selected(node, '');
                        }
                    }
                }
                if (this.counters.start_complete < 1) {
                    this.contents.before += node_end;
                }
                if (this.counters.end_complete > 0) {
                    this.contents.selected += node_end;
                }
                if ((this.counters.start_complete > 0) && (this.counters.end_complete < 1)) {
                    this.contents.after += node_end;
                }
                node_string += node_end;
                list += node_string;
            }
            return list;
        };
        remove_tag = (parent, list, params) => {
            if (!parent) {
                return list;
            }
            if (parent.childNodes.length > 0) {
                let html_node = parent;
                let node_string = '';
                let node_end = '';
                if ((html_node !== this.nodes.start) && (html_node !== this.nodes.end) && (parent.nodeName !== 'BODY')) {
                    if (this.counters.tag_childs > 0) {
                        if (parent.nodeName !== this.tag.toUpperCase()) {
                            node_string = html_node.outerHTML.split('>').shift() + '>';
                            node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                        }
                    }
                    else {
                        node_string = html_node.outerHTML.split('>').shift() + '>';
                        node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                    }
                }
                else if (html_node === this.nodes.start) {
                    this.counters.add_tag = 1;
                }
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        let text_node = '';
                        if (this.counters.add_tag > 0) {
                            if ((this.tag === 'a') && this.tag_preferences && (typeof this.tag_preferences.href !== 'undefined')) {
                                let href = ' href="' + this.tag_preferences.href + '"';
                                text_node = '<' + this.tag + href + '>' + node.textContent + '</' + this.tag + '>';
                            }
                            else if (this.custom_tags.includes(this.tag) && this.tag_preferences && (typeof this.tag_preferences.style !== 'undefined')) {
                                let style = ' style="' + this.tag_preferences.style + '"';
                                if (params && params[this.tag]) {
                                    style = ' style="' + params[this.tag] + '"';
                                }
                                text_node = '<' + this.tag + style + '>' + node.textContent + '</' + this.tag + '>';
                            }
                            else {
                                text_node = '<' + this.tag + '>' + node.textContent + '</' + this.tag + '>';
                            }
                        }
                        else if (this.counters.remove_tag > 0) {
                            if ((this.tag === 'a') && this.tag_preferences && (typeof this.tag_preferences.href !== 'undefined')) {
                                let href = ' href="' + this.tag_preferences.href + '"';
                                text_node = '<' + this.tag + href + '>' + node.textContent + '</' + this.tag + '>';
                            }
                            else if (this.custom_tags.includes(this.tag) && this.tag_preferences && (typeof this.tag_preferences.style !== 'undefined')) {
                                let style = ' style="' + this.tag_preferences.style + '"';
                                if (params && params[this.tag]) {
                                    style = ' style="' + params[this.tag] + '"';
                                }
                                text_node = '<' + this.tag + style + '>' + node.textContent + '</' + this.tag + '>';
                            }
                            else {
                                text_node = '<' + this.tag + '>' + node.textContent + '</' + this.tag + '>';
                            }
                        }
                        else {
                            text_node = node.textContent;
                        }
                        node_string += text_node;
                    }
                    else {
                        let tag = node;
                        if (tag.getAttribute('data-content') === this.contents.tag_start) {
                            this.counters.tag_childs = 1;
                            this.counters.add_tag = 0;
                        }
                        if (tag.getAttribute('data-content') === this.contents.tag_end) {
                            this.counters.tag_childs = 0;
                            if (tag.closest(this.tag)) {
                                if ((this.tag === 'a') && this.tag_preferences && (typeof this.tag_preferences.href !== 'undefined')) {
                                    this.counters.remove_tag = 1;
                                }
                                else if (this.custom_tags.includes(this.tag) && this.tag_preferences && (typeof this.tag_preferences.style !== 'undefined')) {
                                    this.counters.remove_tag = 1;
                                }
                                else {
                                    this.counters.remove_tag = 1;
                                }
                            }
                        }
                        let params = {};
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.getAttribute('style')) {
                                params[element.nodeName.toLocaleLowerCase()] = element.getAttribute('style');
                            }
                        }
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.childNodes.length < 1) {
                                node_string += element.outerHTML;
                            }
                        }
                        node_string += this.remove_tag(node, '', params);
                    }
                }
                if ((this.counters.remove_tag > 0) && !node_end) {
                    this.counters.remove_tag = 0;
                }
                node_string += node_end;
                list += node_string;
            }
            return list;
        };
        add_tag = (parent, list, params) => {
            if (!parent) {
                return list;
            }
            if (parent.childNodes.length > 0) {
                let html_node = parent;
                let node_string = '';
                let node_start = '';
                let node_end = '';
                if ((parent.nodeName !== 'BODY') || (this.counters.add_tag < 1 && parent.nodeName !== this.tag.toUpperCase())) {
                    node_start = html_node.outerHTML.split('>').shift() + '>';
                    node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                }
                if (parent.nodeName === this.tag.toUpperCase()) {
                    this.counters.is_parent = 1;
                }
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        let text_node = '';
                        if (this.counters.add_tag > 0) {
                            if (this.counters.is_parent > 0) {
                                text_node = node.textContent;
                            }
                            else {
                                if ((this.tag === 'a') && this.tag_preferences && (typeof this.tag_preferences.href !== 'undefined')) {
                                    let href = ' href="' + this.tag_preferences.href + '"';
                                    text_node = '<' + this.tag + href + '>' + node.textContent + '</' + this.tag + '>';
                                }
                                else if (this.custom_tags.includes(this.tag) && this.tag_preferences && (typeof this.tag_preferences.style !== 'undefined')) {
                                    let style = ' style="' + this.tag_preferences.style + '"';
                                    if (params && params[this.tag]) {
                                        style = ' style="' + params[this.tag] + '"';
                                    }
                                    text_node = '<' + this.tag + style + '>' + node.textContent + '</' + this.tag + '>';
                                }
                                else {
                                    text_node = '<' + this.tag + '>' + node.textContent + '</' + this.tag + '>';
                                }
                            }
                        }
                        else {
                            text_node = node.textContent;
                        }
                        node_string += text_node;
                    }
                    else {
                        let tag = node;
                        if (tag.getAttribute('data-content') === this.contents.tag_start) {
                            this.counters.add_tag = 1;
                        }
                        if (tag.getAttribute('data-content') === this.contents.tag_end) {
                            this.counters.add_tag = 0;
                        }
                        let params = {};
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.getAttribute('style')) {
                                params[element.nodeName.toLocaleLowerCase()] = element.getAttribute('style');
                            }
                        }
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.childNodes.length < 1) {
                                node_string += element.outerHTML;
                            }
                        }
                        node_string += this.add_tag(node, '', params);
                    }
                }
                if ((parent.nodeName === this.tag.toUpperCase()) && (this.counters.is_parent > 0)) {
                    this.counters.is_parent = 0;
                }
                list += node_start + node_string + node_end;
            }
            return list;
        };
        remove_custom_tags = (parent, list, params) => {
            if (!parent) {
                return list;
            }
            if (parent.childNodes.length > 0) {
                let html_node = parent;
                let node_string = !params?.start ? html_node.outerHTML.split('>').shift() + '>' : '';
                let node_end = !params?.end ? '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1) : '';
                let custom = 0;
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        custom = 0;
                        node_string += node.textContent;
                    }
                    else {
                        let params = { start: 0, end: 0 };
                        if (custom < 1) {
                            if (node.nodeType === Node.ELEMENT_NODE) {
                                let element = node;
                                let next_sibling = element.nextElementSibling;
                                if (next_sibling && element.getAttribute('style')) {
                                    let cstyle = element.getAttribute('style')?.replaceAll(';', '') ? element.getAttribute('style').replaceAll(';', '') : '';
                                    let nstyle = next_sibling.getAttribute('style')?.replaceAll(';', '') ? next_sibling.getAttribute('style').replaceAll(';', '') : '';
                                    if ((element.nodeName === next_sibling.nodeName) && (cstyle === nstyle)) {
                                        custom = 1;
                                        params.end = 1;
                                    }
                                }
                            }
                        }
                        else {
                            custom = 0;
                            params.start = 1;
                        }
                        let tag = node;
                        if (tag.getAttribute('data-content') === this.contents.tag_start) ;
                        if (tag.getAttribute('data-content') === this.contents.tag_end) ;
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.childNodes.length < 1) {
                                node_string += element.outerHTML;
                            }
                        }
                        node_string += this.remove_custom_tags(node, '', params);
                    }
                }
                node_string += node_end;
                list += node_string;
            }
            return list;
        };
        format = (e, params) => {
            let editor = params.selector.getElementsByClassName('ec-small-text-editor');
            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = itemplate.contentWindow;
            let selection = cwindow.getSelection();
            if (selection && (selection.rangeCount > 0)) {
                let target = e.target;
                if (target.closest('.ec-element-content-data')) {
                    let range = selection.getRangeAt(0);
                    let elements = null;
                    let text = document.createTextNode(e.data);
                    let end_list = [];
                    let italic = editor[0].getElementsByClassName('ec-ste-format-italic-button')[0];
                    if (italic.classList.contains('ec-ste-active-button')) {
                        if (!range.commonAncestorContainer.parentElement.closest('i') && (range.commonAncestorContainer.nodeName !== 'I')) {
                            elements = document.createElement('i');
                            elements.appendChild(text);
                        }
                    }
                    else {
                        if (range.commonAncestorContainer.parentElement.closest('i')) {
                            end_list.push(range.commonAncestorContainer.parentElement.closest('i'));
                        }
                        else if (range.commonAncestorContainer.nodeName === 'I') {
                            end_list.push(range.commonAncestorContainer.parentElement);
                        }
                    }
                    let underlined = editor[0].getElementsByClassName('ec-ste-format-underlined-button')[0];
                    if (underlined.classList.contains('ec-ste-active-button')) {
                        if (!range.commonAncestorContainer.parentElement.closest('u') && (range.commonAncestorContainer.nodeName !== 'U')) {
                            if (elements) {
                                let u = document.createElement('u');
                                u.appendChild(elements);
                                elements = u;
                            }
                            else {
                                elements = document.createElement('u');
                                elements.appendChild(text);
                            }
                        }
                    }
                    else {
                        if (range.commonAncestorContainer.parentElement.closest('u')) {
                            end_list.push(range.commonAncestorContainer.parentElement.closest('u'));
                        }
                        else if (range.commonAncestorContainer.nodeName === 'U') {
                            end_list.push(range.commonAncestorContainer.parentElement);
                        }
                    }
                    let strikethrough = editor[0].getElementsByClassName('ec-ste-format-strikethrough-button')[0];
                    if (strikethrough.classList.contains('ec-ste-active-button')) {
                        if (!range.commonAncestorContainer.parentElement.closest('s') && (range.commonAncestorContainer.nodeName !== 'S')) {
                            if (elements) {
                                let s = document.createElement('s');
                                s.appendChild(elements);
                                elements = s;
                            }
                            else {
                                elements = document.createElement('s');
                                elements.appendChild(text);
                            }
                        }
                    }
                    else {
                        if (range.commonAncestorContainer.parentElement.closest('s')) {
                            end_list.push(range.commonAncestorContainer.parentElement.closest('s'));
                        }
                        else if (range.commonAncestorContainer.nodeName === 'S') {
                            end_list.push(range.commonAncestorContainer.parentElement);
                        }
                    }
                    let node = range.commonAncestorContainer;
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        target = node;
                    }
                    else {
                        target = node.parentElement;
                    }
                    let properties = window.getComputedStyle(target);
                    let font_name = properties.fontFamily;
                    let selected_font = params.selector.querySelector('.ec-ste-dropdown[data-scope="fonts"] span')?.textContent;
                    let fonts_list = Object.values(fonts);
                    let font = fonts_list.find(item => item.name === selected_font);
                    if (typeof font !== 'undefined') {
                        if (font.property.replaceAll("'", '').replaceAll('"', "") !== font_name.replaceAll("'", '').replaceAll('"', "")) {
                            let font_family = new PluginsSmallEditorCore.Font().get_styles(target, 'font-family');
                            if (font_family) {
                                end_list.push(font_family);
                            }
                            let customElementRegistry = window.customElements;
                            if (customElementRegistry.get('font-family')) {
                                customElementRegistry.define('font-family', Classes$1.Custom);
                            }
                            if (elements) {
                                let new_font_family = document.createElement('font-family');
                                new_font_family.setAttribute('style', `font-family:${font.property};`);
                                new_font_family.appendChild(elements);
                                elements = new_font_family;
                            }
                            else {
                                elements = document.createElement('font-family');
                                elements.setAttribute('style', `font-family:${font.property};`);
                                elements.appendChild(text);
                            }
                        }
                    }
                    let selected_weight = params.selector.querySelector('.ec-ste-dropdown[data-scope="text-weight"] span')?.textContent;
                    if (properties.fontWeight !== selected_weight) {
                        let font_weight = new PluginsSmallEditorCore.Font().get_styles(target, 'font-weight');
                        if (font_weight) {
                            end_list.push(font_weight);
                        }
                        let customElementRegistry = window.customElements;
                        if (customElementRegistry.get('font-weight')) {
                            customElementRegistry.define('font-weight', Classes$1.Custom);
                        }
                        if (elements) {
                            let new_font_weight = document.createElement('font-weight');
                            new_font_weight.setAttribute('style', `font-weight:${selected_weight};`);
                            new_font_weight.appendChild(elements);
                            elements = new_font_weight;
                        }
                        else {
                            elements = document.createElement('font-weight');
                            elements.setAttribute('style', `font-weight:${selected_weight};`);
                            elements.appendChild(text);
                        }
                    }
                    let selected_size = params.selector.querySelector('.ec-ste-dropdown[data-scope="text-size"] span')?.textContent;
                    if (properties.fontSize !== selected_size) {
                        let font_size = new PluginsSmallEditorCore.Font().get_styles(target, 'font-size');
                        if (font_size) {
                            end_list.push(font_size);
                        }
                        let customElementRegistry = window.customElements;
                        if (customElementRegistry.get('font-size')) {
                            customElementRegistry.define('font-size', Classes$1.Custom);
                        }
                        if (elements) {
                            let new_font_size = document.createElement('font-size');
                            new_font_size.setAttribute('style', `font-size:${selected_size};`);
                            new_font_size.appendChild(elements);
                            elements = new_font_size;
                        }
                        else {
                            elements = document.createElement('font-size');
                            elements.setAttribute('style', `font-size:${selected_size};`);
                            elements.appendChild(text);
                        }
                    }
                    let rgba = properties.color;
                    let color = new Plugins$1.Color();
                    let is_valid = rgba.match(/rgba?\((\d+), (\d+), (\d+)(?:, ([\d.]+))?\)/);
                    if (is_valid) {
                        let [, r, g, b, a] = is_valid.map(Number);
                        let hex = color.convert_rgb_to_hex(r, g, b, a || 1);
                        let selected_color = params.selector.querySelector('.ec-small-text-editor .ec-button-color button')?.getAttribute('data-color');
                        if (selected_color !== hex) {
                            let text_color = new PluginsSmallEditorCore.Font().get_styles(target, 'color');
                            if (text_color) {
                                end_list.push(text_color);
                            }
                            let customElementRegistry = window.customElements;
                            if (customElementRegistry.get('text-color')) {
                                customElementRegistry.define('text-color', Classes$1.Custom);
                            }
                            if (elements) {
                                let new_text_color = document.createElement('text-color');
                                new_text_color.setAttribute('style', `color:${selected_color};`);
                                new_text_color.appendChild(elements);
                                elements = new_text_color;
                            }
                            else {
                                elements = document.createElement('text-color');
                                elements.setAttribute('style', `color:${selected_color};`);
                                elements.appendChild(text);
                            }
                        }
                    }
                    let parent_element = range.startContainer.parentElement;
                    if (parent_element) {
                        for (let child of target.closest('.ec-element-content-data').children) {
                            if (this.children_list(child).indexOf(parent_element) > -1) {
                                parent_element = child;
                                break;
                            }
                        }
                        if (end_list.length > 0) {
                            let parent_element_nodes = this.nodes_list(parent_element);
                            if (parent_element_nodes) {
                                let node_start = document.createTextNode('');
                                range.insertNode(node_start);
                                let last_child = null;
                                for (let node of parent_element_nodes) {
                                    if (range.commonAncestorContainer.isSameNode(node)) {
                                        last_child = node;
                                    }
                                }
                                if (last_child) {
                                    let parents = this.prepare_tags(range.startContainer, parent_element, node_start, end_list);
                                    if (parents) {
                                        e.preventDefault();
                                        let new_range = document.createRange();
                                        parents.parent.replaceChildren(...parents.child);
                                        let nodes = this.nodes_list(parents.parent);
                                        if (elements) {
                                            nodes[Array.from(nodes).indexOf(node_start)].parentElement?.replaceChild(elements, node_start);
                                        }
                                        else {
                                            nodes[Array.from(nodes).indexOf(node_start)].parentElement?.replaceChild(text, node_start);
                                        }
                                        for (let node of parents.parent.parentElement.childNodes) {
                                            let child = node;
                                            if (node.isSameNode(parents.parent)) {
                                                while (child.firstChild) {
                                                    parents.parent.parentElement.insertBefore(child.firstChild, child);
                                                }
                                                parents.parent.parentElement.removeChild(child);
                                                break;
                                            }
                                        }
                                        nodes = this.nodes_list(parent_element);
                                        new_range.setStart(nodes[Array.from(nodes).indexOf(text)], text.length);
                                        if (selection) {
                                            selection.removeAllRanges();
                                            selection.addRange(new_range);
                                            parent_element.closest('.ec-element-content-data').focus();
                                        }
                                    }
                                }
                            }
                        }
                        else if (elements) {
                            e.preventDefault();
                            range.insertNode(elements);
                            let new_range = document.createRange();
                            let nodes = this.nodes_list(parent_element);
                            new_range.setStart(nodes[Array.from(nodes).indexOf(text)], text.length);
                            if (selection && target.parentElement) {
                                selection.removeAllRanges();
                                selection.addRange(new_range);
                                parent_element.closest('.ec-element-content-data').focus();
                            }
                        }
                    }
                }
            }
        };
        prepare_tags = (node, until, node_start, end_list) => {
            let response = null;
            end_list.length;
            let tags_to_start = [];
            let tags_to_end = [];
            let tags_to_start_2 = [];
            let tags_to_end_2 = [];
            let currentElement = node.parentElement;
            let first_parent = null;
            while (currentElement) {
                if (end_list.indexOf(currentElement) > -1) ;
                else {
                    tags_to_start_2.push(currentElement.outerHTML.split('>').shift() + '>');
                    tags_to_end_2.push('<' + currentElement.outerHTML.split('<').slice(-1)[0]);
                }
                tags_to_start.push(currentElement.outerHTML.split('>').shift() + '>');
                tags_to_end.push('<' + currentElement.outerHTML.split('<').slice(-1)[0]);
                if (currentElement.parentElement.isSameNode(until)) {
                    first_parent = currentElement;
                    break;
                }
                currentElement = currentElement.parentElement;
            }
            if (first_parent) {
                let text_after_range = this.is_end(first_parent, node_start, 0, false);
                if (text_after_range) {
                    let unique_id = 'ec-small-editor-temp-' + this.generate_unique_id();
                    let sup = document.createElement('sup');
                    sup.setAttribute('data-content', unique_id);
                    let nodes_to_string = this.turn_nodes_to_text(first_parent, node_start, '', tags_to_end.join('') + tags_to_start_2.reverse().join('') + sup.outerHTML + tags_to_end_2.join('') + tags_to_start.reverse().join(''));
                    let dom_parser = new DOMParser();
                    let content_nodes = dom_parser.parseFromString(nodes_to_string, 'text/html');
                    content_nodes.getElementsByTagName('body')[0].appendChild(node_start);
                    let sup_el = content_nodes.querySelector('sup[data-content="' + unique_id + '"]');
                    if (sup_el) {
                        sup_el.replaceWith(node_start);
                        response = {
                            parent: first_parent,
                            child: content_nodes.getElementsByTagName('body')[0].childNodes
                        };
                    }
                }
                else {
                    let unique_id = 'ec-small-editor-temp-' + this.generate_unique_id();
                    let sup = document.createElement('sup');
                    sup.setAttribute('data-content', unique_id);
                    let nodes_to_string = this.turn_nodes_to_text(first_parent, node_start, '', '');
                    let dom_parser = new DOMParser();
                    let content_nodes = dom_parser.parseFromString(nodes_to_string + tags_to_start_2.reverse().join('') + sup.outerHTML + tags_to_end_2.join(''), 'text/html');
                    content_nodes.getElementsByTagName('body')[0].appendChild(node_start);
                    let sup_el = content_nodes.querySelector('sup[data-content="' + unique_id + '"]');
                    if (sup_el) {
                        sup_el.replaceWith(node_start);
                        response = {
                            parent: first_parent,
                            child: content_nodes.getElementsByTagName('body')[0].childNodes
                        };
                    }
                }
            }
            return response;
        };
        is_end = (parent, node_start, marker, exists) => {
            if (!parent) {
                return exists;
            }
            if (parent.childNodes.length > 0) {
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        if (node.isSameNode(node_start)) {
                            marker = 1;
                        }
                        if ((marker > 0) && (node.textContent.length > 0)) {
                            exists = true;
                        }
                    }
                    else {
                        exists = this.is_end(node, node_start, marker, exists);
                    }
                }
            }
            return exists;
        };
        turn_nodes_to_text = (parent, node_start, html, tags) => {
            if (!parent) {
                return html;
            }
            if (parent.childNodes.length > 0) {
                let html_node = parent;
                let node_string = html_node.outerHTML.split('>').shift() + '>';
                let node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        if (node_start.isSameNode(node) && (tags.length > 0)) {
                            node_string += tags;
                        }
                        else {
                            node_string += node.textContent;
                        }
                    }
                    else {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            let element = node;
                            if (element.childNodes.length < 1) {
                                node_string += element.outerHTML;
                            }
                        }
                        node_string += this.turn_nodes_to_text(node, node_start, '', tags);
                    }
                }
                node_string += node_end;
                html += node_string;
            }
            return html;
        };
        list = (e, params) => {
            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            let cwindow = itemplate.contentWindow;
            let selection = cwindow.getSelection();
            if (selection && (selection.rangeCount > 0)) {
                let range = selection.getRangeAt(0);
                let target = e.target;
                let parent_element = range.commonAncestorContainer.parentElement;
                if ((range.commonAncestorContainer.nodeName === 'P') || (parent_element && (parent_element.closest('p') || parent_element.nodeName === 'P'))) {
                    target.classList.add('ec-ste-active-button');
                    let p = (range.commonAncestorContainer.nodeName === 'P') ? range.commonAncestorContainer : parent_element.closest('p') || parent_element;
                    let node_start = document.createTextNode('');
                    range.insertNode(node_start);
                    let parent = target.classList.contains('ec-ste-list-bulleted-button') ? document.createElement('ul') : document.createElement('ol');
                    let li = document.createElement('li');
                    li.replaceChildren(...p.childNodes);
                    parent.appendChild(li);
                    p.replaceWith(parent);
                    let nodes = this.nodes_list(parent);
                    let new_range = document.createRange();
                    new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                    if (selection && target.parentElement) {
                        selection.removeAllRanges();
                        selection.addRange(new_range);
                        parent.closest('.ec-element-content-data').focus();
                    }
                }
                else if (parent_element && parent_element.closest('li')) {
                    if (target.classList.contains('ec-ste-list-bulleted-button') || target.classList.contains('ec-ste-list-numbered-button')) {
                        if (target.classList.contains('ec-ste-active-button')) {
                            if ((parent_element.closest('ul') && parent_element.closest('ul').childNodes.length < 2) || (parent_element.closest('ol') && parent_element.closest('ol').childNodes.length < 2)) {
                                target.classList.remove('ec-ste-active-button');
                                let ul = parent_element.closest('ul') ? parent_element.closest('ul') : parent_element.closest('ol');
                                let li = parent_element.closest('li');
                                if (ul && li) {
                                    let content_data = ul.closest('.ec-element-content-data');
                                    let parent_element = range.startContainer.parentElement;
                                    let node_start = document.createTextNode('');
                                    range.insertNode(node_start);
                                    let p = document.createElement('p');
                                    p.replaceChildren(...li.childNodes);
                                    ul.replaceWith(p);
                                    if (parent_element) {
                                        for (let child of content_data.children) {
                                            if (this.nodes_list(child).indexOf(node_start) > -1) {
                                                parent_element = child;
                                                break;
                                            }
                                        }
                                    }
                                    let nodes = this.nodes_list(p);
                                    let new_range = document.createRange();
                                    new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                    if (selection) {
                                        selection.removeAllRanges();
                                        selection.addRange(new_range);
                                        content_data.focus();
                                    }
                                }
                            }
                            else {
                                target.classList.remove('ec-ste-active-button');
                                let ul = parent_element.closest('ul') ? parent_element.closest('ul') : parent_element.closest('ol');
                                let li = parent_element.closest('li');
                                if (ul && li) {
                                    let node_start = document.createTextNode('');
                                    range.insertNode(node_start);
                                    let content_data = ul.closest('.ec-element-content-data');
                                    let tnodes = ul.childNodes.length;
                                    let cloned_ul = ul.cloneNode(true);
                                    Array.from(cloned_ul.childNodes).map(() => {
                                        cloned_ul.childNodes[0].remove();
                                    });
                                    let before_ul_empty = cloned_ul;
                                    let after_ul_empty = cloned_ul.cloneNode(true);
                                    let before_li = new DocumentFragment();
                                    let after_li = new DocumentFragment();
                                    let sel_index = Array.prototype.indexOf.call(Array.from(ul.getElementsByTagName('li')), li);
                                    let p = document.createElement('p');
                                    let index = 0;
                                    for (let c = 0; c < tnodes; c++) {
                                        if (c === sel_index) {
                                            index++;
                                            p.replaceChildren(...ul.childNodes[0].childNodes);
                                            ul.removeChild(ul.childNodes[0]);
                                        }
                                        else {
                                            if (index < 1) {
                                                before_li.appendChild(ul.childNodes[0]);
                                            }
                                            else {
                                                after_li.appendChild(ul.childNodes[0]);
                                            }
                                        }
                                    }
                                    if (before_li.childElementCount > 0) {
                                        before_ul_empty.append(before_li);
                                        content_data.insertBefore(before_ul_empty, ul);
                                    }
                                    content_data.insertBefore(p, ul);
                                    if (after_li.childElementCount > 0) {
                                        after_ul_empty.append(after_li);
                                        content_data.insertBefore(after_ul_empty, ul);
                                    }
                                    content_data.removeChild(ul);
                                    if (parent_element) {
                                        for (let child of content_data.children) {
                                            if (this.nodes_list(child).indexOf(node_start) > -1) {
                                                parent_element = child;
                                                break;
                                            }
                                        }
                                    }
                                    let nodes = this.nodes_list(p);
                                    let new_range = document.createRange();
                                    new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                    if (selection) {
                                        selection.removeAllRanges();
                                        selection.addRange(new_range);
                                        content_data.focus();
                                    }
                                }
                            }
                        }
                        else {
                            target.closest('.ec-ste-group-buttons').getElementsByClassName('ec-ste-active-button')[0].classList.remove('ec-ste-active-button');
                            target.classList.add('ec-ste-active-button');
                            let node_start = document.createTextNode('');
                            range.insertNode(node_start);
                            if (parent_element.closest('ul')) {
                                let ul = parent_element.closest('ul');
                                if (ul) {
                                    let content_data = ul.closest('.ec-element-content-data');
                                    let ol = document.createElement('ol');
                                    let li = ul.querySelectorAll('li');
                                    li.forEach((item) => {
                                        ol.appendChild(item);
                                    });
                                    ul.replaceWith(ol);
                                    let nodes = this.nodes_list(ol);
                                    let new_range = document.createRange();
                                    new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                    if (selection) {
                                        selection.removeAllRanges();
                                        selection.addRange(new_range);
                                        content_data.focus();
                                    }
                                }
                            }
                            else {
                                let ol = parent_element.closest('ol');
                                if (ol) {
                                    let content_data = ol.closest('.ec-element-content-data');
                                    let ul = document.createElement('ul');
                                    let li = ol.querySelectorAll('li');
                                    li.forEach((item) => {
                                        ul.appendChild(item);
                                    });
                                    ol.replaceWith(ul);
                                    let nodes = this.nodes_list(ul);
                                    let new_range = document.createRange();
                                    new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                    if (selection) {
                                        selection.removeAllRanges();
                                        selection.addRange(new_range);
                                        content_data.focus();
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };
        get_styles = (e, params) => {
            let target = e.target;
            if (target !== null) {
                if (target.closest('.ec-element-content-data')) {
                    let element = target.closest('.ec-element-content');
                    let element_id = element?.getAttribute('data-id');
                    let element_name = element?.getAttribute('data-name');
                    if (typeof element_name === 'string') {
                        let tools_editor = params.selector.getElementsByClassName('ec-small-text-editor')[0];
                        if (params.selector.getElementsByClassName('ec-composer-element-options')[0].getAttribute('data-element') !== element_id) {
                            if ((element_name === 'text') && !tools_editor.classList.contains('ec-ste-show')) {
                                tools_editor.classList.add('ec-ste-show');
                            }
                            else if ((element_name !== 'text') && tools_editor.classList.contains('ec-ste-show')) {
                                tools_editor.classList.remove('ec-ste-show');
                            }
                        }
                        if ((element_name === 'text') && tools_editor.classList.contains('ec-ste-show')) {
                            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            let cwindow = iframe.contentWindow;
                            if (cwindow) {
                                if (target.closest('.ec-element-content-data')) {
                                    params.selector.getElementsByClassName('ec-ste-active-button')[0]?.classList.remove('ec-ste-active-button');
                                    let styles = window.getComputedStyle(target);
                                    if (styles) {
                                        let text_align = styles.textAlign;
                                        if (this.text_align_directions.includes(text_align)) {
                                            params.selector.querySelector('.ec-ste-align-button[data-direction="' + text_align + '"]').classList.add('ec-ste-active-button');
                                        }
                                        let font_style = styles.fontStyle;
                                        if ((font_style === 'italic') || target?.closest('i')) {
                                            params.selector.getElementsByClassName('ec-ste-format-italic-button')[0].classList.add('ec-ste-active-button');
                                        }
                                        else {
                                            params.selector.getElementsByClassName('ec-ste-format-italic-button')[0].classList.remove('ec-ste-active-button');
                                        }
                                        let text_decoration = styles.textDecoration;
                                        if ((text_decoration.search('underline') > -1) || target?.closest('u')) {
                                            params.selector.getElementsByClassName('ec-ste-format-underlined-button')[0].classList.add('ec-ste-active-button');
                                        }
                                        else {
                                            params.selector.getElementsByClassName('ec-ste-format-underlined-button')[0].classList.remove('ec-ste-active-button');
                                        }
                                        if (target?.closest('s')) {
                                            params.selector.getElementsByClassName('ec-ste-format-strikethrough-button')[0].classList.add('ec-ste-active-button');
                                        }
                                        else {
                                            params.selector.getElementsByClassName('ec-ste-format-strikethrough-button')[0].classList.remove('ec-ste-active-button');
                                        }
                                        setTimeout(() => {
                                            let selection = cwindow.getSelection();
                                            if (selection && (selection.rangeCount > 0)) {
                                                let range = selection.getRangeAt(0);
                                                let styles = null;
                                                if (range.commonAncestorContainer.parentElement.closest('p')) {
                                                    styles = window.getComputedStyle(range.commonAncestorContainer.parentElement.closest('p'));
                                                }
                                                else if (range.commonAncestorContainer.nodeName === 'P') {
                                                    styles = window.getComputedStyle(range.commonAncestorContainer.parentElement);
                                                }
                                                else if (range.commonAncestorContainer.parentElement.closest('li')) {
                                                    styles = window.getComputedStyle(range.commonAncestorContainer.parentElement.closest('li'));
                                                }
                                                else if (range.commonAncestorContainer.nodeName === 'LI') {
                                                    styles = window.getComputedStyle(range.commonAncestorContainer.parentElement);
                                                }
                                                if (styles) {
                                                    let text_align = styles.textAlign;
                                                    if (this.text_align_directions.includes(text_align)) {
                                                        params.selector.querySelector('.ec-ste-align-button[data-direction="' + text_align + '"]').classList.add('ec-ste-active-button');
                                                    }
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('i') || (range.commonAncestorContainer.nodeName === 'I')) {
                                                    params.selector.getElementsByClassName('ec-ste-format-italic-button')[0].classList.add('ec-ste-active-button');
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('u') || (range.commonAncestorContainer.nodeName === 'U')) {
                                                    params.selector.getElementsByClassName('ec-ste-format-underlined-button')[0].classList.add('ec-ste-active-button');
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('s') || (range.commonAncestorContainer.nodeName === 'S')) {
                                                    params.selector.getElementsByClassName('ec-ste-format-strikethrough-button')[0].classList.add('ec-ste-active-button');
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('ul')) {
                                                    params.selector.getElementsByClassName('ec-ste-list-bulleted-button')[0].classList.add('ec-ste-active-button');
                                                }
                                                else {
                                                    params.selector.getElementsByClassName('ec-ste-list-bulleted-button')[0].classList.remove('ec-ste-active-button');
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('ol')) {
                                                    params.selector.getElementsByClassName('ec-ste-list-numbered-button')[0].classList.add('ec-ste-active-button');
                                                }
                                                else {
                                                    params.selector.getElementsByClassName('ec-ste-list-numbered-button')[0].classList.remove('ec-ste-active-button');
                                                }
                                                if (range.commonAncestorContainer.parentElement.closest('a') || (range.commonAncestorContainer.nodeName === 'A')) {
                                                    params.selector.getElementsByClassName('ec-ste-add-link-button')[0].classList.add('ec-ste-active-button');
                                                    if (e.type === 'mousedown') {
                                                        new PluginsSmallEditorCore.Link().add_box(e, params);
                                                    }
                                                    else {
                                                        if (params.selector.getElementsByClassName('ec-ste-link-box').length > 0) {
                                                            params.selector.getElementsByClassName('ec-ste-link-box')[0].remove();
                                                        }
                                                    }
                                                }
                                                else {
                                                    params.selector.getElementsByClassName('ec-ste-add-link-button')[0].classList.remove('ec-ste-active-button');
                                                }
                                                new PluginsSmallEditorCore.Font().identify_font(e, params);
                                            }
                                        }, 100);
                                    }
                                }
                            }
                        }
                        let name_space = Object.getOwnPropertyDescriptor(elements$2, 'ResourcesElements' + element_name.charAt(0).toUpperCase() + element_name.substring(1))?.value.Resources.Elements;
                        if (typeof name_space !== 'undefined') {
                            let name_space = Object.getOwnPropertyDescriptor(elements$2, 'ResourcesElements' + element_name.charAt(0).toUpperCase() + element_name.substring(1))?.value.Resources.Elements;
                            let key = Object.keys(name_space)[0];
                            let element_class = new name_space[key]();
                            let element_options = element_class.get_options(params);
                            if (element_options) {
                                if (element_options.desktop.length > 0) {
                                    let desktop_elements = [];
                                    for (let group of element_options.desktop) {
                                        if (group.list.length > 0) {
                                            for (let option of group.list) {
                                                if (option.element && (desktop_elements.indexOf(option.element) < 0)) {
                                                    desktop_elements.push(option.element);
                                                }
                                            }
                                        }
                                    }
                                    let desktop_properties_list = {};
                                    let mobile_properties_list = {};
                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                        let idocument = iframe_template[0].contentDocument;
                                        if (idocument !== null) {
                                            let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                            if ((typeof element_style !== 'undefined') && element_style) {
                                                let style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                if ((typeof style !== 'undefined') && style) {
                                                    let sheet = style.sheet;
                                                    if (sheet !== null) {
                                                        if (sheet.cssRules.length > 0) {
                                                            for (let rule of sheet.cssRules) {
                                                                if (typeof rule.media !== 'undefined') {
                                                                    if (rule.conditionText.replaceAll(' ', '').search('(max-width:600px)') > -1) {
                                                                        if (rule.cssRules.length > 0) {
                                                                            for (let media_rule of rule.cssRules) {
                                                                                if (media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') {
                                                                                    let style = media_rule.style;
                                                                                    for (let property of media_rule.style) {
                                                                                        if (typeof mobile_properties_list['mobile'] !== 'undefined') {
                                                                                            mobile_properties_list['mobile'][property] = style.getPropertyValue(property);
                                                                                        }
                                                                                        else {
                                                                                            mobile_properties_list['mobile'] = {
                                                                                                [property]: style.getPropertyValue(property)
                                                                                            };
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    if (rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') {
                                                                        let style = rule.style;
                                                                        for (let property of rule.style) {
                                                                            if (typeof desktop_properties_list['desktop'] !== 'undefined') {
                                                                                desktop_properties_list['desktop'][property] = style.getPropertyValue(property);
                                                                            }
                                                                            else {
                                                                                desktop_properties_list['desktop'] = {
                                                                                    [property]: style.getPropertyValue(property)
                                                                                };
                                                                            }
                                                                        }
                                                                    }
                                                                    if (desktop_elements.length > 0) {
                                                                        for (let element_name of desktop_elements) {
                                                                            if ((rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) {
                                                                                let style = rule.style;
                                                                                for (let property of rule.style) {
                                                                                    if (typeof desktop_properties_list[element_name] !== 'undefined') {
                                                                                        desktop_properties_list[element_name][property] = style.getPropertyValue(property);
                                                                                    }
                                                                                    else {
                                                                                        desktop_properties_list[element_name] = {
                                                                                            [property]: style.getPropertyValue(property)
                                                                                        };
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (params.selector.getElementsByClassName('ec-composer-element-options')[0].getAttribute('data-element') !== element_id) {
                                        let options_class = params.selector.getElementsByClassName('ec-composer-element-options')[0];
                                        if (options_class.classList.contains('ec-composer-element-options-show')) {
                                            options_class.classList.remove('ec-composer-element-options-show');
                                            options_class.classList.add('ec-composer-element-options-hide');
                                        }
                                        setTimeout(() => {
                                            options_class.classList.remove('ec-composer-element-options-hide');
                                            options_class.classList.add('ec-composer-element-options-show');
                                            params.selector.getElementsByClassName('ec-template-code-button')[0].classList.remove('ec-template-code-hide-button');
                                            params.selector.getElementsByClassName('ec-composer-container')[0].classList.remove('ec-composer-container-template-and-code');
                                            if (target.closest('.ec-composer-template').getElementsByClassName('ec-element-content-active').length > 0) {
                                                let active = target.closest('.ec-composer-template').getElementsByClassName('ec-element-content-active')[0];
                                                active.classList.remove('ec-element-content-active');
                                            }
                                            options_class.setAttribute('data-element', element_id);
                                            target.closest('.ec-element-content').classList.add('ec-element-content-active');
                                            let desktop_html = get_element_options(element_options, desktop_properties_list, params, 'desktop');
                                            if (typeof desktop_html !== 'undefined') {
                                                params.selector.querySelector('.ec-composer-element-options .ec-sections[data-scope="desktop"]').innerHTML = desktop_html;
                                            }
                                            let mobile_html = get_element_options(element_options, mobile_properties_list, params, 'mobile');
                                            if (typeof mobile_html !== 'undefined') {
                                                params.selector.querySelector('.ec-composer-element-options .ec-sections[data-scope="mobile"]').innerHTML = mobile_html;
                                            }
                                        }, 100);
                                    }
                                }
                            }
                            else {
                                show_message(params.words('error_name') + ': ' + params.words('no_element_options_found'));
                            }
                        }
                        else {
                            show_message(params.words('error_name') + ': ' + params.words('no_element_found'));
                        }
                    }
                    else {
                        show_message(params.words('error_name') + ': ' + params.words('no_element_found'));
                    }
                }
            }
        };
        generate_unique_id = () => {
            let unique_string = Date.now().toString(36);
            let random_string = Math.random().toString(36);
            return `${unique_string}-${random_string}`;
        };
        close_tags = (content) => {
            content = content.replaceAll('<br>', '<br />');
            return content;
        };
    }
    Plugins.Small_editor = Small_editor;
})(Plugins$3 = Plugins$3 || (Plugins$3 = {}));

var Plugins$2;
(function (Plugins) {
    class Sanitizer {
        sanitize_url = (url) => {
            try {
                let parse_url = new URL(url);
                let protocols = ['http:', 'https:'];
                if (!protocols.includes(parse_url.protocol)) {
                    throw new Error(get_word('invalid_protocol'));
                }
                return parse_url.toString();
            }
            catch (error) {
                show_message(get_word('error_name') + ': ' + error.message);
                return '';
            }
        };
    }
    Plugins.Sanitizer = Sanitizer;
})(Plugins$2 = Plugins$2 || (Plugins$2 = {}));

const Plugins = {
    Sanitizer: Plugins$2.Sanitizer,
    StartLoading: Plugins$7.StartLoading,
    HtmlFormatter: Plugins$6.HtmlFormatter,
    CssFormatter: Plugins$5.CssFormatter,
    Color: Plugins$4.Color,
    Small_editor: Plugins$3.Small_editor
};
var Plugins$1 = Plugins;

var Class$6;
(function (Class) {
    class Backup {
        _observer;
        static _removed = 0;
        async save_html_update(params) {
            if (this._observer) {
                this._observer.disconnect();
            }
            let http_send = new Classes$1.Https();
            let $this = this;
            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            if (iframe) {
                let iframeDocument = iframe.contentDocument;
                let html = iframeDocument?.getElementsByClassName('ec-composer-template');
                if (html !== undefined) {
                    if (html.length > 0) {
                        let target_node = html[0].closest('.ec-composer-template');
                        let config = { attributes: true, childList: true, subtree: true, characterData: true };
                        this._observer = new MutationObserver((mutations_list) => {
                            for (let mutation of mutations_list) {
                                let mutation_target = mutation.target;
                                if ((typeof mutation_target.classList !== 'undefined') && (mutation_target.classList.contains('ec-hide-content') || mutation_target.classList.contains('ec-composer-template-content-line'))) {
                                    Backup._removed = 1;
                                }
                                else if (mutation.nextSibling) {
                                    if ((mutation.nextSibling instanceof Element) && mutation.nextSibling && mutation.nextSibling.classList && (mutation.nextSibling.classList.length > 0) && (mutation.nextSibling.classList[0] === 'ec-composer-template-cell-drop')) {
                                        Backup._removed = 1;
                                    }
                                }
                                if (mutation.attributeName === 'contenteditable') {
                                    continue;
                                }
                                if (typeof mutation_target.classList !== 'undefined') {
                                    if (mutation_target.classList.contains('ec-composer-template') && ((mutation.type !== 'attributes') || (mutation.attributeName === 'style'))) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-composer-template-content-line-active')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-composer-template-content-line-drop')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-composer-template-cell-drop')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-hide-content') && !mutation_target.classList.contains('ec-composer-template-content-line')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-element-content')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-composer-template-cell-placeholder')) {
                                        continue;
                                    }
                                    if (mutation_target.classList.contains('ec-composer-template-content-line-selected') && !mutation_target.classList.contains('ec-hide-content')) {
                                        continue;
                                    }
                                }
                                if (mutation.addedNodes.length > 0) {
                                    if (mutation.addedNodes[0].toString() !== '[object Text]') {
                                        if (mutation.addedNodes[0].classList[0] === 'ec-composer-template-content-line') {
                                            continue;
                                        }
                                        if (mutation.addedNodes[0].classList[0] === 'ec-composer-template-content-line-drop') {
                                            continue;
                                        }
                                        if (mutation.addedNodes[0].classList[0] === 'ec-composer-template-cell-drop') {
                                            continue;
                                        }
                                        if (mutation.addedNodes[0].classList[0] === 'ec-composer-template-content-line-selected') {
                                            continue;
                                        }
                                    }
                                }
                                if (mutation.removedNodes.length > 0) {
                                    if (mutation.removedNodes[0].toString() !== '[object Text]') {
                                        if (mutation.removedNodes[0].classList[0] === 'ec-composer-template-content-line-drop') {
                                            continue;
                                        }
                                        if (mutation.removedNodes[0].classList[0] === 'ec-composer-template-cell-drop') {
                                            continue;
                                        }
                                        if (mutation.removedNodes[0].classList[0] === 'ec-composer-template-cell-placeholder') {
                                            continue;
                                        }
                                        if (mutation.removedNodes[0].classList[0] === 'ec-composer-template-content-line-selected') {
                                            continue;
                                        }
                                    }
                                }
                                if (typeof html !== 'undefined') {
                                    Classes$1.Timer.schedule_event('update_html', () => {
                                        $this.saving_animation(params, 'show');
                                        if (Backup._removed > 0) {
                                            Backup._removed = 0;
                                            let elements_ids = [];
                                            let elements = target_node.getElementsByClassName('ec-element-content');
                                            if (elements.length > 0) {
                                                for (let element of elements) {
                                                    let element_id = element.getAttribute('data-id');
                                                    if (!element_id) {
                                                        continue;
                                                    }
                                                    elements_ids.push(element_id);
                                                }
                                            }
                                            let content = target_node.outerHTML;
                                            content = content.replaceAll('ec-composer-template-editor', '');
                                            let template_data = {
                                                content: remove_buttons(content),
                                                elements_ids: elements_ids
                                            };
                                            let update = {
                                                template_id: params.template_id,
                                                template: template_data
                                            };
                                            let send_request = http_send.put(params.options('api_url') + 'api/create_update', update);
                                            send_request.then((response) => {
                                                if (response.success) {
                                                    new Classes$1.History().get_history_all(params);
                                                    setTimeout(() => {
                                                        $this.saving_animation(params, 'success');
                                                    }, 1000);
                                                    if (params.selector.getElementsByClassName('ec-composer-editor-mode').length < 1) {
                                                        if (params.selector.getElementsByClassName('ec-composer-container')[0].classList.contains('ec-composer-container-template-and-code')) {
                                                            params.selector.getElementsByClassName('ec-composer-reload-html-icon')[0].classList.add('ec-composer-reload-html-active-icon');
                                                            setTimeout(() => {
                                                                params.selector.getElementsByClassName('ec-composer-reload-html-icon')[0].classList.remove('ec-composer-reload-html-active-icon');
                                                                let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                                                if (iframe_template[0] instanceof HTMLIFrameElement) {
                                                                    let idocument = iframe_template[0].contentDocument;
                                                                    if (idocument !== null) {
                                                                        let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                                        if (element_content) {
                                                                            let options = {
                                                                                lines: true,
                                                                                spaces: true
                                                                            };
                                                                            let format_html_code = new Plugins$1.HtmlFormatter();
                                                                            let iframe_html = params.selector.getElementsByClassName('ec-composer-element-html-container');
                                                                            if (iframe_html[0] instanceof HTMLIFrameElement) {
                                                                                let idocument_html = iframe_html[0].contentDocument;
                                                                                if (idocument_html !== null) {
                                                                                    idocument_html.body.innerHTML = `<div class="ec-composer-code-editor" data-type="html">
                                                                                        <div class="ec-composer-code-index"></div>
                                                                                        <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                                                    </div>`;
                                                                                    format_html_code.format(options, element_content.innerHTML)
                                                                                        .then((html) => {
                                                                                        let clines = idocument_html.body.querySelector('.ec-composer-code-lines');
                                                                                        clines.innerHTML = html;
                                                                                        show_index(idocument_html.body);
                                                                                    })
                                                                                        .catch((error) => {
                                                                                        console.error(error);
                                                                                    });
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }, 1000);
                                                        }
                                                    }
                                                }
                                                else {
                                                    show_message(params.words('error_name') + ': ' + response.message);
                                                    setTimeout(() => {
                                                        $this.saving_animation(params, 'error');
                                                    }, 1000);
                                                }
                                                setTimeout(() => {
                                                    $this.saving_animation(params, 'hide');
                                                }, 2000);
                                                let obj_data = response;
                                                if (!obj_data.success) {
                                                    show_message(obj_data.message);
                                                }
                                            });
                                            send_request.catch(error => {
                                                setTimeout(() => {
                                                    $this.saving_animation(params, 'error');
                                                }, 1000);
                                                setTimeout(() => {
                                                    $this.saving_animation(params, 'hide');
                                                }, 2000);
                                                show_message(error);
                                            });
                                        }
                                        else {
                                            let target = (mutation_target.nodeName === '#text') ? mutation_target.parentElement : mutation_target;
                                            let div = target.closest('div');
                                            if (div !== null) {
                                                let html_data;
                                                if ((div.innerHTML.split('ec-composer-template-content').length > 1) && !(mutation_target.classList.contains('ec-hide-content') && mutation_target.classList.contains('ec-composer-template-content-line'))) {
                                                    let lines = html[0].getElementsByClassName('ec-composer-template-content-line');
                                                    let structure = Array.prototype.indexOf.call(lines, div.closest('.ec-composer-template-content-line'));
                                                    if (structure > -1) {
                                                        let content = div.outerHTML;
                                                        content = content.replaceAll('ec-composer-template-editor', '');
                                                        html_data = {
                                                            structure: structure,
                                                            content: remove_buttons(content)
                                                        };
                                                    }
                                                    else {
                                                        let content = target_node.outerHTML;
                                                        content = content.replaceAll('ec-composer-template-editor', '');
                                                        html_data = {
                                                            structure: structure,
                                                            content: remove_buttons(content)
                                                        };
                                                    }
                                                }
                                                else {
                                                    let divs = html[0].getElementsByTagName('div');
                                                    let index = Array.prototype.indexOf.call(divs, div);
                                                    let ready_index = 0;
                                                    for (let i = 0; i < index; i++) {
                                                        if (divs[i].classList.contains('ec-composer-template-content-buttons-group')) {
                                                            continue;
                                                        }
                                                        if (divs[i].classList.contains('ec-composer-element-buttons-group')) {
                                                            continue;
                                                        }
                                                        ready_index++;
                                                    }
                                                    let content = div.innerHTML;
                                                    content = content.replaceAll('ec-composer-template-editor', '');
                                                    html_data = {
                                                        index: ready_index,
                                                        content: ((typeof mutation_target.classList !== 'undefined') && mutation_target.classList.contains('ec-hide-content') && mutation_target.classList.contains('ec-composer-template-content-line')) ? '' : remove_buttons(content)
                                                    };
                                                }
                                                let update = {
                                                    template_id: params.template_id,
                                                    html: html_data
                                                };
                                                let send_request = http_send.put(params.options('api_url') + 'api/create_update', update);
                                                send_request.then((response) => {
                                                    if (response.success) {
                                                        new Classes$1.History().get_history_all(params);
                                                        setTimeout(() => {
                                                            $this.saving_animation(params, 'success');
                                                        }, 1000);
                                                        if (params.selector.getElementsByClassName('ec-composer-editor-mode').length < 1) {
                                                            if (params.selector.getElementsByClassName('ec-composer-container')[0].classList.contains('ec-composer-container-template-and-code')) {
                                                                params.selector.getElementsByClassName('ec-composer-reload-html-icon')[0].classList.add('ec-composer-reload-html-active-icon');
                                                                setTimeout(() => {
                                                                    params.selector.getElementsByClassName('ec-composer-reload-html-icon')[0].classList.remove('ec-composer-reload-html-active-icon');
                                                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                                                        let idocument = iframe_template[0].contentDocument;
                                                                        if (idocument !== null) {
                                                                            let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                                            if (element_content) {
                                                                                let options = {
                                                                                    lines: true,
                                                                                    spaces: true
                                                                                };
                                                                                let format_html_code = new Plugins$1.HtmlFormatter();
                                                                                let iframe_html = params.selector.getElementsByClassName('ec-composer-element-html-container');
                                                                                if (iframe_html[0] instanceof HTMLIFrameElement) {
                                                                                    let idocument_html = iframe_html[0].contentDocument;
                                                                                    if (idocument_html !== null) {
                                                                                        idocument_html.body.innerHTML = `<div class="ec-composer-code-editor" data-type="html">
                                                                                            <div class="ec-composer-code-index"></div>
                                                                                            <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                                                        </div>`;
                                                                                        format_html_code.format(options, element_content.innerHTML)
                                                                                            .then((html) => {
                                                                                            let clines = idocument_html.body.querySelector('.ec-composer-code-lines');
                                                                                            clines.innerHTML = html;
                                                                                            show_index(idocument_html.body);
                                                                                        })
                                                                                            .catch((error) => {
                                                                                            console.error(error);
                                                                                        });
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }, 1000);
                                                            }
                                                        }
                                                    }
                                                    else {
                                                        show_message(params.words('error_name') + ': ' + response.message);
                                                        setTimeout(() => {
                                                            $this.saving_animation(params, 'error');
                                                        }, 1000);
                                                    }
                                                    setTimeout(() => {
                                                        $this.saving_animation(params, 'hide');
                                                    }, 2000);
                                                    let obj_data = response;
                                                    if (!obj_data.success) {
                                                        show_message(obj_data.message);
                                                    }
                                                });
                                                send_request.catch(error => {
                                                    setTimeout(() => {
                                                        $this.saving_animation(params, 'error');
                                                    }, 1000);
                                                    setTimeout(() => {
                                                        $this.saving_animation(params, 'hide');
                                                    }, 2000);
                                                    show_message(error);
                                                });
                                            }
                                        }
                                    });
                                }
                            }
                        });
                        this._observer.observe(target_node, config);
                    }
                }
            }
        }
        async update_default_css(params, content) {
            Classes$1.Timer.schedule_event('update_css', () => {
                let http_send = new Classes$1.Https();
                let $this = this;
                $this.saving_animation(params, 'show');
                let update = {
                    template_id: params.template_id,
                    css: {
                        content: content
                    }
                };
                let send_request = http_send.put(params.options('api_url') + 'api/create_update', update);
                send_request.then((response) => {
                    if (response.success) {
                        new Classes$1.History().get_history_all(params);
                        setTimeout(() => {
                            $this.saving_animation(params, 'success');
                            if ((params.selector.getElementsByClassName('ec-composer-editor-mode').length < 1) && params.selector.getElementsByClassName('ec-composer-container')[0].classList.contains('ec-composer-container-template-and-code')) {
                                params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.add('ec-composer-reload-css-active-icon');
                                setTimeout(() => {
                                    params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.remove('ec-composer-reload-css-active-icon');
                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                        let idocument = iframe_template[0].contentDocument;
                                        if (idocument !== null) {
                                            let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                            if (element_content) {
                                                let element_id = element_content.closest('.ec-element-content-active')?.getAttribute('data-id');
                                                if (typeof element_id === 'string') {
                                                    let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                    if ((typeof element_style !== 'undefined') && element_style) {
                                                        let options = {
                                                            lines: true,
                                                            spaces: true
                                                        };
                                                        let format_css_code = new Plugins$1.CssFormatter();
                                                        format_css_code.format(options, element_style.innerHTML)
                                                            .then((html) => {
                                                            let iframe_css = params.selector.getElementsByClassName('ec-composer-element-css-container');
                                                            if (iframe_css[0] instanceof HTMLIFrameElement) {
                                                                let idocument_css = iframe_css[0].contentDocument;
                                                                if (idocument_css !== null) {
                                                                    idocument_css.body.innerHTML = `<div class="ec-composer-code-editor" data-type="css">
                                                                        <div class="ec-composer-code-index"></div>
                                                                        <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                                    </div>`;
                                                                    let clines = idocument_css.body.querySelector('.ec-composer-code-lines');
                                                                    clines.innerHTML = html;
                                                                    show_index(idocument_css.body);
                                                                }
                                                            }
                                                        })
                                                            .catch((error) => {
                                                            console.error(error);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, 1000);
                            }
                        }, 1000);
                    }
                    else {
                        show_message(params.words('error_name') + ': ' + response.message);
                        setTimeout(() => {
                            $this.saving_animation(params, 'error');
                        }, 1000);
                    }
                    setTimeout(() => {
                        $this.saving_animation(params, 'hide');
                    }, 2000);
                    let obj_data = response;
                    if (!obj_data.success) {
                        show_message(obj_data.message);
                    }
                });
                send_request.catch(error => {
                    setTimeout(() => {
                        $this.saving_animation(params, 'error');
                    }, 1000);
                    setTimeout(() => {
                        $this.saving_animation(params, 'hide');
                    }, 2000);
                    show_message(error);
                });
            });
        }
        async update_css_element_id(element_id, params, content, animation = true) {
            Classes$1.Timer.schedule_event('update_css', () => {
                let http_send = new Classes$1.Https();
                let $this = this;
                if (animation) {
                    $this.saving_animation(params, 'show');
                }
                let update = {
                    template_id: params.template_id,
                    element_id: element_id,
                    css: {
                        content: content
                    }
                };
                let send_request = http_send.put(params.options('api_url') + 'api/create_update', update);
                send_request.then((response) => {
                    if (response.success) {
                        new Classes$1.History().get_history_all(params);
                        setTimeout(() => {
                            if (animation) {
                                $this.saving_animation(params, 'success');
                            }
                            if ((params.selector.getElementsByClassName('ec-composer-editor-mode').length < 1) && params.selector.getElementsByClassName('ec-composer-container')[0].classList.contains('ec-composer-container-template-and-code')) {
                                params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.add('ec-composer-reload-css-active-icon');
                                setTimeout(() => {
                                    params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.remove('ec-composer-reload-css-active-icon');
                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                        let idocument = iframe_template[0].contentDocument;
                                        if (idocument !== null) {
                                            let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                            if (element_content) {
                                                let element_id = element_content.closest('.ec-element-content-active')?.getAttribute('data-id');
                                                if (typeof element_id === 'string') {
                                                    let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                    if ((typeof element_style !== 'undefined') && element_style) {
                                                        let options = {
                                                            lines: true,
                                                            spaces: true
                                                        };
                                                        let format_css_code = new Plugins$1.CssFormatter();
                                                        format_css_code.format(options, element_style.innerHTML)
                                                            .then((html) => {
                                                            let iframe_css = params.selector.getElementsByClassName('ec-composer-element-css-container');
                                                            if (iframe_css[0] instanceof HTMLIFrameElement) {
                                                                let idocument_css = iframe_css[0].contentDocument;
                                                                if (idocument_css !== null) {
                                                                    idocument_css.body.innerHTML = `<div class="ec-composer-code-editor" data-type="css">
                                                                        <div class="ec-composer-code-index"></div>
                                                                        <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                                    </div>`;
                                                                    let clines = idocument_css.body.querySelector('.ec-composer-code-lines');
                                                                    clines.innerHTML = html;
                                                                    show_index(idocument_css.body);
                                                                }
                                                            }
                                                        })
                                                            .catch((error) => {
                                                            console.error(error);
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }, 1000);
                            }
                        }, 1000);
                    }
                    else {
                        show_message(params.words('error_name') + ': ' + response.message);
                        if (animation) {
                            setTimeout(() => {
                                $this.saving_animation(params, 'error');
                            }, 1000);
                        }
                    }
                    if (animation) {
                        setTimeout(() => {
                            $this.saving_animation(params, 'hide');
                        }, 2000);
                    }
                    let obj_data = response;
                    if (!obj_data.success) {
                        show_message(obj_data.message);
                    }
                });
                send_request.catch(error => {
                    if (animation) {
                        setTimeout(() => {
                            $this.saving_animation(params, 'error');
                        }, 1000);
                        setTimeout(() => {
                            $this.saving_animation(params, 'hide');
                        }, 2000);
                    }
                    show_message(error);
                });
            });
        }
        async save_module(params, elements, html) {
            let http_send = new Classes$1.Https();
            let $this = this;
            $this.saving_animation(params, 'show');
            let update = {
                template_id: params.template_id,
                css: {
                    elements: elements
                },
                html: {
                    content: html
                }
            };
            let send_request = http_send.put(params.options('api_url') + 'api/create_update', update);
            send_request.then((response) => {
                if (response.success) {
                    new Classes$1.History().get_history_all(params);
                    setTimeout(() => {
                        $this.saving_animation(params, 'success');
                        if ((params.selector.getElementsByClassName('ec-composer-editor-mode').length < 1) && params.selector.getElementsByClassName('ec-composer-container')[0].classList.contains('ec-composer-container-template-and-code')) {
                            params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.add('ec-composer-reload-css-active-icon');
                            setTimeout(() => {
                                params.selector.getElementsByClassName('ec-composer-reload-css-icon')[0].classList.remove('ec-composer-reload-css-active-icon');
                                let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                if (iframe_template[0] instanceof HTMLIFrameElement) {
                                    let idocument = iframe_template[0].contentDocument;
                                    if (idocument !== null) {
                                        let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                        if (element_content) {
                                            let element_id = element_content.closest('.ec-element-content-active')?.getAttribute('data-id');
                                            if (typeof element_id === 'string') {
                                                let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                if ((typeof element_style !== 'undefined') && element_style) {
                                                    let options = {
                                                        lines: true,
                                                        spaces: true
                                                    };
                                                    let format_css_code = new Plugins$1.CssFormatter();
                                                    format_css_code.format(options, element_style.innerHTML)
                                                        .then((html) => {
                                                        let iframe_css = params.selector.getElementsByClassName('ec-composer-element-css-container');
                                                        if (iframe_css[0] instanceof HTMLIFrameElement) {
                                                            let idocument_css = iframe_css[0].contentDocument;
                                                            if (idocument_css !== null) {
                                                                idocument_css.body.innerHTML = `<div class="ec-composer-code-editor" data-type="css">
                                                                    <div class="ec-composer-code-index"></div>
                                                                    <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                                </div>`;
                                                                let clines = idocument_css.body.querySelector('.ec-composer-code-lines');
                                                                clines.innerHTML = html;
                                                                show_index(idocument_css.body);
                                                            }
                                                        }
                                                    })
                                                        .catch((error) => {
                                                        console.error(error);
                                                    });
                                                }
                                            }
                                        }
                                    }
                                }
                            }, 1000);
                        }
                    }, 1000);
                }
                else {
                    show_message(params.words('error_name') + ': ' + response.message);
                    setTimeout(() => {
                        $this.saving_animation(params, 'error');
                    }, 1000);
                }
                setTimeout(() => {
                    $this.saving_animation(params, 'hide');
                }, 2000);
                let obj_data = response;
                if (!obj_data.success) {
                    show_message(obj_data.message);
                }
            });
            send_request.catch(error => {
                setTimeout(() => {
                    $this.saving_animation(params, 'error');
                }, 1000);
                setTimeout(() => {
                    $this.saving_animation(params, 'hide');
                }, 2000);
                show_message(error);
            });
        }
        saving_animation(params, type) {
            let save_changes_modal = params.selector.getElementsByClassName('ec-composer-save-changes-modal');
            if (save_changes_modal.length > 0) {
                let save_changes_icon = params.selector.getElementsByClassName('ec-composer-save-changes-icon')[0];
                if (type === 'show') {
                    save_changes_modal[0].classList.remove('ec-composer-save-changes-hide-modal');
                    save_changes_modal[0].classList.remove('ec-composer-save-changes-active-modal');
                    save_changes_icon.classList.remove('ec-composer-save-changes-success-icon');
                    save_changes_icon.classList.remove('ec-composer-save-changes-failed-icon');
                    save_changes_icon.classList.add('ec-composer-save-changes-saving-icon');
                    save_changes_modal[0].classList.add('ec-composer-save-changes-active-modal');
                }
                else if (type === 'success') {
                    save_changes_icon.classList.remove('ec-composer-save-changes-saving-icon');
                    save_changes_icon.classList.add('ec-composer-save-changes-success-icon');
                }
                else if (type === 'error') {
                    save_changes_icon.classList.remove('ec-composer-save-changes-saving-icon');
                    save_changes_icon.classList.add('ec-composer-save-changes-failed-icon');
                }
                else if (type === 'hide') {
                    save_changes_modal[0].classList.add('ec-composer-save-changes-hide-modal');
                    setTimeout(() => {
                        save_changes_modal[0].classList.remove('ec-composer-save-changes-hide-modal');
                        save_changes_modal[0].classList.remove('ec-composer-save-changes-active-modal');
                        save_changes_icon.classList.remove('ec-composer-save-changes-success-icon');
                        save_changes_icon.classList.remove('ec-composer-save-changes-failed-icon');
                        save_changes_icon.classList.add('ec-composer-save-changes-saving-icon');
                    }, 300);
                }
            }
        }
    }
    Class.Backup = Backup;
})(Class$6 = Class$6 || (Class$6 = {}));

var Class$5;
(function (Class) {
    class History {
        async get_history_all(params, page = 1, limit = 10) {
            let http_send = new Classes$1.Https();
            let get_history = await http_send.get(params.options('api_url') + 'api/get_history_all/' + params.template_id + '/' + page + '/' + limit);
            if (get_history.success) {
                let data = get_history.data;
                let thistory = data?.length;
                let history = '';
                for (let h = 0; h < thistory; h++) {
                    if (h > 9) {
                        break;
                    }
                    let updates = '';
                    let tupdates = data[h][1].length;
                    for (let u = 0; u < tupdates; u++) {
                        if (u > 3) {
                            break;
                        }
                        let active = (u < 1 && h < 1) ? ' ec-history-record-active' : '';
                        let restore_button = '<button type="button" class="ec-button ec-history-restore-button">'
                            + params.words('restore')
                            + '<div>'
                            + params.icons('backup_restore')
                            + '</div>'
                            + '</button>';
                        if (u < 1 && h < 1) {
                            restore_button = '';
                        }
                        updates += '<li class="ec-history-record' + active + '">'
                            + '<div class="ec-grid" data-time="' + data[h][1][u] + '">'
                            + '<div class="ec-grid-column-7">'
                            + '<span>'
                            + get_time(params, data[h][1][u])
                            + '</span>'
                            + '</div>'
                            + '<div class="ec-grid-column-5">'
                            + restore_button
                            + '</div>'
                            + '</div>'
                            + '</li>';
                    }
                    let load_more = '';
                    if (tupdates > 4) {
                        load_more = '<li class="ec-history-navigation">'
                            + '<div class="ec-loading-navigation-button">'
                            + '<a href="#" data-page="4">'
                            + params.icons('south')
                            + params.words('load_more')
                            + '</a>'
                            + '</div>'
                            + '</li>';
                    }
                    history += '<div class="ec-block ec-history-component" data-history="' + data[h][1][0] + '">'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<div class="ec-history-records">'
                        + '<h3 class="ec-history-title">'
                        + '<span>'
                        + get_date(params, data[h][1][0])
                        + '</span>'
                        + '</h3>'
                        + '<ul class="ec-history-records-preview">'
                        + updates
                        + load_more
                        + '</ul>'
                        + '</div>'
                        + '</div>'
                        + '</div>';
                }
                setTimeout(() => {
                    let section_footer = params.selector.getElementsByClassName('ec-section-history')[0].getElementsByClassName('ec-section-footer')[0];
                    let pagination_button = section_footer.getElementsByClassName('ec-loading-button')[0];
                    section_footer.getElementsByTagName('a')[0].classList.remove('ec-load-more-active');
                    if (thistory > 10) {
                        pagination_button.style.display = 'block';
                        section_footer.getElementsByTagName('a')[0].setAttribute('data-page', (page + 1).toString());
                    }
                    else {
                        pagination_button.style.display = 'none';
                    }
                    if (page > 1) {
                        params.selector.getElementsByClassName('ec-section-history')[0].getElementsByClassName('ec-section-body')[0].innerHTML += history;
                    }
                    else {
                        params.selector.getElementsByClassName('ec-section-history')[0].getElementsByClassName('ec-section-body')[0].innerHTML = history;
                    }
                }, 1000);
            }
            else {
                show_message(params.words('error_name') + ': ' + get_history.message);
            }
        }
        async get_history_by_date(params, date, page = 0, limit = 4) {
            let http_send = new Classes$1.Https();
            let get_history = await http_send.get(params.options('api_url') + 'api/get_history_by_date/' + params.template_id + '/' + date + '/' + page + '/' + limit);
            if (get_history.success) {
                let data = get_history.data;
                let updates = '';
                let tupdates = data.length;
                for (let u = 0; u < tupdates; u++) {
                    if (u > 3) {
                        break;
                    }
                    updates += '<li class="ec-history-record">'
                        + '<div class="ec-grid" data-time="' + data[u] + '">'
                        + '<div class="ec-grid-column-7">'
                        + '<span>'
                        + get_time(params, data[u])
                        + '</span>'
                        + '</div>'
                        + '<div class="ec-grid-column-5">'
                        + '<button type="button" class="ec-button ec-history-restore-button">'
                        + params.words('restore')
                        + '<div>'
                        + params.icons('backup_restore')
                        + '</div>'
                        + '</button>'
                        + '</div>'
                        + '</div>'
                        + '</li>';
                }
                if (tupdates > 4) {
                    params.selector.querySelector('.ec-section-history .ec-history-component[data-history="' + date + '"] .ec-history-navigation a').setAttribute('data-page', (page + 4).toString());
                }
                else {
                    let pagination = params.selector.querySelector('.ec-section-history .ec-history-component[data-history="' + date + '"] .ec-history-navigation');
                    if (pagination !== null) {
                        pagination.style.display = 'none';
                    }
                }
                params.selector.querySelector('.ec-section-history .ec-history-component[data-history="' + date + '"] .ec-history-navigation').insertAdjacentHTML('beforebegin', updates);
            }
            else {
                show_message(params.words('error_name') + ': ' + get_history.message);
            }
        }
        async get_history_recent(params, iframe) {
            let http_send = new Classes$1.Https();
            let get_history = await http_send.get(params.options('api_url') + 'api/get_history_recent/' + params.template_id);
            if (get_history.success) {
                if (typeof get_history.data !== 'undefined') {
                    let content = get_history.data;
                    let itemplate = params.selector.getElementsByClassName(iframe)[0];
                    let idocument = itemplate.contentDocument;
                    if (typeof content.name !== 'undefined') {
                        params.selector.getElementsByClassName('ec-composer-name-text')[0].textContent = content.name;
                    }
                    if ((typeof content.html !== 'undefined') && (idocument !== null)) {
                        let body = idocument.body;
                        if (content.html === '<div class="ec-composer-template"></div>') {
                            content.html = `<div class="ec-composer-template">
                                <div class="ec-composer-template-content-line">
                                    <table class="ec-composer-template-content">
                                        <tbody>
                                            <tr>
                                                <td>
                                                    <table class="ec-composer-template-row">
                                                        <tbody>
                                                            <tr>
                                                                <td>
                                                                    <div class="ec-composer-template-cell"></div>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>`;
                        }
                        body.innerHTML = '';
                        body.innerHTML = content.html.replaceAll('<div class="ec-composer-template-cell"></div>', '<div class="ec-composer-template-cell">' + get_placeholder() + '</div>');
                        if (body.getElementsByClassName('ec-composer-template').length > 0) {
                            let template = body.getElementsByClassName('ec-composer-template')[0];
                            template.classList.add('ec-composer-template-editor');
                            template.style.cssText = `
                                transform: scaleY(0);
                            `;
                            setTimeout(() => {
                                template.style.cssText = `
                                    transform: scaleY(1);
                                    transform-origin: top !important;
                                `;
                            }, 300);
                        }
                        let structure_buttons = get_structure_buttons();
                        let structures = body.getElementsByClassName('ec-composer-template-content-line');
                        if (structures.length > 0) {
                            Array.from(structures).map((structure) => {
                                structure.insertAdjacentHTML('afterbegin', structure_buttons);
                            });
                        }
                        let elements_buttons = get_element_buttons();
                        let elements = body.getElementsByClassName('ec-element-content');
                        if (elements.length > 0) {
                            Array.from(elements).map((element) => {
                                element.insertAdjacentHTML('beforeend', elements_buttons);
                            });
                        }
                        let texts = body.querySelectorAll('.ec-element-content[data-name="text"]');
                        if (texts.length > 0) {
                            Array.from(texts).map((text) => {
                                text.getElementsByClassName('ec-element-content-data')[0].setAttribute('contenteditable', 'true');
                            });
                        }
                        new Classes$1.Backup().save_html_update(params);
                    }
                    let elements_id = [];
                    if ((typeof content.css !== 'undefined') && (idocument !== null)) {
                        if ((typeof content.css.elements !== 'undefined') && (content.css.elements.length > 0)) {
                            let elements_styles = '';
                            for (let element of content.css.elements) {
                                elements_id.push(element.element_id);
                                let style = document.createElement('style');
                                style.setAttribute('data-element', element.element_id);
                                let css_style = '';
                                css_style += element.content;
                                style.innerHTML = css_style;
                                elements_styles += style.outerHTML;
                            }
                            idocument.head.innerHTML += elements_styles;
                        }
                        if ((typeof content.css.content !== 'undefined') && content.css.content) {
                            if (idocument.head.querySelector('style[data-scope="default"]')) {
                                idocument.head.querySelector('style[data-scope="default"]').innerHTML = content.css.content;
                                let properties_list = {};
                                let default_styles = idocument.head.querySelector('style[data-scope="default"]');
                                if ((typeof default_styles !== 'undefined') && default_styles) {
                                    let sheet = default_styles.sheet;
                                    if (sheet !== null) {
                                        if (sheet.cssRules.length > 0) {
                                            for (let rule of sheet.cssRules) {
                                                if (typeof rule.media === 'undefined') {
                                                    let style = rule.style;
                                                    for (let property of rule.style) {
                                                        if (typeof properties_list[rule.selectorText] !== 'undefined') {
                                                            properties_list[rule.selectorText][property] = style.getPropertyValue(property);
                                                        }
                                                        else {
                                                            properties_list[rule.selectorText] = {
                                                                [property]: style.getPropertyValue(property)
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                if (typeof properties_list['.ec-composer-template'] !== 'undefined') {
                                    if (typeof properties_list['.ec-composer-template']['background-color'] !== 'undefined') {
                                        params.selector.getElementsByClassName('ec-composer-container')[0].style.backgroundColor = properties_list['.ec-composer-template']['background-color'];
                                        if (params.selector.getElementsByClassName('ec-composer-preview')[0].classList.contains('ec-composer-preview-show')) {
                                            let background = properties_list['.ec-composer-template']['background-color'];
                                            if (background === 'transparent') {
                                                background = '#7a7a7b';
                                            }
                                            params.selector.getElementsByClassName('ec-composer-preview')[0].style.backgroundColor = background;
                                        }
                                    }
                                }
                            }
                        }
                        else {
                            idocument.head.querySelector('style[data-scope="default"]').innerHTML = get_styles('default');
                            let background = '#7a7a7b';
                            params.selector.getElementsByClassName('ec-composer-container')[0].style.backgroundColor = background;
                            params.selector.getElementsByClassName('ec-composer-preview')[0].style.backgroundColor = background;
                        }
                    }
                    new Classes$1.Styles().create_styles(params, iframe, elements_id);
                }
            }
            else {
                show_message(params.words('error_name') + ': ' + get_history.message);
            }
        }
        async restore_history_record(params, time) {
            let http_send = new Classes$1.Https();
            let get_history = await http_send.get(params.options('api_url') + 'api/restore_history_record/' + params.template_id + '/' + time);
            if (get_history.success) {
                params.selector.getElementsByClassName('ec-history-restore-active-button')[0].classList.remove('ec-history-restore-active-button');
                this.get_history_recent(params, 'ec-composer-template-container');
                new Classes$1.History().get_history_all(params);
            }
            else {
                params.selector.getElementsByClassName('ec-history-restore-active-button')[0].classList.remove('ec-history-restore-active-button');
                show_message(params.words('error_name') + ': ' + get_history.message);
            }
        }
    }
    Class.History = History;
})(Class$5 = Class$5 || (Class$5 = {}));

var Resources$f;
(function (Resources) {
    (function (Options) {
        class Color extends Abstracts.Options {
            prepare_template(params, option) {
                let value = (typeof option.value === 'string') ? option.value : '#FFFFFF';
                if (typeof option.custom === 'string') {
                    let color = new Plugins$1.Color();
                    let is_valid = option.custom.match(/rgba?\((\d+), (\d+), (\d+)(?:, ([\d.]+))?\)/);
                    if (is_valid) {
                        let [, r, g, b, a] = is_valid.map(Number);
                        let hex = color.convert_rgb_to_hex(r, g, b, a || 1);
                        if (hex) {
                            value = hex;
                        }
                    }
                }
                let element = (option.element !== '') ? ' data-element="' + option.element + '"' : '';
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-button-color"' + element + '>'
                        + '<button type="button" style="--bgcolor: ' + value + ';" data-color="' + value + '"></button>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    property[option.name] = option.value;
                    return property;
                }
            }
            get_events = (params) => {
                return [{
                        action: 'mousedown',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-button-color') && target.closest('.ec-composer-options-list') && !target.closest('.ec-option-social')) {
                                    e.preventDefault();
                                    new Plugins$1.Color().add_color_box(e, params);
                                    if (target.closest('.ec-composer-element-options') && target.closest('.ec-composer-element-options')) {
                                        let element_id = target.closest('.ec-composer-element-options').getAttribute('data-element');
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let elements = iframeDocument.getElementsByClassName('ec-element-content-active');
                                                if (elements.length > 0) {
                                                    setTimeout(() => {
                                                        Classes$1.Observer.monitor_element('option_color', target, { attributes: true }, (mutations) => {
                                                            for (let mutation of mutations) {
                                                                if (mutation.attributeName === 'data-color') {
                                                                    let mutation_target = (mutation.target.nodeName === '#text') ? mutation.target.parentElement : mutation.target;
                                                                    let device = mutation_target.closest('.ec-sections').getAttribute('data-scope');
                                                                    let option_name = mutation_target?.closest('li')?.getAttribute('data-option');
                                                                    let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                                                    if (option_name) {
                                                                        let property = this.get_property(Resources.Options.Color.saved_options[option_name + '_' + element_name]);
                                                                        let color = target.getAttribute('data-color');
                                                                        let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                                        if (style !== null) {
                                                                            let sheet = style.sheet;
                                                                            let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                            let element_name = target.closest('.ec-button-color').getAttribute('data-element') ? target.closest('.ec-button-color').getAttribute('data-element') : '';
                                                                            let style_content = update_property_value(sheet, element_id, element_name, property_name, color, device);
                                                                            style.innerHTML = style_content;
                                                                            let backup = new Classes$1.Backup();
                                                                            backup.update_css_element_id(element_id, this.params, style_content);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        });
                                                    }, 300);
                                                }
                                            }
                                        }
                                    }
                                    else if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]')) {
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                setTimeout(() => {
                                                    Classes$1.Observer.monitor_element('option_color', target, { attributes: true }, (mutations) => {
                                                        for (let mutation of mutations) {
                                                            if (mutation.attributeName === 'data-color') {
                                                                let mutation_target = (mutation.target.nodeName === '#text') ? mutation.target.parentElement : mutation.target;
                                                                let device = mutation_target.closest('.ec-sections').getAttribute('data-scope');
                                                                let option_name = mutation_target?.closest('li')?.getAttribute('data-option');
                                                                let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                                                if (option_name) {
                                                                    let property = this.get_property(Resources.Options.Color.saved_options[option_name + '_' + element_name]);
                                                                    let color = target.getAttribute('data-color');
                                                                    let style = iframeDocument.head.querySelector('style[data-scope="default"]');
                                                                    if (style !== null) {
                                                                        let sheet = style.sheet;
                                                                        let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                        let style_content = update_property_value(sheet, '', element_name, property_name, color, device);
                                                                        style.innerHTML = style_content;
                                                                        if (element_name === '.ec-composer-template') {
                                                                            params.selector.getElementsByClassName('ec-composer-container')[0].style.backgroundColor = color;
                                                                        }
                                                                        let backup = new Classes$1.Backup();
                                                                        backup.update_default_css(this.params, style_content);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    });
                                                }, 300);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Color = Color;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$f = Resources$f || (Resources$f = {}));

var Resources$e;
(function (Resources) {
    (function (Options) {
        class Number extends Abstracts.Options {
            prepare_template(params, option) {
                let value = ((typeof option.value === 'string') || (typeof option.value === 'number')) ? option.value : 0;
                let unit = ((typeof option.unit === 'string') || (typeof option.unit === 'number')) ? ' ' + params.words('unit') + ': ' + option.unit : '';
                if (typeof option.custom === 'string') {
                    if (option.custom.replace(/[\D]+/g, "") !== '') {
                        value = option.custom.replace(/[\D]+/g, "");
                        if (option.custom.replace(value, '')) {
                            unit = ' ' + params.words('unit') + ': ' + option.custom.replace(value, '');
                        }
                    }
                }
                let unique_id = Math.random();
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + unit
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-input-buttons-group">'
                        + '<button type="button" class="ec-option-input-button-decrease">'
                        + params.icons('remove')
                        + '</button>'
                        + '<input type="number" value="' + value + '" id="ec-composer-number-' + unique_id + '-input">'
                        + '<button type="button" class="ec-option-input-button-increase">'
                        + params.icons('add')
                        + '</button>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    let unit = (typeof option.unit !== 'undefined') ? option.unit : '';
                    property[option.name] = option.value + unit;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-composer-element-options') && target.closest('.ec-option-input-buttons-group') && (target.getAttribute('type') === 'number')) {
                                    let buttons_group = target.closest('.ec-option-input-buttons-group');
                                    let input = buttons_group?.getElementsByTagName('input');
                                    if (input !== undefined) {
                                        let value = input[0].value;
                                        if (value !== undefined) {
                                            let option_name = buttons_group?.closest('li')?.getAttribute('data-option');
                                            let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                            if (option_name) {
                                                let device = buttons_group?.closest('.ec-sections').getAttribute('data-scope');
                                                let property = this.get_property(Resources.Options.Number.saved_options[option_name + '_' + element_name]);
                                                if ((typeof Resources.Options.Number.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                    let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                                    let anumber = parseInt(value);
                                                    let aunit = value.replace(anumber.toString(), '') ? value.replace(anumber.toString(), '') : Resources.Options.Number.saved_options[option_name + '_' + element_name].unit;
                                                    if (element_id) {
                                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                        if (iframe) {
                                                            let iframeDocument = iframe.contentDocument;
                                                            if (iframeDocument !== null) {
                                                                let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                                if (style !== null) {
                                                                    let sheet = style.sheet;
                                                                    let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                    let style_content = update_property_value(sheet, element_id, element_name, property_name, anumber + aunit, device);
                                                                    style.innerHTML = style_content;
                                                                    let backup = new Classes$1.Backup();
                                                                    backup.update_css_element_id(element_id, this.params, style_content);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]')) {
                                    let buttons_group = target.closest('.ec-option-input-buttons-group');
                                    let input = buttons_group?.getElementsByTagName('input');
                                    if (input !== undefined) {
                                        let value = input[0].value;
                                        if (value !== undefined) {
                                            let option_name = buttons_group?.closest('li')?.getAttribute('data-option');
                                            let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                            if (option_name) {
                                                let device = '';
                                                let property = this.get_property(Resources.Options.Number.saved_options[option_name + '_' + element_name]);
                                                if ((typeof Resources.Options.Number.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                    let anumber = parseInt(value);
                                                    let aunit = value.replace(anumber.toString(), '') ? value.replace(anumber.toString(), '') : Resources.Options.Number.saved_options[option_name + '_' + element_name].unit;
                                                    if (target.classList.contains('ec-option-input-button-increase')) {
                                                        let new_value = anumber;
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    else {
                                                        let new_value = anumber;
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                    if (iframe) {
                                                        let iframeDocument = iframe.contentDocument;
                                                        if (iframeDocument !== null) {
                                                            let style = iframeDocument.head.querySelector('style[data-scope="default"]');
                                                            if (style !== null) {
                                                                let sheet = style.sheet;
                                                                let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                let style_content = update_property_value(sheet, '', element_name, property_name, anumber + aunit, device);
                                                                style.innerHTML = style_content;
                                                                let backup = new Classes$1.Backup();
                                                                backup.update_default_css(this.params, style_content);
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-composer-element-options') && target.closest('.ec-option-input-buttons-group') && (target.nodeName === 'BUTTON')) {
                                    let buttons_group = target.closest('.ec-option-input-buttons-group');
                                    let input = buttons_group?.getElementsByTagName('input');
                                    if (input !== undefined) {
                                        let value = input[0].value;
                                        if (value !== undefined) {
                                            let option_name = buttons_group?.closest('li')?.getAttribute('data-option');
                                            let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                            if (option_name) {
                                                let device = buttons_group?.closest('.ec-sections').getAttribute('data-scope');
                                                let property = this.get_property(Resources.Options.Number.saved_options[option_name + '_' + element_name]);
                                                if ((typeof Resources.Options.Number.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                    let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                                    let anumber = parseInt(value);
                                                    let aunit = value.replace(anumber.toString(), '') ? value.replace(anumber.toString(), '') : Resources.Options.Number.saved_options[option_name + '_' + element_name].unit;
                                                    if (target.classList.contains('ec-option-input-button-increase')) {
                                                        let new_value = anumber = (anumber + 1);
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    else {
                                                        let new_value = anumber = (anumber - 1);
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    if (element_id) {
                                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                        if (iframe) {
                                                            let iframeDocument = iframe.contentDocument;
                                                            if (iframeDocument !== null) {
                                                                let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                                if (style !== null) {
                                                                    let sheet = style.sheet;
                                                                    let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                    let style_content = update_property_value(sheet, element_id, element_name, property_name, anumber + aunit, device);
                                                                    style.innerHTML = style_content;
                                                                    let backup = new Classes$1.Backup();
                                                                    backup.update_css_element_id(element_id, this.params, style_content);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]') && (target.nodeName === 'BUTTON')) {
                                    let buttons_group = target.closest('.ec-option-input-buttons-group');
                                    let input = buttons_group?.getElementsByTagName('input');
                                    if (input !== undefined) {
                                        let value = input[0].value;
                                        if (value !== undefined) {
                                            let option_name = buttons_group?.closest('li')?.getAttribute('data-option');
                                            let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                            if (option_name) {
                                                let device = '';
                                                let property = this.get_property(Resources.Options.Number.saved_options[option_name + '_' + element_name]);
                                                if ((typeof Resources.Options.Number.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                    let anumber = parseInt(value);
                                                    let aunit = value.replace(anumber.toString(), '') ? value.replace(anumber.toString(), '') : Resources.Options.Number.saved_options[option_name + '_' + element_name].unit;
                                                    if (target.classList.contains('ec-option-input-button-increase')) {
                                                        let new_value = anumber = (anumber + 1);
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    else {
                                                        let new_value = anumber = (anumber - 1);
                                                        Resources.Options.Number.saved_options[option_name + '_' + element_name].value = new_value;
                                                        input[0].value = new_value.toString();
                                                    }
                                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                    if (iframe) {
                                                        let iframeDocument = iframe.contentDocument;
                                                        if (iframeDocument !== null) {
                                                            let style = iframeDocument.head.querySelector('style[data-scope="default"]');
                                                            if (style !== null) {
                                                                let sheet = style.sheet;
                                                                let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                let style_content = update_property_value(sheet, '', element_name, property_name, anumber + aunit, device);
                                                                style.innerHTML = style_content;
                                                                let backup = new Classes$1.Backup();
                                                                backup.update_default_css(this.params, style_content);
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Number = Number;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$e = Resources$e || (Resources$e = {}));

var Resources$d;
(function (Resources) {
    (function (Options) {
        class Selector extends Abstracts.Options {
            prepare_template(params, option) {
                let items = '<ul class="ec-option-selector-items">';
                if (option.items.length > 0) {
                    for (let item of option.items) {
                        items += '<li>'
                            + '<a href="#" data-item="' + item.item_id + '">'
                            + item.item_name
                            + '</a>'
                            + '</li>';
                    }
                }
                items += '</ul>';
                let value = option.value;
                if (typeof option.custom === 'string') {
                    value = option.custom;
                }
                let selector = '<div class="ec-option-selector-dropdown">'
                    + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
                    + '<span>'
                    + value
                    + '</span>'
                    + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                    + '</button>'
                    + '<div class="ec-option-selector-menu">'
                    + items
                    + '</div>'
                    + '</div>';
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-selector">'
                        + selector
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    property[option.name] = option.value;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target.closest('.ec-option-selector-items')) {
                                e.preventDefault();
                                let selected = target.textContent;
                                let item_id = target.getAttribute('data-item');
                                if (selected && item_id) {
                                    target.closest('.ec-option-selector-dropdown').querySelector('.ec-button > span:first-child').textContent = selected;
                                    let option_name = target.closest('.ec-display-flex')?.getAttribute('data-option');
                                    let element_name = target.closest('.ec-display-flex')?.getAttribute('data-element') ? target.closest('.ec-display-flex')?.getAttribute('data-element') : '';
                                    if (option_name) {
                                        let device = target.closest('.ec-sections').getAttribute('data-scope');
                                        let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                        if (element_id) {
                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                            if (iframe) {
                                                let iframeDocument = iframe.contentDocument;
                                                if (iframeDocument !== null) {
                                                    let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                    if (style !== null) {
                                                        let sheet = style.sheet;
                                                        let property = this.get_property(Resources.Options.Selector.saved_options[option_name + '_' + element_name]);
                                                        let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                        let style_content = update_property_value(sheet, element_id, element_name, property_name, item_id, device);
                                                        style.innerHTML = style_content;
                                                        let backup = new Classes$1.Backup();
                                                        backup.update_css_element_id(element_id, this.params, style_content);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Selector = Selector;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$d = Resources$d || (Resources$d = {}));

var Resources$c;
(function (Resources) {
    (function (Options) {
        class Font extends Abstracts.Options {
            prepare_template(params, option) {
                let font_family = params.words('font_family');
                if (typeof option.custom === 'string') {
                    let fonts_list = Object.values(fonts);
                    let font = fonts_list.find(item => item.property.replaceAll('"', '').replaceAll("'", '') === option.custom.replaceAll('"', '').replaceAll("'", ''));
                    if (typeof font !== 'undefined') {
                        font_family = font.name;
                        setTimeout(() => {
                            let font_weight = params.selector.querySelector('.ec-composer-options-list li[data-option="font_weight"]');
                            if (font_weight) {
                                let items = '';
                                for (let weight of font.weight) {
                                    items += '<li>'
                                        + '<a href="#" data-item="' + weight + '">'
                                        + weight
                                        + '</a>'
                                        + '</li>';
                                }
                                font_weight.getElementsByClassName('ec-option-selector-items')[0].innerHTML = items;
                            }
                        }, 300);
                    }
                }
                else if (option.value !== '') {
                    let fonts_list = Object.values(fonts);
                    let font = fonts_list.find(item => item.slug === option.value);
                    if (typeof font !== 'undefined') {
                        font_family = font.name;
                    }
                }
                let selector = '<div class="ec-option-selector-dropdown">'
                    + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
                    + '<span>'
                    + font_family
                    + '</span>'
                    + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                    + '</button>'
                    + '<div class="ec-option-selector-menu">'
                    + get_all_fonts()
                    + '</div>'
                    + '</div>';
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-selector">'
                        + selector
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    let font_family = '';
                    if (option.value !== '') {
                        let fonts_list = Object.values(fonts);
                        let font = fonts_list.find(item => item.slug === option.value);
                        if (typeof font.name !== 'undefined') {
                            font_family = font.property;
                        }
                    }
                    property[option.name] = font_family;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target.closest('.ec-option-selector-dropdown') && target.classList.contains('ec-button')) {
                                e.preventDefault();
                                let dropdown = target.closest('.ec-option-selector-dropdown');
                                if (dropdown) {
                                    setTimeout(() => {
                                        dropdown?.classList.add('ec-option-selector-dropdown-show');
                                    }, 100);
                                }
                            }
                            else if (target.closest('.ec-option-selector-menu') && target.closest('.ec-fonts')) {
                                e.preventDefault();
                                let selected = target.textContent;
                                if (selected) {
                                    target.closest('.ec-option-selector-dropdown').querySelector('.ec-button > span:first-child').textContent = selected;
                                    let selected_font = target.getAttribute('data-font');
                                    let fonts_list = Object.values(fonts);
                                    let font = fonts_list.find(item => item.slug === selected_font);
                                    let option_name = target.closest('.ec-display-flex')?.getAttribute('data-option');
                                    let element_name = target.closest('.ec-display-flex')?.getAttribute('data-element') ? target.closest('.ec-display-flex')?.getAttribute('data-element') : '';
                                    if ((typeof font !== 'undefined') && option_name) {
                                        let device = target.closest('.ec-sections').getAttribute('data-scope');
                                        let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                        if (element_id) {
                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                            if (iframe) {
                                                let iframeDocument = iframe.contentDocument;
                                                if (iframeDocument !== null) {
                                                    let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                    if (style !== null) {
                                                        let sheet = style.sheet;
                                                        let property = this.get_property(Resources.Options.Font.saved_options[option_name + '_' + element_name]);
                                                        let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                        let style_content = update_property_value(sheet, element_id, element_name, property_name, font.property, device);
                                                        style.innerHTML = style_content;
                                                        let backup = new Classes$1.Backup();
                                                        backup.update_css_element_id(element_id, this.params, style_content);
                                                        let font_weight = target.closest('.ec-composer-options-list').querySelector('li[data-option="font_weight"]');
                                                        if (font_weight) {
                                                            let items = '';
                                                            for (let weight of font.weight) {
                                                                items += '<li>'
                                                                    + '<a href="#" data-item="' + weight + '">'
                                                                    + weight
                                                                    + '</a>'
                                                                    + '</li>';
                                                            }
                                                            font_weight.getElementsByClassName('ec-option-selector-items')[0].innerHTML = items;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Font = Font;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$c = Resources$c || (Resources$c = {}));

var Resources$b;
(function (Resources) {
    (function (Options) {
        class Align extends Abstracts.Options {
            prepare_template(params, option) {
                let left = (option.value === 'left') ? ' ec-option-align-active-button' : '';
                let center = (option.value === 'center') ? ' ec-option-align-active-button' : '';
                let right = (option.value === 'right') ? ' ec-option-align-active-button' : '';
                let justify = (option.value === 'justify') ? ' ec-option-align-active-button' : '';
                if (typeof option.custom === 'string') {
                    left = (option.custom === 'left') ? ' ec-option-align-active-button' : '';
                    center = (option.custom === 'center') ? ' ec-option-align-active-button' : '';
                    right = (option.custom === 'right') ? ' ec-option-align-active-button' : '';
                    justify = (option.custom === 'justify') ? ' ec-option-align-active-button' : '';
                }
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-align">'
                        + '<button type="button" class="ec-button ec-option-align-button' + left + '" data-direction="left">'
                        + params.icons('format_align_left')
                        + '</button>'
                        + '<button type="button" class="ec-button ec-option-align-button' + center + '" data-direction="center">'
                        + params.icons('format_align_center')
                        + '</button>'
                        + '<button type="button" class="ec-button ec-option-align-button' + right + '" data-direction="right">'
                        + params.icons('format_align_right')
                        + '</button>'
                        + '<button type="button" class="ec-button ec-option-align-button' + justify + '" data-direction="justify">'
                        + params.icons('format_align_justify')
                        + '</button>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    property[option.name] = option.value;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-align')) {
                                    target.closest('.ec-option-align').getElementsByClassName('ec-option-align-active-button')[0].classList.remove('ec-option-align-active-button');
                                    target.classList.add('ec-option-align-active-button');
                                    let option_name = target.closest('li')?.getAttribute('data-option');
                                    let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                    if (option_name) {
                                        let device = target.closest('.ec-sections').getAttribute('data-scope');
                                        let property = this.get_property(Resources.Options.Align.saved_options[option_name + '_' + element_name]);
                                        if ((typeof Resources.Options.Align.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                            let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                            if (element_id) {
                                                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                if (iframe) {
                                                    let iframeDocument = iframe.contentDocument;
                                                    if (iframeDocument !== null) {
                                                        let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                        if (style !== null) {
                                                            let sheet = style.sheet;
                                                            let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                            let style_content = update_property_value(sheet, element_id, element_name, property_name, target.getAttribute('data-direction'), device);
                                                            style.innerHTML = style_content;
                                                            let backup = new Classes$1.Backup();
                                                            backup.update_css_element_id(element_id, this.params, style_content);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Align = Align;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$b = Resources$b || (Resources$b = {}));

var Resources$a;
(function (Resources) {
    (function (Options) {
        class Position extends Abstracts.Options {
            prepare_template(params, option) {
                option.value = option.value.replace('start', 'left').replace('end', 'right');
                let left = (option.value === 'left') ? ' ec-option-position-active-button' : '';
                let center = (option.value === 'center') ? ' ec-option-position-active-button' : '';
                let right = (option.value === 'right') ? ' ec-option-position-active-button' : '';
                if (typeof option.custom === 'string') {
                    option.custom = option.custom.replace('start', 'left').replace('end', 'right');
                    left = (option.custom === 'left') ? ' ec-option-position-active-button' : '';
                    center = (option.custom === 'center') ? ' ec-option-position-active-button' : '';
                    right = (option.custom === 'right') ? ' ec-option-position-active-button' : '';
                }
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-position">'
                        + '<button type="button" class="ec-button ec-option-position-button' + left + '" data-direction="left">'
                        + params.icons('align_justify_flex_start')
                        + '</button>'
                        + '<button type="button" class="ec-button ec-option-position-button' + center + '" data-direction="center">'
                        + params.icons('align_justify_center')
                        + '</button>'
                        + '<button type="button" class="ec-button ec-option-position-button' + right + '" data-direction="right">'
                        + params.icons('align_justify_flex_end')
                        + '</button>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    property[option.name] = option.value;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-position')) {
                                    target.closest('.ec-option-position').getElementsByClassName('ec-option-position-active-button')[0].classList.remove('ec-option-position-active-button');
                                    target.classList.add('ec-option-position-active-button');
                                    let option_name = target.closest('li')?.getAttribute('data-option');
                                    let element_name = target.closest('li')?.getAttribute('data-element') ? target.closest('li')?.getAttribute('data-element') : '';
                                    if (option_name) {
                                        if (target.closest('.ec-composer-element-options')) {
                                            let device = target.closest('.ec-sections').getAttribute('data-scope');
                                            let property = this.get_property(Resources.Options.Position.saved_options[option_name + '_' + element_name]);
                                            if ((typeof Resources.Options.Position.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                                if (element_id) {
                                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                    if (iframe) {
                                                        let iframeDocument = iframe.contentDocument;
                                                        if (iframeDocument !== null) {
                                                            let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                            if (style !== null) {
                                                                let sheet = style.sheet;
                                                                let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                                let style_content = update_property_value(sheet, element_id, element_name, property_name, target.getAttribute('data-direction'), device);
                                                                style.innerHTML = style_content;
                                                                let backup = new Classes$1.Backup();
                                                                backup.update_css_element_id(element_id, this.params, style_content);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                            }
                                        }
                                        else if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]')) {
                                            let property = this.get_property(Resources.Options.Position.saved_options[option_name + '_' + element_name]);
                                            if ((typeof Resources.Options.Position.saved_options[option_name + '_' + element_name] !== 'undefined') && (property !== undefined) && (property !== null)) {
                                                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                if (iframe) {
                                                    let iframeDocument = iframe.contentDocument;
                                                    if (iframeDocument !== null) {
                                                        let style = iframeDocument.head.querySelector('style[data-scope="default"]');
                                                        if (style !== null) {
                                                            let sheet = style.sheet;
                                                            let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                            let style_content = update_property_value(sheet, '', element_name, property_name, target.getAttribute('data-direction'), '');
                                                            style.innerHTML = style_content;
                                                            let backup = new Classes$1.Backup();
                                                            backup.update_default_css(this.params, style_content);
                                                            iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.remove('ec-composer-template-left');
                                                            iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.remove('ec-composer-template-center');
                                                            iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.remove('ec-composer-template-right');
                                                            if (target.getAttribute('data-direction') === 'left') {
                                                                iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.add('ec-composer-template-left');
                                                            }
                                                            else if (target.getAttribute('data-direction') === 'center') {
                                                                iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.add('ec-composer-template-center');
                                                            }
                                                            else if (target.getAttribute('data-direction') === 'right') {
                                                                iframeDocument.getElementsByClassName('ec-composer-template')[0].classList.add('ec-composer-template-right');
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Position = Position;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$a = Resources$a || (Resources$a = {}));

var Resources$9;
(function (Resources) {
    (function (Options) {
        class Text extends Abstracts.Options {
            prepare_template(params, option) {
                let value = option.value;
                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                if (iframe) {
                    let iframeDocument = iframe.contentDocument;
                    if (iframeDocument !== null) {
                        if (option.element) {
                            let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ' + option.element);
                            if (element) {
                                value = element.textContent;
                            }
                        }
                        else {
                            let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                            if (element) {
                                value = element.textContent;
                            }
                        }
                    }
                }
                let unique_id = Math.random();
                let element = (option.element !== '') ? ' data-element="' + option.element + '"' : '';
                return {
                    template: '<div class="ec-w-100">'
                        + '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-text"' + element + '>'
                        + '<input type="text" value="' + value + '" id="ec-option-text-' + unique_id + '-input">'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = () => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-text')) {
                                    let option_text = target.closest('.ec-option-text');
                                    let input = option_text?.getElementsByTagName('input');
                                    if (input !== undefined) {
                                        let value = input[0].value;
                                        if (value !== undefined) {
                                            let option_name = option_text?.closest('li')?.getAttribute('data-option');
                                            if (option_name) {
                                                let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                                if (element_id) {
                                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                    if (iframe) {
                                                        let iframeDocument = iframe.contentDocument;
                                                        if (iframeDocument !== null) {
                                                            let element_name = target.closest('.ec-option-text').getAttribute('data-element') ? target.closest('.ec-option-text').getAttribute('data-element') : '';
                                                            if (element_name) {
                                                                let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ' + element_name);
                                                                if (element) {
                                                                    element.textContent = target.value;
                                                                }
                                                            }
                                                            else {
                                                                let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                                if (element) {
                                                                    element.textContent = target.value;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else {
                                                show_message(this.params.words('error_name') + ': ' + this.params.words('option_not_found'));
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Text = Text;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$9 = Resources$9 || (Resources$9 = {}));

var Resources$8;
(function (Resources) {
    (function (Options) {
        class Link extends Abstracts.Options {
            prepare_template(params, option) {
                let value = option.value;
                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                if (iframe) {
                    let iframeDocument = iframe.contentDocument;
                    if (iframeDocument !== null) {
                        if (option.element) {
                            let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ' + option.element);
                            if (element) {
                                value = element.getAttribute('href');
                            }
                        }
                        else {
                            let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                            if (element) {
                                value = element.getAttribute('href');
                            }
                        }
                    }
                }
                let element = (option.element !== '') ? ' data-element="' + option.element + '"' : '';
                let unique_id = Math.random();
                return {
                    template: '<div class="ec-w-100">'
                        + '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-display-flex ec-justify-content-space-between ec-option-url-group"' + element + '>'
                        + '<input type="text" value="' + value + '" id="ec-composer-url-' + unique_id + '-input">'
                        + '<button type="button">'
                        + params.icons('autorenew', { 'icon_class': 'ec-option-url-group-checking-icon' })
                        + '</button>'
                        + '<button type="button">'
                        + params.icons('check', { 'icon_class': 'ec-option-url-group-success-icon' })
                        + '</button>'
                        + '<button type="button">'
                        + params.icons('close', { 'icon_class': 'ec-option-url-group-failed-icon' })
                        + '</button>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = () => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-url-group')) {
                                    target.closest('.ec-option-url-group')?.getElementsByTagName('button')[0].classList.add('ec-option-url-group-active-button');
                                    target.closest('.ec-option-url-group')?.getElementsByTagName('button')[1].classList.remove('ec-option-url-group-active-button');
                                    target.closest('.ec-option-url-group')?.getElementsByTagName('button')[2].classList.remove('ec-option-url-group-active-button');
                                    Classes$1.Timer.schedule_event('update_url', () => {
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[0].classList.remove('ec-option-url-group-active-button');
                                        let option_url = target.closest('.ec-option-url-group');
                                        let input = option_url.getElementsByTagName('input');
                                        if (input !== undefined) {
                                            let value = input[0].value;
                                            if (value !== undefined) {
                                                if (is_url_valid(value)) {
                                                    target.closest('.ec-option-url-group')?.getElementsByTagName('button')[1].classList.add('ec-option-url-group-active-button');
                                                    let option_name = option_url.closest('li')?.getAttribute('data-option');
                                                    if (option_name) {
                                                        let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                                        if (element_id) {
                                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                            if (iframe) {
                                                                let iframeDocument = iframe.contentDocument;
                                                                if (iframeDocument !== null) {
                                                                    let element_name = target.closest('.ec-option-url-group').getAttribute('data-element') ? target.closest('.ec-option-url-group').getAttribute('data-element') : '';
                                                                    if (element_name) {
                                                                        let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ' + element_name);
                                                                        if (element) {
                                                                            element.setAttribute('href', target.value);
                                                                        }
                                                                    }
                                                                    else {
                                                                        let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                                        if (element) {
                                                                            element.setAttribute('href', target.value);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    target.closest('.ec-option-url-group')?.getElementsByTagName('button')[2].classList.add('ec-option-url-group-active-button');
                                                }
                                            }
                                        }
                                    }, 1000);
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Link = Link;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$8 = Resources$8 || (Resources$8 = {}));

var Resources$7;
(function (Resources) {
    (function (Options) {
        class Images extends Abstracts.Options {
            prepare_template(params, option) {
                let has_link = option.has_link ? ' data-link="1"' : ' data-link="0"';
                let unique_id = Date.now();
                return {
                    template: '<div class="ec-w-100">'
                        + '<div>'
                        + '<div class="ec-block ec-option-media"' + has_link + '>'
                        + '<div class="ec-block-header">'
                        + '<div class="ec-search">'
                        + '<input type="text" placeholder="' + params.words('search_for_images') + '" class="ec-search-input" id="ec-composer-search-images-' + unique_id + '-input">'
                        + '<a href="#">'
                        + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                        + params.icons('cancel', { 'icon_class': 'ec-cancel-icon' })
                        + '</a>'
                        + '<div class="ec-search-buttons">'
                        + '<button type="button" class="ec-search-button ec-search-upload-media-section ec-search-active-button" data-target="#ec-search-upload-media-section-' + unique_id + '">'
                        + params.icons('backup', { 'icon_class': 'ec-image-upload-icon' })
                        + '</button>'
                        + '<button type="button" class="ec-search-button ec-search-list-media-section" data-target="#ec-search-list-media-section-' + unique_id + '">'
                        + params.icons('image_search', { 'icon_class': 'ec-image-search-icon' })
                        + '</button>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<div class="ec-search-sections">'
                        + '<div class="ec-search-section ec-search-section-show" id="ec-search-upload-media-section-' + unique_id + '">'
                        + '<div class="ec-media-upload-box">'
                        + '<h3 class="ec-media-title">'
                        + '<span>'
                        + params.words('upload')
                        + '</span>'
                        + '</h3>'
                        + '<div class="ec-media-upload-box-drop-area">'
                        + '<div class="ec-media-upload-box-drop-area-start ec-media-upload-box-drop-area-show">'
                        + '<div class="ec-media-upload-box-icon-box">'
                        + '<div class="ec-media-upload-box-icon">'
                        + params.icons('cloud_upload')
                        + '</div>'
                        + '</div>'
                        + '<h6>'
                        + params.words('drag_and_drop_files')
                        + '</h6>'
                        + '<p>'
                        + params.words('supported_upload_format')
                        + '</p>'
                        + '</div>'
                        + '<div class="ec-media-upload-box-drop-area-drop">'
                        + '<div class="ec-media-upload-box-icon-box">'
                        + '<div class="ec-media-upload-box-icon">'
                        + params.icons('cloud_queue')
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-media-uploaded-files">'
                        + '<h3 class="ec-media-title">'
                        + '<span>'
                        + params.words('files')
                        + '</span>'
                        + '</h3>'
                        + '<ul class="ec-media-uploaded-files-list"></ul>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-search-section" id="ec-search-list-media-section-' + unique_id + '">'
                        + '<div class="ec-media-images ec-media-images-preview">'
                        + '<h3 class="ec-media-title">'
                        + '<span>'
                        + params.words('gallery')
                        + '</span>'
                        + '<a href="#">'
                        + params.words('show_all')
                        + '</a>'
                        + '</h3>'
                        + '<p>'
                        + params.words('no_images_were_found')
                        + '</p>'
                        + '<ul></ul>'
                        + '<div class="ec-media-images-list">'
                        + '<div class="ec-media-images-list-two-columns">'
                        + '<div>'
                        + '</div>'
                        + '<div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-loading-button">'
                        + '<a href="#">'
                        + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                        + params.words('load_more')
                        + '</a>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-block-footer ec-display-none">'
                        + '<form method="post" enctype="multipart/form-data">'
                        + '<input type="file" class="ef-files" id="ec-composer-images-' + unique_id + '-input" multiple />'
                        + '</form>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = (params) => {
                return [{
                        action: 'dragover',
                        target: (e) => {
                            e.preventDefault();
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-media-upload-box-drop-area')) {
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-start')[0].classList.remove('ec-media-upload-box-drop-area-show');
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-drop')[0].classList.add('ec-media-upload-box-drop-area-show');
                            }
                            else if ((target !== null) && target.closest('.ec-option-media')) {
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-drop')[0].classList.remove('ec-media-upload-box-drop-area-show');
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-start')[0].classList.add('ec-media-upload-box-drop-area-show');
                            }
                        },
                        capture: false
                    }, {
                        action: 'dragleave',
                        target: (e) => {
                            e.preventDefault();
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-media') && !target.closest('.ec-media-upload-box-drop-area')) {
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-drop')[0].classList.remove('ec-media-upload-box-drop-area-show');
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-start')[0].classList.add('ec-media-upload-box-drop-area-show');
                            }
                        },
                        capture: false
                    }, {
                        action: 'drop',
                        target: (e) => {
                            e.preventDefault();
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-media')) {
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-drop')[0].classList.remove('ec-media-upload-box-drop-area-show');
                                params.selector.getElementsByClassName('ec-media-upload-box-drop-area-start')[0].classList.add('ec-media-upload-box-drop-area-show');
                                if (e.dataTransfer.files.length > 0) {
                                    target.closest('.ec-option-media').getElementsByClassName('ef-files')[0].files = e.dataTransfer.files;
                                    target.closest('.ec-option-media').getElementsByClassName('ef-files')[0].dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-media')) {
                                if (target.classList.contains('ec-search-input')) {
                                    target.closest('.ec-search').classList.remove('ec-search-complete');
                                    target.closest('.ec-search').classList.add('ec-search-active');
                                    Classes$1.Timer.schedule_event('search_images', () => {
                                        target.closest('.ec-search').classList.remove('ec-search-active');
                                        if (target.value.length > 0) {
                                            target.closest('.ec-search').classList.add('ec-search-complete');
                                        }
                                        params.selector.querySelector('.ec-option-media .ec-media-images > ul').innerHTML = '';
                                        params.selector.querySelectorAll('.ec-option-media .ec-media-images-list-two-columns > div')[0].innerHTML = '';
                                        params.selector.querySelectorAll('.ec-option-media .ec-media-images-list-two-columns > div')[1].innerHTML = '';
                                        params.selector.querySelector('.ec-option-media .ec-search-upload-media-section').classList.remove('ec-search-section-show');
                                        params.selector.querySelector('.ec-option-media .ec-search-list-media-section').classList.add('ec-search-section-show');
                                        get_images(params, 1);
                                    }, 1000);
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'change',
                        target: (e) => {
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-media')) {
                                if ((target.files !== null) && (target.files.length > 0)) {
                                    target.closest('.ec-option-media').getElementsByClassName('ec-media-uploaded-files-list')[0].innerHTML = '';
                                    target.closest('.ec-option-media').getElementsByClassName('ec-media-uploaded-files')[0].classList.remove('ec-media-uploaded-files-show');
                                    let uploaded_images = '';
                                    for (let image of target.files) {
                                        uploaded_images += '<li class="ec-media-uploaded-file ec-media-uploaded-file-uploading" data-file="' + image.lastModified + '_' + image.size + '">'
                                            + '<div class="ec-grid">'
                                            + '<div class="ec-grid-column-11">'
                                            + '<div class="ec-media-uploaded-file-icon">'
                                            + params.icons('upload_file')
                                            + '</div>'
                                            + '<div class="ec-media-uploaded-file-info">'
                                            + '<h4>'
                                            + image.name
                                            + '</h4>'
                                            + '<h6>'
                                            + '<span class="ec-media-uploaded-done">0</span> / <span class="ec-media-upload-total" data-total="' + image.size + '">' + format_file_size(image.size) + '</span>'
                                            + '</h6>'
                                            + '<div class="ec-media-uploaded-file-loading-progress">'
                                            + '<div class="ec-media-uploaded-file-loading-progress-bar"></div>'
                                            + '</div>'
                                            + '</div>'
                                            + '</div>'
                                            + '<div class="ec-grid-column-1">'
                                            + '<div class="ec-media-uploaded-percentage"></div>'
                                            + '</div>'
                                            + '</div>'
                                            + '</li>';
                                        let form = new FormData();
                                        form.append('file_name', image.lastModified + '_' + image.size);
                                        form.append('file', image);
                                        let http = new XMLHttpRequest();
                                        http.open('POST', params.options('api_url') + 'api/upload_image', true);
                                        http.upload.onprogress = function (e) {
                                            if (e.lengthComputable) {
                                                let percent = (e.loaded / e.total) * 100;
                                                let file_size = target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + this.file_name + '"] .ec-media-upload-total').getAttribute('data-total');
                                                if (file_size) {
                                                    let uploaded_size = (percent / 100) * parseInt(file_size);
                                                    target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + this.file_name + '"] .ec-media-uploaded-done').textContent = format_file_size(uploaded_size);
                                                }
                                                target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + this.file_name + '"] .ec-media-uploaded-percentage').textContent = percent.toFixed(0) + '%';
                                                let progress_width = target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + this.file_name + '"] .ec-media-uploaded-file-loading-progress').clientWidth;
                                                let progress_bar = (percent / 100) * progress_width;
                                                target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + this.file_name + '"] .ec-media-uploaded-file-loading-progress-bar').style.width = progress_bar.toFixed(0) + 'px';
                                            }
                                        }.bind({
                                            file_name: image.lastModified + '_' + image.size
                                        });
                                        http.onload = function () {
                                            if (http.status >= 200 && http.status < 300) {
                                                let data = JSON.parse(http.response);
                                                if (typeof data.file_name !== 'undefined') {
                                                    target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + data.file_name + '"]')?.classList.add('ec-media-uploaded-file-uploading');
                                                    target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + data.file_name + '"] h6').textContent = data.message;
                                                    params.selector.querySelector('.ec-option-media .ec-media-images > ul').innerHTML = '';
                                                    params.selector.querySelectorAll('.ec-option-media .ec-media-images-list-two-columns > div')[0].innerHTML = '';
                                                    params.selector.querySelectorAll('.ec-option-media .ec-media-images-list-two-columns > div')[1].innerHTML = '';
                                                }
                                                else {
                                                    target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + data.file_name + '"]')?.classList.add('ec-media-uploaded-file-failed');
                                                    target.closest('.ec-option-media').querySelector('.ec-media-uploaded-file[data-file="' + data.file_name + '"] h6').textContent = data.message;
                                                }
                                            }
                                            else {
                                                console.error('Upload failed with status ' + http.status);
                                            }
                                        };
                                        http.onerror = function () {
                                            console.error('There was an error with the XMLHttpRequest');
                                        };
                                        http.send(form);
                                    }
                                    target.closest('.ec-option-media').getElementsByClassName('ec-media-uploaded-files-list')[0].innerHTML = uploaded_images;
                                    target.closest('.ec-option-media').getElementsByClassName('ec-media-uploaded-files')[0].classList.add('ec-media-uploaded-files-show');
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-media')) {
                                if (target.nodeName !== 'INPUT') {
                                    e.preventDefault();
                                }
                                if (target.closest('.ec-search-button')) {
                                    if (target.closest('.ec-option-media').querySelector(target.getAttribute('data-target'))) {
                                        target.closest('.ec-option-media').querySelector(target.closest('.ec-option-media').getElementsByClassName('ec-search-active-button')[0].getAttribute('data-target')).classList.add('ec-search-section-hide');
                                        target.closest('.ec-option-media').querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-start');
                                        setTimeout(() => {
                                            Array.from(target.closest('.ec-option-media').getElementsByClassName('ec-search-button')).forEach((element) => {
                                                element.classList.remove('ec-search-active-button');
                                            });
                                            target.classList.add('ec-search-active-button');
                                            Array.from(target.closest('.ec-option-media').querySelector(target.getAttribute('data-target')).closest('.ec-search-sections').getElementsByClassName('ec-search-section')).forEach((element) => {
                                                element.classList.remove('ec-search-section-show', 'ec-search-section-hide', 'ec-search-section-start');
                                            });
                                            target.closest('.ec-option-media').querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-show');
                                            if (target.getAttribute('data-target').substring(0, 30) === '#ec-search-list-media-section-') {
                                                if (target.closest('.ec-option-media').querySelectorAll(target.getAttribute('data-target') + ' .ec-media-images-list-two-columns a').length < 1) {
                                                    get_images(params, 1);
                                                }
                                            }
                                        }, 100);
                                    }
                                }
                                else if (target.closest('.ec-media-title') && (target.nodeName === 'A')) {
                                    if (target.closest('.ec-media-images').classList.contains('ec-media-images-all')) {
                                        target.closest('.ec-media-images').classList.add('ec-media-images-all-hide');
                                        setTimeout(function () {
                                            target.closest('.ec-media-images').classList.remove('ec-media-images-all-hide');
                                            target.closest('.ec-media-images').classList.remove('ec-media-images-all');
                                            target.closest('.ec-media-images').classList.add('ec-media-images-preview');
                                        }, 300);
                                    }
                                    else {
                                        target.closest('.ec-media-images').classList.add('ec-media-images-all-show');
                                        setTimeout(function () {
                                            target.closest('.ec-media-images').classList.remove('ec-media-images-all-show');
                                            target.closest('.ec-media-images').classList.remove('ec-media-images-preview');
                                            target.closest('.ec-media-images').classList.add('ec-media-images-all');
                                        }, 300);
                                    }
                                }
                                else if (target.closest('.ec-media-upload-box') && (target.nodeName === 'A')) {
                                    target.closest('.ec-option-media').getElementsByClassName('ef-files')[0].click();
                                }
                                else if (target.closest('.ec-loading-button')) {
                                    target.classList.add('ec-load-more-active');
                                    setTimeout(() => {
                                        get_images(params, parseInt(target.closest('.ec-loading-button').getAttribute('data-page')));
                                    }, 1000);
                                }
                                else if (target.closest('.ec-search-complete') && (target.nodeName === 'A')) {
                                    target.closest('.ec-search').classList.remove('ec-search-complete');
                                    target.closest('.ec-search').classList.remove('ec-search-active');
                                    params.selector.querySelector('.ec-option-media .ec-search-input').value = '';
                                    get_images(params, 1);
                                }
                                else if (target.closest('.ec-media-images') && (target.nodeName === 'A')) {
                                    if (target.classList.contains('ec-media-image-selected')) {
                                        Array.from(target.closest('.ec-media-images').getElementsByTagName('a')).map(image => {
                                            image.classList.remove('ec-media-image-selected');
                                        });
                                        let element_name = target.closest('.ec-display-flex')?.getAttribute('data-element') ? target.closest('.ec-display-flex')?.getAttribute('data-element') : '';
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let content_data = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                if (content_data) {
                                                    if (element_name === '.ec-element-image') {
                                                        content_data.getElementsByClassName('ec-element-image')[0].classList.add('ec-element-cover');
                                                        let image_cover = document.createElement('div');
                                                        image_cover.innerHTML = (iframeDocument.querySelector('.ec-element-content-active').getAttribute('data-name') === 'video') ? params.icons('video') : params.icons('image');
                                                        content_data.getElementsByClassName('ec-element-image')[0].replaceChildren(image_cover.firstChild);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        Array.from(target.closest('.ec-media-images').getElementsByTagName('a')).map(image => {
                                            if (image.getAttribute('data-id') === target.getAttribute('data-id')) {
                                                image.classList.add('ec-media-image-selected');
                                            }
                                            else {
                                                image.classList.remove('ec-media-image-selected');
                                            }
                                        });
                                        let element_name = target.closest('.ec-display-flex')?.getAttribute('data-element') ? target.closest('.ec-display-flex')?.getAttribute('data-element') : '';
                                        let image = document.createElement('img');
                                        image.src = target.getAttribute('href');
                                        image.alt = target.getElementsByTagName('img')[0].getAttribute('alt');
                                        image.setAttribute('data-id', target.getAttribute('data-id'));
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let content_data = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                if (content_data) {
                                                    if (element_name === '.ec-element-image') {
                                                        content_data.getElementsByClassName('ec-element-image')[0].replaceChildren(image);
                                                        content_data.getElementsByClassName('ec-element-image')[0].classList.remove('ec-element-cover');
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Images = Images;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$7 = Resources$7 || (Resources$7 = {}));

var Resources$6;
(function (Resources) {
    (function (Options) {
        class Direction extends Abstracts.Options {
            prepare_template(params, option) {
                let items = '<ul class="ec-option-selector-items">';
                if (option.items.length > 0) {
                    for (let item of option.items) {
                        items += '<li>'
                            + '<a href="#" data-item="' + item.item_id + '">'
                            + item.item_name
                            + '</a>'
                            + '</li>';
                    }
                }
                items += '</ul>';
                let value = option.value;
                if (typeof option.custom === 'string') {
                    value = option.custom;
                }
                if (value === 'column') {
                    value = params.words('vertical');
                }
                else if (value === 'row') {
                    value = params.words('horizontal');
                }
                let selector = '<div class="ec-option-selector-dropdown">'
                    + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
                    + '<span>'
                    + value
                    + '</span>'
                    + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                    + '</button>'
                    + '<div class="ec-option-selector-menu">'
                    + items
                    + '</div>'
                    + '</div>';
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-selector">'
                        + selector
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                if (typeof option.name === 'undefined') {
                    show_message(params.words('error_name') + ': ' + params.words('option_invalid_parameters'));
                }
                else {
                    let property = {
                        element_name: (typeof option.element === 'string') ? option.element : ''
                    };
                    property[option.name] = option.value;
                    return property;
                }
            }
            get_events = () => {
                return [{
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target.closest('.ec-option-selector-items')) {
                                e.preventDefault();
                                let selected = target.textContent;
                                let item_id = target.getAttribute('data-item');
                                if (selected && item_id) {
                                    target.closest('.ec-option-selector-dropdown').querySelector('.ec-button > span:first-child').textContent = selected;
                                    let option_name = target.closest('.ec-display-flex')?.getAttribute('data-option');
                                    let element_name = target.closest('.ec-display-flex')?.getAttribute('data-element') ? target.closest('.ec-display-flex')?.getAttribute('data-element') : '';
                                    if (option_name) {
                                        let device = target.closest('.ec-sections').getAttribute('data-scope');
                                        let element_id = target.closest('.ec-composer-element-options')?.getAttribute('data-element');
                                        if (element_id) {
                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                            if (iframe) {
                                                let iframeDocument = iframe.contentDocument;
                                                if (iframeDocument !== null) {
                                                    let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                                    if (style !== null) {
                                                        let sheet = style.sheet;
                                                        let property = this.get_property(Resources.Options.Direction.saved_options[option_name + '_' + element_name]);
                                                        let property_name = (Object.keys(property)[0] === 'element_name') ? Object.keys(property)[1].replaceAll('_', '-') : Object.keys(property)[0].replaceAll('_', '-');
                                                        let style_content = update_property_value(sheet, element_id, element_name, property_name, item_id, device);
                                                        style.innerHTML = style_content;
                                                        let backup = new Classes$1.Backup();
                                                        backup.update_css_element_id(element_id, this.params, style_content);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Direction = Direction;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$6 = Resources$6 || (Resources$6 = {}));

var Resources$5;
(function (Resources) {
    (function (Options) {
        class Menu extends Abstracts.Options {
            prepare_template(params, option) {
                let items = '';
                let unique_id = Math.random();
                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                if (iframe) {
                    let iframeDocument = iframe.contentDocument;
                    if (iframeDocument !== null) {
                        let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                        if (list) {
                            let list_items = list.childNodes;
                            if (list_items.length > 0) {
                                let count = 1;
                                for (let item of list_items) {
                                    if (item.nodeName !== 'LI') {
                                        continue;
                                    }
                                    let item_link = item.getElementsByTagName('a');
                                    if (item_link.length < 1) {
                                        continue;
                                    }
                                    let href = item_link[0].getAttribute('href');
                                    let text = item_link[0].textContent;
                                    items += '<li data-index="' + count + '">'
                                        + '<div class="ec-w-100">'
                                        + '<div>'
                                        + '<h3>'
                                        + count + '# ' + params.words('menu_item')
                                        + '</h3>'
                                        + '<p>'
                                        + params.words('menu_item_description')
                                        + '</p>'
                                        + '</div>'
                                        + '<div class="ec-option-text">'
                                        + '<input type="text" value="' + text + '" class="ec-menu-item-text" id="ec-menu-item-text-' + count + unique_id + '-input">'
                                        + '</div>'
                                        + '<div class="ec-display-flex ec-justify-content-space-between ec-option-url-group">'
                                        + '<input type="text" value="' + href + '" class="ec-menu-item-url" id="ec-menu-item-url-' + count + unique_id + '-input">'
                                        + '<button type="button">'
                                        + params.icons('autorenew', { 'icon_class': 'ec-option-url-group-checking-icon' })
                                        + '</button>'
                                        + '<button type="button">'
                                        + params.icons('check', { 'icon_class': 'ec-option-url-group-success-icon' })
                                        + '</button>'
                                        + '<button type="button">'
                                        + params.icons('close', { 'icon_class': 'ec-option-url-group-failed-icon' })
                                        + '</button>'
                                        + '</div>'
                                        + '</div>'
                                        + '<div class="ec-mt-2 ec-right">'
                                        + '<a href="#" class="ec-delete-item">'
                                        + params.words('delete_it')
                                        + '</a>'
                                        + '<a href="#" class="ec-clone-item">'
                                        + params.words('clone')
                                        + '</a>'
                                        + '</div>'
                                        + '</li>';
                                    count++;
                                }
                            }
                        }
                    }
                }
                return {
                    template: '<div class="ec-block ec-option-menu">'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<ul>'
                        + items
                        + '</ul>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = () => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-menu')) {
                                    e.preventDefault();
                                    if (target.classList.contains('ec-menu-item-text')) {
                                        let li_text = target.value;
                                        let li_index = target.closest('li').getAttribute('data-index');
                                        if (li_index) {
                                            Classes$1.Timer.schedule_event('edit_menu_item_text', () => {
                                                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                if (iframe) {
                                                    let iframeDocument = iframe.contentDocument;
                                                    if (iframeDocument !== null) {
                                                        let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                        if (list) {
                                                            let list_items = list.childNodes;
                                                            if (list_items.length > 0) {
                                                                let count = 1;
                                                                for (let item of list_items) {
                                                                    if (item.nodeName !== 'LI') {
                                                                        continue;
                                                                    }
                                                                    let item_link = item.getElementsByTagName('a');
                                                                    if (item_link.length < 1) {
                                                                        continue;
                                                                    }
                                                                    if (parseInt(li_index) === count) {
                                                                        item_link[0].textContent = li_text;
                                                                        break;
                                                                    }
                                                                    count++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }, 1000);
                                        }
                                    }
                                    else if (target.classList.contains('ec-menu-item-url')) {
                                        let li_url = target.value;
                                        let li_index = target.closest('li').getAttribute('data-index');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[0].classList.add('ec-option-url-group-active-button');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[1].classList.remove('ec-option-url-group-active-button');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[2].classList.remove('ec-option-url-group-active-button');
                                        if (li_index) {
                                            Classes$1.Timer.schedule_event('edit_menu_item_url', () => {
                                                target.closest('.ec-option-url-group').getElementsByTagName('button')[0].classList.remove('ec-option-url-group-active-button');
                                                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                if (iframe) {
                                                    let iframeDocument = iframe.contentDocument;
                                                    if (iframeDocument !== null) {
                                                        let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                        if (list) {
                                                            let list_items = list.childNodes;
                                                            if (list_items.length > 0) {
                                                                let count = 1;
                                                                for (let item of list_items) {
                                                                    if (item.nodeName !== 'LI') {
                                                                        continue;
                                                                    }
                                                                    let item_link = item.getElementsByTagName('a');
                                                                    if (item_link.length < 1) {
                                                                        continue;
                                                                    }
                                                                    if (parseInt(li_index) === count) {
                                                                        if (is_url_valid(li_url)) {
                                                                            target.closest('.ec-option-url-group').getElementsByTagName('button')[1].classList.add('ec-option-url-group-active-button');
                                                                            item_link[0].setAttribute('href', li_url);
                                                                        }
                                                                        else {
                                                                            target.closest('.ec-option-url-group').getElementsByTagName('button')[2].classList.add('ec-option-url-group-active-button');
                                                                        }
                                                                        break;
                                                                    }
                                                                    count++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }, 1000);
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-menu')) {
                                    e.preventDefault();
                                    let ul = target.closest('ul');
                                    if (target.classList.contains('ec-delete-item')) {
                                        let li_index = target.closest('li').getAttribute('data-index');
                                        if (li_index) {
                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                            if (iframe) {
                                                let iframeDocument = iframe.contentDocument;
                                                if (iframeDocument !== null) {
                                                    let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                    if (list) {
                                                        let list_items = list.childNodes;
                                                        if (list_items.length > 0) {
                                                            let count = 1;
                                                            for (let item of list_items) {
                                                                if (item.nodeName !== 'LI') {
                                                                    continue;
                                                                }
                                                                let item_link = item.getElementsByTagName('a');
                                                                if (item_link.length < 1) {
                                                                    continue;
                                                                }
                                                                if (parseInt(li_index) === count) {
                                                                    item.remove();
                                                                    break;
                                                                }
                                                                count++;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        target.closest('li').remove();
                                        if (ul.getElementsByTagName('li')) {
                                            let count = 1;
                                            for (let item of ul.getElementsByTagName('li')) {
                                                item.setAttribute('data-index', count.toString());
                                                item.getElementsByTagName('h3')[0].textContent = count + '#' + item.getElementsByTagName('h3')[0].textContent.split('#').slice(-1)[0];
                                                count++;
                                            }
                                        }
                                    }
                                    else if (target.classList.contains('ec-clone-item') && (target.closest('.ec-display-flex').getAttribute('data-option') === 'menu')) {
                                        let ul = target.closest('ul');
                                        let item = target.closest('li');
                                        let cloned_item = item.cloneNode(true);
                                        item.insertAdjacentElement('afterend', cloned_item);
                                        let li_index = target.closest('li').getAttribute('data-index');
                                        if (li_index) {
                                            let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                            if (iframe) {
                                                let iframeDocument = iframe.contentDocument;
                                                if (iframeDocument !== null) {
                                                    let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                    if (list) {
                                                        let list_items = list.childNodes;
                                                        if (list_items.length > 0) {
                                                            let count = 1;
                                                            for (let item of list_items) {
                                                                if (item.nodeName !== 'LI') {
                                                                    continue;
                                                                }
                                                                let item_link = item.getElementsByTagName('a');
                                                                if (item_link.length < 1) {
                                                                    continue;
                                                                }
                                                                if (parseInt(li_index) === count) {
                                                                    let cloned_item = item.cloneNode(true);
                                                                    item.insertAdjacentElement('afterend', cloned_item);
                                                                    break;
                                                                }
                                                                count++;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        if (ul.getElementsByTagName('li')) {
                                            let count = 1;
                                            for (let item of ul.getElementsByTagName('li')) {
                                                item.setAttribute('data-index', count.toString());
                                                item.getElementsByTagName('h3')[0].textContent = count + '#' + item.getElementsByTagName('h3')[0].textContent.split('#').slice(-1)[0];
                                                count++;
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Menu = Menu;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$5 = Resources$5 || (Resources$5 = {}));

var Resources$4;
(function (Resources) {
    (function (Options) {
        class Social extends Abstracts.Options {
            prepare_template(params, option) {
                let networks = [];
                networks.push({
                    network_name: 'Facebook',
                    network_id: 'facebook',
                    network_icon: params.icons('facebook')
                });
                networks.push({
                    network_name: 'Instagram',
                    network_id: 'instagram',
                    network_icon: params.icons('instagram')
                });
                networks.push({
                    network_name: 'Linkedin',
                    network_id: 'linkedin',
                    network_icon: params.icons('linkedin')
                });
                networks.push({
                    network_name: 'Pinterest',
                    network_id: 'pinterest',
                    network_icon: params.icons('pinterest')
                });
                networks.push({
                    network_name: 'TikTok',
                    network_id: 'tiktok',
                    network_icon: params.icons('tiktok')
                });
                networks.push({
                    network_name: 'Twitter',
                    network_id: 'twitter',
                    network_icon: params.icons('twitter')
                });
                networks.push({
                    network_name: 'Whatsapp',
                    network_id: 'whatsapp',
                    network_icon: params.icons('whatsapp')
                });
                networks.push({
                    network_name: 'Youtube',
                    network_id: 'youtube',
                    network_icon: params.icons('youtube')
                });
                let grouped_networks = {};
                let networks_html = '';
                for (let network of networks) {
                    networks_html += '<li>'
                        + '<a href="#" data-network="' + network.network_id + '">'
                        + network.network_name
                        + '</a>'
                        + '</li>';
                    grouped_networks[network.network_id] = network.network_name;
                }
                let unique_id = Math.random();
                let items = '';
                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                if (iframe) {
                    let iframeDocument = iframe.contentDocument;
                    if (iframeDocument !== null) {
                        let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                        if (list) {
                            let list_items = list.childNodes;
                            if (list_items.length > 0) {
                                let count = 1;
                                for (let item of list_items) {
                                    if (item.nodeName !== 'LI') {
                                        continue;
                                    }
                                    let network_link = item.getElementsByTagName('a');
                                    if (network_link.length < 1) {
                                        continue;
                                    }
                                    let href = network_link[0].getAttribute('href');
                                    let path = (network_link[0].getElementsByTagName('path').length > 0) ? network_link[0].getElementsByTagName('path')[0].getAttribute('fill') : null;
                                    let color = (path) ? path : '#000000';
                                    items += '<li data-index="' + count + '">'
                                        + '<div class="ec-w-100 ec-mt-1">'
                                        + '<div class="ec-option-selector">'
                                        + '<div class="ec-option-selector-dropdown">'
                                        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
                                        + '<span>'
                                        + grouped_networks[network_link[0].getAttribute('data-network')]
                                        + '</span>'
                                        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                                        + '</button>'
                                        + '<div class="ec-option-selector-menu">'
                                        + '<ul class="ec-networks">'
                                        + networks_html
                                        + '</ul>'
                                        + '</div>'
                                        + '</div>'
                                        + '</div>'
                                        + '<div class="ec-display-flex ec-justify-content-space-between">'
                                        + '<div class="ec-display-flex ec-justify-content-space-between ec-option-url-group">'
                                        + '<input type="text" value="' + href + '" class="ec-social-item-url" id="ec-social-item-url-' + count + '-' + unique_id + '-input">'
                                        + '<button type="button">'
                                        + params.icons('autorenew', { 'icon_class': 'ec-option-url-group-checking-icon' })
                                        + '</button>'
                                        + '<button type="button">'
                                        + params.icons('check', { 'icon_class': 'ec-option-url-group-success-icon' })
                                        + '</button>'
                                        + '<button type="button">'
                                        + params.icons('close', { 'icon_class': 'ec-option-url-group-failed-icon' })
                                        + '</button>'
                                        + '</div>'
                                        + '<div class="ec-button-color">'
                                        + '<button type="button" style="--bgcolor: ' + color + ';" data-color="' + color + '"></button>'
                                        + '</div>'
                                        + '</div>'
                                        + '</div>'
                                        + '<div class="ec-mt-2 ec-right">'
                                        + '<a href="#" class="ec-delete-item">'
                                        + params.words('delete_it')
                                        + '</a>'
                                        + '<a href="#" class="ec-clone-item">'
                                        + params.words('clone')
                                        + '</a>'
                                        + '</div>'
                                        + '</li>';
                                    count++;
                                }
                            }
                        }
                    }
                }
                return {
                    template: '<div class="ec-block ec-option-social">'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<ul>'
                        + items
                        + '</ul>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = (params) => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-social')) {
                                    e.preventDefault();
                                    if (target.classList.contains('ec-social-item-url')) {
                                        let li_url = target.value;
                                        let li_index = target.closest('li').getAttribute('data-index');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[0].classList.add('ec-option-url-group-active-button');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[1].classList.remove('ec-option-url-group-active-button');
                                        target.closest('.ec-option-url-group')?.getElementsByTagName('button')[2].classList.remove('ec-option-url-group-active-button');
                                        if (li_index) {
                                            Classes$1.Timer.schedule_event('edit_social_item_url', () => {
                                                target.closest('.ec-option-url-group').getElementsByTagName('button')[0].classList.remove('ec-option-url-group-active-button');
                                                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                if (iframe) {
                                                    let iframeDocument = iframe.contentDocument;
                                                    if (iframeDocument !== null) {
                                                        let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                        if (list) {
                                                            let list_items = list.childNodes;
                                                            if (list_items.length > 0) {
                                                                let count = 1;
                                                                for (let item of list_items) {
                                                                    if (item.nodeName !== 'LI') {
                                                                        continue;
                                                                    }
                                                                    let item_link = item.getElementsByTagName('a');
                                                                    if (item_link.length < 1) {
                                                                        continue;
                                                                    }
                                                                    if (parseInt(li_index) === count) {
                                                                        if (is_url_valid(li_url)) {
                                                                            target.closest('.ec-option-url-group').getElementsByTagName('button')[1].classList.add('ec-option-url-group-active-button');
                                                                            item_link[0].setAttribute('href', li_url);
                                                                        }
                                                                        else {
                                                                            target.closest('.ec-option-url-group').getElementsByTagName('button')[2].classList.add('ec-option-url-group-active-button');
                                                                        }
                                                                        break;
                                                                    }
                                                                    count++;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }, 1000);
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'mousedown',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-button-color') && target.closest('.ec-option-social')) {
                                    e.preventDefault();
                                    new Plugins$1.Color().add_color_box(e, params);
                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    if (iframe) {
                                        let iframeDocument = iframe.contentDocument;
                                        if (iframeDocument !== null) {
                                            let elements = iframeDocument.getElementsByClassName('ec-element-content-active');
                                            if (elements.length > 0) {
                                                setTimeout(() => {
                                                    Classes$1.Observer.monitor_element('option_color', target, { attributes: true }, (mutations) => {
                                                        for (let mutation of mutations) {
                                                            if (mutation.attributeName === 'data-color') {
                                                                let mutation_target = (mutation.target.nodeName === '#text') ? mutation.target.parentElement : mutation.target;
                                                                let li_index = mutation_target.closest('li').getAttribute('data-index');
                                                                if (li_index) {
                                                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                                    if (iframe) {
                                                                        let iframeDocument = iframe.contentDocument;
                                                                        if (iframeDocument !== null) {
                                                                            let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                                            if (list) {
                                                                                let list_items = list.childNodes;
                                                                                if (list_items.length > 0) {
                                                                                    let count = 1;
                                                                                    for (let item of list_items) {
                                                                                        if (item.nodeName !== 'LI') {
                                                                                            continue;
                                                                                        }
                                                                                        let network_link = item.getElementsByTagName('a');
                                                                                        if (network_link.length < 1) {
                                                                                            continue;
                                                                                        }
                                                                                        let path = network_link[0].getElementsByTagName('path');
                                                                                        if (path.length > 0) {
                                                                                            if (parseInt(li_index) === count) {
                                                                                                path[0].setAttribute('fill', mutation_target.getAttribute('data-color'));
                                                                                            }
                                                                                            count++;
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    });
                                                }, 300);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-networks') && (target.nodeName === 'A')) {
                                    e.preventDefault();
                                    let network = target.getAttribute('data-network');
                                    if (network && params.icons(network)) {
                                        let selected_color = target.closest('.ec-networks').closest('li').querySelector('.ec-button-color > button').getAttribute('data-color');
                                        let icon = params.icons(network);
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let elements = iframeDocument.getElementsByClassName('ec-element-content-active');
                                                if (elements.length > 0) {
                                                    let li_index = target.closest('.ec-networks').closest('li').getAttribute('data-index');
                                                    if (li_index) {
                                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                                        if (iframe) {
                                                            let iframeDocument = iframe.contentDocument;
                                                            if (iframeDocument !== null) {
                                                                let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                                if (list) {
                                                                    let list_items = list.childNodes;
                                                                    if (list_items.length > 0) {
                                                                        let count = 1;
                                                                        for (let item of list_items) {
                                                                            if (item.nodeName !== 'LI') {
                                                                                continue;
                                                                            }
                                                                            let network_link = item.getElementsByTagName('a');
                                                                            if (network_link.length < 1) {
                                                                                continue;
                                                                            }
                                                                            if (parseInt(li_index) === count) {
                                                                                network_link[0].innerHTML = icon;
                                                                                let path = network_link[0].getElementsByTagName('path');
                                                                                if (path.length > 0) {
                                                                                    path[0].setAttribute('fill', selected_color);
                                                                                }
                                                                            }
                                                                            count++;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else {
                                        show_message(params.words('error_name') + ': ' + params.words('network_was_not_found'));
                                    }
                                }
                                else if (target.classList.contains('ec-delete-item') && (target.closest('.ec-display-flex')?.getAttribute('data-option') === 'social')) {
                                    e.preventDefault();
                                    let ul = target.closest('ul');
                                    let li_index = target.closest('li').getAttribute('data-index');
                                    if (li_index) {
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                if (list) {
                                                    let list_items = list.childNodes;
                                                    if (list_items.length > 0) {
                                                        let count = 1;
                                                        for (let item of list_items) {
                                                            if (item.nodeName !== 'LI') {
                                                                continue;
                                                            }
                                                            let item_link = item.getElementsByTagName('a');
                                                            if (item_link.length < 1) {
                                                                continue;
                                                            }
                                                            if (parseInt(li_index) === count) {
                                                                item.remove();
                                                                break;
                                                            }
                                                            count++;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    target.closest('li').remove();
                                    if (ul.querySelectorAll('li[data-index]').length > 0) {
                                        let count = 1;
                                        for (let item of ul.querySelectorAll('li[data-index]')) {
                                            item.setAttribute('data-index', count.toString());
                                            count++;
                                        }
                                    }
                                }
                                else if (target.classList.contains('ec-clone-item') && (target.closest('.ec-display-flex').getAttribute('data-option') === 'social')) {
                                    e.preventDefault();
                                    let ul = target.closest('ul');
                                    let item = target.closest('li');
                                    let cloned_item = item.cloneNode(true);
                                    item.insertAdjacentElement('afterend', cloned_item);
                                    let li_index = target.closest('li').getAttribute('data-index');
                                    if (li_index) {
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let list = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data ul');
                                                if (list) {
                                                    let list_items = list.childNodes;
                                                    if (list_items.length > 0) {
                                                        let count = 1;
                                                        for (let item of list_items) {
                                                            if (item.nodeName !== 'LI') {
                                                                continue;
                                                            }
                                                            let item_link = item.getElementsByTagName('a');
                                                            if (item_link.length < 1) {
                                                                continue;
                                                            }
                                                            if (parseInt(li_index) === count) {
                                                                let cloned_item = item.cloneNode(true);
                                                                item.insertAdjacentElement('afterend', cloned_item);
                                                                break;
                                                            }
                                                            count++;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (ul.querySelectorAll('li[data-index]').length > 0) {
                                        let count = 1;
                                        for (let item of ul.querySelectorAll('li[data-index]')) {
                                            item.setAttribute('data-index', count.toString());
                                            count++;
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Social = Social;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$4 = Resources$4 || (Resources$4 = {}));

var Resources$3;
(function (Resources) {
    (function (Options) {
        class Icons extends Abstracts.Options {
            prepare_template(params, option) {
                setTimeout(() => {
                    get_icons(params, 1);
                }, 300);
                let unique_id = Math.random();
                return {
                    template: '<div class="ec-w-100">'
                        + '<div>'
                        + '<div class="ec-block ec-option-icons">'
                        + '<div class="ec-block-header">'
                        + '<div class="ec-search">'
                        + '<input type="text" placeholder="' + params.words('search_for_icons') + '" class="ec-w-100 ec-search-input" id="ec-composer-search-icons-' + unique_id + '-input">'
                        + '<a href="#">'
                        + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                        + params.icons('cancel', { 'icon_class': 'ec-cancel-icon' })
                        + '</a>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<div class="ec-search-sections">'
                        + '<div class="ec-search-section ec-search-section-show" id="ec-search-list-media-section-' + params.template_id + '">'
                        + '<div class="ec-media-icons ec-media-icons-preview">'
                        + '<h3 class="ec-media-title">'
                        + '<span>'
                        + params.words('gallery')
                        + '</span>'
                        + '<a href="#">'
                        + params.words('show_all')
                        + '</a>'
                        + '</h3>'
                        + '<p>'
                        + params.words('no_icons_were_found')
                        + '</p>'
                        + '<ul></ul>'
                        + '<div class="ec-media-icons-list">'
                        + '<div class="ec-media-icons-list-all">'
                        + '<ul></ul>'
                        + '</div>'
                        + '<div class="ec-loading-button">'
                        + '<a href="#">'
                        + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                        + params.words('load_more')
                        + '</a>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-block-footer ec-display-none">'
                        + '<form method="post" enctype="multipart/form-data">'
                        + '<input type="file" class="ef-files" id="ec-composer-icons-' + unique_id + '-input" multiple />'
                        + '</form>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = (params) => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-option-icons')) {
                                if (target.classList.contains('ec-search-input')) {
                                    target.closest('.ec-search').classList.remove('ec-search-complete');
                                    target.closest('.ec-search').classList.add('ec-search-active');
                                    Classes$1.Timer.schedule_event('search_icons', () => {
                                        target.closest('.ec-search').classList.remove('ec-search-active');
                                        if (target.value.length > 0) {
                                            target.closest('.ec-search').classList.add('ec-search-complete');
                                        }
                                        params.selector.querySelector('.ec-option-icons .ec-media-icons > ul').innerHTML = '';
                                        params.selector.querySelectorAll('.ec-option-icons .ec-media-icons-list-all > ul')[0].innerHTML = '';
                                        get_icons(params, 1);
                                    }, 1000);
                                }
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-option-icons')) {
                                    if (target.nodeName !== 'INPUT') {
                                        e.preventDefault();
                                    }
                                    if (target.closest('.ec-media-title') && (target.nodeName === 'A')) {
                                        if (target.closest('.ec-media-icons').classList.contains('ec-media-icons-all')) {
                                            target.closest('.ec-media-icons').classList.add('ec-media-icons-all-hide');
                                            setTimeout(function () {
                                                target.closest('.ec-media-icons').classList.remove('ec-media-icons-all-hide');
                                                target.closest('.ec-media-icons').classList.remove('ec-media-icons-all');
                                                target.closest('.ec-media-icons').classList.add('ec-media-icons-preview');
                                            }, 300);
                                        }
                                        else {
                                            target.closest('.ec-media-icons').classList.add('ec-media-icons-all-show');
                                            setTimeout(function () {
                                                target.closest('.ec-media-icons').classList.remove('ec-media-icons-all-show');
                                                target.closest('.ec-media-icons').classList.remove('ec-media-icons-preview');
                                                target.closest('.ec-media-icons').classList.add('ec-media-icons-all');
                                            }, 300);
                                        }
                                    }
                                    else if (target.closest('.ec-loading-button')) {
                                        target.classList.add('ec-load-more-active');
                                        setTimeout(() => {
                                            get_icons(params, parseInt(target.closest('.ec-loading-button').getAttribute('data-page')));
                                        }, 1000);
                                    }
                                    else if (target.closest('.ec-search-complete') && (target.nodeName === 'A')) {
                                        target.closest('.ec-search').classList.remove('ec-search-complete');
                                        target.closest('.ec-search').classList.remove('ec-search-active');
                                        params.selector.querySelector('.ec-option-icons .ec-search-input').value = '';
                                        get_icons(params, 1);
                                    }
                                    else if (target.closest('.ec-sizes') && (target.nodeName === 'A')) {
                                        let icon_id = target.closest('.ec-sizes').closest('li').getAttribute('data-icon');
                                        let size = target.getAttribute('data-size');
                                        download_icon(params, icon_id, size);
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Icons = Icons;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$3 = Resources$3 || (Resources$3 = {}));

var Resources$2;
(function (Resources) {
    (function (Options) {
        class List extends Abstracts.Options {
            prepare_template(params, option) {
                let items = '';
                let unique_id = Math.random();
                if (option.items.length > 0) {
                    let values = {
                        get_value: (key) => {
                            return values.hasOwnProperty(key) ? ' value="' + values[key] + '"' : '';
                        }
                    };
                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                    if (iframe) {
                        let iframeDocument = iframe.contentDocument;
                        if (iframeDocument !== null) {
                            let template = iframeDocument.getElementsByClassName('ec-composer-template')[0];
                            if (template.getAttribute('data-utm-source')) {
                                values['utm_source'] = template.getAttribute('data-utm-source');
                            }
                            if (template.getAttribute('data-utm-medium')) {
                                values['utm_medium'] = template.getAttribute('data-utm-medium');
                            }
                            if (template.getAttribute('data-utm-campaign')) {
                                values['utm_campaign'] = template.getAttribute('data-utm-campaign');
                            }
                            if (template.getAttribute('data-utm-term')) {
                                values['utm_term'] = template.getAttribute('data-utm-term');
                            }
                            if (template.getAttribute('data-utm-content')) {
                                values['utm_content'] = template.getAttribute('data-utm-content');
                            }
                        }
                    }
                    for (let item of option.items) {
                        items += '<li data-name="' + item.name + '">'
                            + '<div class="ec-w-100">'
                            + '<div>'
                            + '<h3>'
                            + item.label
                            + '</h3>'
                            + '<p>'
                            + item.description
                            + '</p>'
                            + '</div>'
                            + '<div class="ec-option-text">'
                            + '<input type="text" placeholder="' + item.placeholder + '"' + values.get_value(item.name) + ' class="ec-menu-item-text" id="ec-composer-menu-' + item.name + '-' + unique_id + '-input">'
                            + '</div>'
                            + '</li>';
                    }
                }
                return {
                    template: '<div class="ec-block ec-option-list">'
                        + '<div class="ec-block-body ec-scrollbar-container">'
                        + '<ul>'
                        + items
                        + '</ul>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = () => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]')) {
                                    e.preventDefault();
                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    if (iframe) {
                                        let iframeDocument = iframe.contentDocument;
                                        if (iframeDocument !== null) {
                                            let template = iframeDocument.getElementsByClassName('ec-composer-template')[0];
                                            if (target.closest('li').getAttribute('data-name') === 'utm_source') {
                                                template.setAttribute('data-utm-source', target.value);
                                            }
                                            else if (target.closest('li').getAttribute('data-name') === 'utm_medium') {
                                                template.setAttribute('data-utm-medium', target.value);
                                            }
                                            else if (target.closest('li').getAttribute('data-name') === 'utm_campaign') {
                                                template.setAttribute('data-utm-campaign', target.value);
                                            }
                                            else if (target.closest('li').getAttribute('data-name') === 'utm_term') {
                                                template.setAttribute('data-utm-term', target.value);
                                            }
                                            else if (target.closest('li').getAttribute('data-name') === 'utm_content') {
                                                template.setAttribute('data-utm-content', target.value);
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.List = List;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$2 = Resources$2 || (Resources$2 = {}));

var Resources$1;
(function (Resources) {
    (function (Options) {
        class Checkbox extends Abstracts.Options {
            prepare_template(params, option) {
                let checked = (parseInt(option.value) > 0) ? ' checked' : '';
                let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                if (iframe) {
                    let iframeDocument = iframe.contentDocument;
                    if (iframeDocument !== null) {
                        let template = iframeDocument.getElementsByClassName('ec-composer-template')[0];
                        if (template.getAttribute('data-google-analytics')) {
                            checked = (parseInt(template.getAttribute('data-google-analytics')) > 0) ? ' checked' : '';
                        }
                    }
                }
                let unique_id = Math.random();
                return {
                    template: '<div>'
                        + '<h3>'
                        + option.text.label
                        + '</h3>'
                        + '<p>'
                        + option.text.description
                        + '</p>'
                        + '</div>'
                        + '<div>'
                        + '<div class="ec-option-checkbox">'
                        + '<input type="checkbox" id="ec-option-checkbox-' + unique_id + '"' + checked + ' />'
                        + '<label for="ec-option-checkbox-' + unique_id + '"></label>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = () => {
                return [{
                        action: 'change',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-composer-modal[data-scope="ec-composer-settings-modal"]')) {
                                    e.preventDefault();
                                    let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    if (iframe) {
                                        let iframeDocument = iframe.contentDocument;
                                        if (iframeDocument !== null) {
                                            let template = iframeDocument.getElementsByClassName('ec-composer-template')[0];
                                            template.setAttribute('data-google-analytics', target.checked ? '1' : '0');
                                        }
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Checkbox = Checkbox;
    })(Resources.Options || (Resources.Options = {}));
})(Resources$1 = Resources$1 || (Resources$1 = {}));

const confirmation_email$1 = (params) => {
    return {
        name: params.words('confirmation_email'),
        command: 'confirmation email'
    };
};

const generate_email_subject$1 = (params) => {
    return {
        name: params.words('generate_email_subject'),
        command: 'generate email subject'
    };
};

const generate_follow_up_email$1 = (params) => {
    return {
        name: params.words('generate_follow_up_email'),
        command: 'generate follow up email'
    };
};

const generate_survey_email$1 = (params) => {
    return {
        name: params.words('generate_survey_email'),
        command: 'generate survey email'
    };
};

const job_seeking_email$1 = (params) => {
    return {
        name: params.words('job_seeking_email'),
        command: 'job seeking email'
    };
};

const sales_promotional_email$1 = (params) => {
    return {
        name: params.words('sales_promotional_email'),
        command: 'sales promotional email'
    };
};

const welcome_email$1 = (params) => {
    return {
        name: params.words('welcome_email'),
        command: 'welcome email'
    };
};

var suggestions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    confirmation_email: confirmation_email$1,
    generate_email_subject: generate_email_subject$1,
    generate_follow_up_email: generate_follow_up_email$1,
    generate_survey_email: generate_survey_email$1,
    job_seeking_email: job_seeking_email$1,
    sales_promotional_email: sales_promotional_email$1,
    welcome_email: welcome_email$1
});

const chatgpt$1 = (params) => {
    return {
        name: params.words('chatgpt'),
        slug: 'chatgpt'
    };
};

var services = /*#__PURE__*/Object.freeze({
    __proto__: null,
    chatgpt: chatgpt$1
});

var Resources;
(function (Resources) {
    (function (Options) {
        class Ai extends Abstracts.Options {
            prepare_template(params, option) {
                let unique_id = Date.now();
                let ai_selected_service_slug = '';
                let ai_selected_service_name = '';
                let all_services = '<ul class="ec-services">';
                if (services && (Object.keys(services).length > 0)) {
                    for (let service of Object.keys(services)) {
                        let service_data = Object.getOwnPropertyDescriptor(services, service)?.value(params);
                        if (!ai_selected_service_slug) {
                            ai_selected_service_slug = service_data.slug;
                            ai_selected_service_name = service_data.name;
                        }
                        else if (option.value === service_data.slug) {
                            ai_selected_service_slug = service_data.slug;
                            ai_selected_service_name = service_data.name;
                        }
                        all_services += '<li>'
                            + '<a href="#" data-service="' + service_data.slug + '">'
                            + service_data.name
                            + '</a>'
                            + '</li>';
                    }
                }
                all_services += '</ul>';
                let default_suggestions = '<ul class="ec-ai-default-suggestions">';
                if (suggestions && (Object.keys(suggestions).length > 0)) {
                    for (let suggestion of Object.keys(suggestions)) {
                        let suggestion_data = Object.getOwnPropertyDescriptor(suggestions, suggestion)?.value(params);
                        default_suggestions += '<li>'
                            + '<a href="#" data-command="' + suggestion_data.command + '">'
                            + params.icons('search')
                            + suggestion_data.name
                            + '</a>'
                            + '</li>';
                    }
                }
                default_suggestions += '</ul>';
                let chat_response = `<div class="ec-ai-chat-response">
                <div class="ec-ai-response"></div>
                <div class="ec-ai-actions ec-right">
                    <a href="#" class="ec-insert-ai-response">
                        ${params.words('add_to_template')}
                        ${params.icons('arrow_right_alt')}
                    </a>
                </div>
            </div>`;
                let chat_error = `<div class="ec-ai-chat-error">
                <div class="ec-ai-message"></div>
            </div>`;
                return {
                    template: '<div class="ec-w-100">'
                        + '<div>'
                        + '<div class="ec-block ec-option-ai">'
                        + '<div class="ec-block-header">'
                        + '<div class="ec-text-composer">'
                        + '<textarea placeholder="' + params.words('enter_a_prompt_here') + '" class="ec-textarea" id="ec-composer-prompt-ai-' + unique_id + '-textarea"></textarea>'
                        + params.icons('autorenew', { 'icon_class': 'ec-loading-icon' })
                        + '</div>'
                        + '<div class="ec-option-selector">'
                        + '<div class="ec-option-selector-dropdown">'
                        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between ec-button-service" data-service="' + ai_selected_service_slug + '">'
                        + '<span>'
                        + ai_selected_service_name
                        + '</span>'
                        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                        + '</button>'
                        + '<div class="ec-option-selector-menu">'
                        + all_services
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '<div class="ec-block-body ec-show-suggestions ec-scrollbar-container">'
                        + default_suggestions
                        + chat_response
                        + chat_error
                        + '</div>'
                        + '</div>'
                        + '</div>'
                        + '</div>'
                };
            }
            prepare_property(params, option) {
                return;
            }
            get_events = (params) => {
                return [{
                        action: 'input',
                        target: (e) => {
                            let target = e.target;
                            if ((target !== null) && target.closest('.ec-text-composer')) {
                                Classes$1.Timer.schedule_event('search_ai_content', () => {
                                    let command = params.selector.querySelector('.ec-option-ai .ec-textarea');
                                    if (command.value.trim() !== '') {
                                        get_ai_content(this.params);
                                    }
                                    else {
                                        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-error-message');
                                        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body .ec-ai-default-suggestions').style.height = '125px';
                                        setTimeout(() => {
                                            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body .ec-ai-default-suggestions').removeAttribute('style');
                                            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-suggestions');
                                        }, 300);
                                    }
                                }, 1000);
                            }
                        },
                        capture: false
                    }, {
                        action: 'click',
                        target: (e) => {
                            let target = e.target;
                            if (target !== null) {
                                if (target.closest('.ec-ai-actions')) {
                                    e.preventDefault();
                                    if (target.closest('.ec-insert-ai-response') && (target.nodeName === 'A')) {
                                        let response = target.closest('.ec-ai-chat-response')?.getElementsByClassName('ec-ai-response')[0].innerHTML;
                                        let iframe = this.params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                        if (iframe && response) {
                                            let iframeDocument = iframe.contentDocument;
                                            if (iframeDocument !== null) {
                                                let element = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                                if (element) {
                                                    element.insertAdjacentHTML('beforeend', response);
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (target.closest('.ec-ai-default-suggestions') && (target.nodeName === 'A')) {
                                    e.preventDefault();
                                    let command = target.getAttribute('data-command');
                                    if (command) {
                                        let textarea = target.closest('.ec-option-ai')?.getElementsByClassName('ec-textarea')[0];
                                        textarea.value = command;
                                        get_ai_content(this.params);
                                    }
                                }
                                else if (target.closest('.ec-services')) {
                                    e.preventDefault();
                                    let service_slug = target.getAttribute('data-service');
                                    if (service_slug) {
                                        let service_name = target.textContent;
                                        target.closest('.ec-option-selector-dropdown').getElementsByClassName('ec-button')[0].setAttribute('data-service', service_slug);
                                        target.closest('.ec-option-selector-dropdown').querySelectorAll('.ec-button > span')[0].textContent = service_name;
                                        get_ai_content(this.params);
                                    }
                                }
                            }
                        },
                        capture: false
                    }];
            };
        }
        Options.Ai = Ai;
    })(Resources.Options || (Resources.Options = {}));
})(Resources = Resources || (Resources = {}));

const Color = Resources$f.Options.Color;
const Number$1 = Resources$e.Options.Number;
const Selector = Resources$d.Options.Selector;
const Font = Resources$c.Options.Font;
const Align = Resources$b.Options.Align;
const Position = Resources$a.Options.Position;
const Text = Resources$9.Options.Text;
const Link = Resources$8.Options.Link;
const Images = Resources$7.Options.Images;
const Direction = Resources$6.Options.Direction;
const Menu = Resources$5.Options.Menu;
const Social = Resources$4.Options.Social;
const Icons = Resources$3.Options.Icons;
const List = Resources$2.Options.List;
const Checkbox = Resources$1.Options.Checkbox;
const Ai = Resources.Options.Ai;

var templates$2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Ai: Ai,
    Align: Align,
    Checkbox: Checkbox,
    Color: Color,
    Direction: Direction,
    Font: Font,
    Icons: Icons,
    Images: Images,
    Link: Link,
    List: List,
    Menu: Menu,
    Number: Number$1,
    Position: Position,
    Selector: Selector,
    Social: Social,
    Text: Text
});

const types$2 = {
    color: Color,
    number: Number$1,
    selector: Selector,
    font: Font,
    align: Align,
    position: Position,
    text: Text,
    link: Link,
    images: Images,
    direction: Direction,
    menu: Menu,
    social: Social,
    icons: Icons,
    list: List,
    checkbox: Checkbox,
    ai: Ai
};
var Class$4;
(function (Class) {
    class Styles {
        create_styles(params, iframe, elements_id) {
            let itemplate = params.selector.getElementsByClassName(iframe);
            if (itemplate.length > 0) {
                let content = itemplate[0].contentDocument;
                if (content) {
                    let body = content?.body;
                    let template = body.getElementsByClassName('ec-composer-template');
                    let elements = template[0].getElementsByClassName('ec-element-content');
                    if (elements.length > 0) {
                        for (let element_single of elements) {
                            let element_id = element_single.getAttribute('data-id');
                            let element_name = element_single.getAttribute('data-name');
                            if ((element_id === null) || (element_name === null)) {
                                continue;
                            }
                            if (elements_id?.includes(element_id)) {
                                continue;
                            }
                            let element = get_element_by_name(element_name, params);
                            if (typeof element !== 'undefined') {
                                let element_options = element.get_options(params);
                                let element_styles = element.get_styles(element_id);
                                if (element_options.desktop.length > 0) {
                                    let properties = [];
                                    for (let option of element_options.desktop) {
                                        if (option.list.length > 0) {
                                            for (let list of option.list) {
                                                let template = list.template;
                                                let css_property = new types$2[template](params).get_property(list);
                                                if (typeof css_property !== 'undefined') {
                                                    css_property['element_name'] = list.element;
                                                    properties.push(css_property);
                                                }
                                            }
                                        }
                                    }
                                    if (properties.length > 0) {
                                        let styles = prepare_styles(element_id, properties, element_styles);
                                        if (typeof styles !== 'undefined') {
                                            content.head.innerHTML += styles;
                                        }
                                    }
                                }
                                if (element_options.mobile.length > 0) {
                                    for (let option of element_options.mobile) {
                                        if (option.list.length > 0) {
                                            for (let list of option.list) {
                                                let template = list.template;
                                                let css_property = new types$2[template](params).get_property(list);
                                                if (typeof css_property !== 'undefined') {
                                                    css_property['element_name'] = list.element;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    Class.Styles = Styles;
})(Class$4 = Class$4 || (Class$4 = {}));

var Class$3;
(function (Class) {
    class Custom extends HTMLElement {
        constructor() {
            super();
        }
    }
    Class.Custom = Custom;
})(Class$3 = Class$3 || (Class$3 = {}));

var Class$2;
(function (Class) {
    class Timer {
        static events = null;
        static schedule_event(schedule_id, target, time = 1000) {
            if ((typeof Timer.events !== 'undefined') && Timer.events && (typeof Timer.events[schedule_id] !== 'undefined')) {
                clearTimeout(Timer.events[schedule_id]);
            }
            if (!Timer.events) {
                Timer.events = {
                    [schedule_id]: setTimeout(target, time)
                };
            }
            else {
                Timer.events[schedule_id] = setTimeout(target, time);
            }
        }
    }
    Class.Timer = Timer;
})(Class$2 = Class$2 || (Class$2 = {}));

var Class$1;
(function (Class) {
    class Observer {
        static elements = null;
        static monitor_element(monitor_id, element, attributes, callback) {
            if (Observer.elements && (typeof Observer.elements[monitor_id] !== 'undefined')) {
                Observer.elements[monitor_id].disconnect();
            }
            Observer.elements = {
                [monitor_id]: new MutationObserver(callback)
            };
            Observer.elements[monitor_id].observe(element, attributes);
        }
    }
    Class.Observer = Observer;
})(Class$1 = Class$1 || (Class$1 = {}));

var Class;
(function (Class) {
    class Modules {
        get_modules_categories(params) {
            return [{
                    name: params.words('header'),
                    slug: 'header'
                }, {
                    name: params.words('footer'),
                    slug: 'footer'
                }, {
                    name: params.words('social'),
                    slug: 'social'
                }, {
                    name: params.words('buttons'),
                    slug: 'buttons'
                }, {
                    name: params.words('gallery'),
                    slug: 'gallery'
                }, {
                    name: params.words('uncategorized'),
                    slug: 'uncategorized'
                }];
        }
        async create_module(params, module) {
            let fields = {
                module: module
            };
            let request_params = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(fields)
            };
            let response = await fetch(params.options('api_url') + 'api/create_module', request_params);
            if (!response.ok) {
                if (response.status === 404) {
                    show_modal_message(params, 'error', params.words('error_name') + ': ' + params.words('resource_not_found'));
                }
                else if (response.status === 500) {
                    show_modal_message(params, 'error', params.words('error_name') + ': ' + params.words('internal_server_error'));
                }
                else {
                    show_modal_message(params, 'error', params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
                }
                return;
            }
            let json = await response.json();
            params.selector.querySelector('.ec-composer-modal-show').getElementsByClassName('ec-save-module-button')[0].classList.remove('ec-saving-module-button');
            if (json.success) {
                show_modal_message(params, 'success', json.message);
                let create_module = params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]');
                create_module.getElementsByClassName('ec-menu-module-name')[0].value = '';
                create_module.getElementsByClassName('ec-menu-module-description')[0].value = '';
                create_module.getElementsByClassName('ec-module-advanced-fields')[0].classList.remove('ec-module-advanced-fields-expanded');
                create_module.getElementsByClassName('ec-module-category-button')[0].removeAttribute('data-id');
                create_module.querySelectorAll('.ec-module-category-button > span')[0].textContent = params.words('uncategorized');
                create_module.classList.add('ec-composer-modal-show');
                create_module.classList.add('ec-composer-modal-show');
                create_module.getElementsByClassName('ec-cover-uploaded-files')[0].classList.remove('ec-cover-uploaded-files-show');
                create_module.getElementsByClassName('ec-save-module-button')[0].classList.remove('ec-saving-module-button');
                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules').innerHTML = '';
                this.get_modules(params, 'personal', 1);
            }
            else {
                show_modal_message(params, 'error', json.message);
            }
        }
        async get_modules(params, type, page) {
            let fields = {
                type: type,
                page: page,
                search: (type === 'personal') ? params.selector.querySelector('.ec-modules-component .ec-search-personal-modules').value : params.selector.querySelector('.ec-modules-component .ec-search-default-modules').value
            };
            if (type === 'default') {
                let category = params.selector.querySelector('.ec-option-selector-dropdown .ec-button').getAttribute('data-id');
                if (category) {
                    fields['category'] = category;
                }
            }
            let request_params = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(fields),
            };
            let response = await fetch(params.options('api_url') + 'api/get_modules', request_params);
            if (!response.ok) {
                if (response.status === 404) {
                    show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
                }
                else if (response.status === 500) {
                    show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
                }
                else {
                    show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
                }
                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules-list').classList.add('ec-no-modules-message');
                return;
            }
            let json = await response.json();
            if (type === 'personal') {
                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-loading-button > a').classList.remove('ec-load-more-active');
                if ((typeof json.modules !== 'undefined') && (json.modules.length > 0)) {
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules-list').classList.remove('ec-no-modules-message');
                    let modules_list = '';
                    for (let module of json.modules) {
                        modules_list += '<a href="#" class="ec-module" data-module="' + module.id + '">'
                            + '<img src="' + params.options('share_url') + module.cover + '" alt="' + module.name + '">'
                            + '<div>'
                            + module.name
                            + '</div>'
                            + '</a>';
                    }
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules').insertAdjacentHTML('beforeend', modules_list);
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-loading-button').setAttribute('data-page', (json.page + 1).toString());
                    if (json.modules.length > 9) {
                        params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-loading-button').classList.remove('ec-loading-disabled-button');
                    }
                    else {
                        params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-loading-button').classList.add('ec-loading-disabled-button');
                    }
                }
                else {
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules-list').classList.add('ec-no-modules-message');
                }
            }
            else {
                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-loading-button > a').classList.remove('ec-load-more-active');
                if ((typeof json.modules !== 'undefined') && (json.modules.length > 0)) {
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules-list').classList.remove('ec-no-modules-message');
                    let modules_list = '';
                    for (let module of json.modules) {
                        modules_list += '<a href="#" class="ec-module" data-module="' + module.id + '">'
                            + '<img src="' + params.options('share_url') + module.cover + '" alt="' + module.name + '">'
                            + '<div>'
                            + module.name
                            + '</div>'
                            + '</a>';
                    }
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules').insertAdjacentHTML('beforeend', modules_list);
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-loading-button').setAttribute('data-page', (json.page + 1).toString());
                    if (json.modules.length > 9) {
                        params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-loading-button').classList.remove('ec-loading-disabled-button');
                    }
                    else {
                        params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-loading-button').classList.add('ec-loading-disabled-button');
                    }
                }
                else {
                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules-list').classList.add('ec-no-modules-message');
                }
            }
        }
        async get_module(params, module_id, module_type) {
            let fields = {
                module_id: module_id,
                module_type: module_type
            };
            let request_params = {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(fields),
            };
            let response = await fetch(params.options('api_url') + 'api/get_module', request_params);
            if (!response.ok) {
                if (response.status === 404) {
                    show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
                }
                else if (response.status === 500) {
                    show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
                }
                else {
                    show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
                }
                return;
            }
            let json = await response.json();
            if (json.success) {
                let json_html = json.html;
                json_html = json_html.replaceAll('<br>', '<br />');
                json_html = json_html.replaceAll(/<img(.*?)>/g, '<img$1/>');
                let html = new DOMParser().parseFromString(json_html, "text/xml");
                let html_elements = html.getElementsByClassName('ec-element-content');
                let elements_ids = [];
                if (html_elements.length > 0) {
                    let index = 0;
                    for (let element of html_elements) {
                        let element_id = 'ec-element-' + index + '-' + Date.now();
                        elements_ids.push(element_id);
                        json.html = json.html.replaceAll(element.getAttribute('data-id'), element_id);
                        json.css = json.css.replaceAll(element.getAttribute('data-id'), element_id);
                        index++;
                    }
                }
                let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                let idocument = itemplate.contentDocument;
                if (idocument) {
                    if (elements_ids.length > 0) {
                        let module_placeholder = idocument.getElementsByClassName('ec-composer-template-module-placeholder');
                        if (module_placeholder.length > 0) {
                            let structure_buttons = get_structure_buttons();
                            module_placeholder[0].closest('.ec-composer-template-content-line').outerHTML = json.html.replace('ec-composer-template-content-line', 'ec-composer-template-content-line ec-composer-template-content-line-temp-show');
                            idocument.getElementsByClassName('ec-composer-template-content-line-temp-show')[0].insertAdjacentHTML('afterbegin', structure_buttons);
                            setTimeout(() => {
                                idocument.getElementsByClassName('ec-composer-template-content-line-temp-show')[0].classList.remove('ec-composer-template-content-line-temp-show');
                            }, 300);
                            idocument.head.innerHTML += json.css;
                        }
                        let element_buttons = get_element_buttons();
                        let css_elements = null;
                        for (let element_id of elements_ids) {
                            let style = idocument.head.querySelector('style[data-element="' + element_id + '"]');
                            if (style !== null) {
                                if (css_elements !== null) {
                                    css_elements[element_id] = style.innerText;
                                }
                                else {
                                    css_elements = {
                                        [element_id]: style.innerText
                                    };
                                }
                            }
                            idocument.querySelector('.ec-element-content[data-id="' + element_id + '"]').insertAdjacentHTML('afterbegin', element_buttons);
                        }
                        if (css_elements !== null) {
                            let backup = new Classes$1.Backup();
                            backup.save_module(params, css_elements, remove_buttons(idocument.getElementsByClassName('ec-composer-template')[0].outerHTML));
                        }
                    }
                }
            }
            else {
                show_message(params.words('error_name') + ': ' + json.message);
            }
        }
    }
    Class.Modules = Modules;
})(Class = Class || (Class = {}));

const Classes = {
    Events: Class$8.Events,
    Https: Class$7.Https,
    Backup: Class$6.Backup,
    History: Class$5.History,
    Styles: Class$4.Styles,
    Custom: Class$3.Custom,
    Timer: Class$2.Timer,
    Observer: Class$1.Observer,
    Modules: Class.Modules
};
var Classes$1 = Classes;

var Components$d;
(function (Components) {
    class Tabs {
        get_events(params) {
            return [
                {
                    action: 'click',
                    element: '.ec-composer-nav .ec-composer-nav-link',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target instanceof HTMLElement) {
                            let nav = target.closest('.ec-composer-nav');
                            if (nav.getElementsByClassName('ec-composer-nav-link').length > 0) {
                                let href_link = target.getAttribute('href');
                                if (href_link) {
                                    if (params.selector.querySelector(href_link)) {
                                        let old_href_link = nav.getElementsByClassName('ec-composer-nav-link-active')[0]?.getAttribute('href');
                                        if (old_href_link) {
                                            params.selector.querySelector(old_href_link).classList.add('ec-tab-hide');
                                        }
                                        params.selector.querySelector(href_link).classList.add('ec-tab-start');
                                        setTimeout(() => {
                                            Array.from(nav.getElementsByClassName('ec-composer-nav-link')).forEach((element) => {
                                                element.classList.remove('ec-composer-nav-link-active');
                                            });
                                            if ((target instanceof HTMLElement) && href_link) {
                                                target.classList.add('ec-composer-nav-link-active');
                                                let all_tabs = params.selector.querySelector(href_link).closest('.ec-tabs').getElementsByClassName('ec-tab');
                                                if (all_tabs) {
                                                    Array.from(all_tabs).forEach((element) => {
                                                        element.classList.remove('ec-tab-show', 'ec-tab-hide', 'ec-tab-start');
                                                    });
                                                }
                                                params.selector.querySelector(href_link).classList.add('ec-tab-show');
                                                if (params.selector.getElementsByClassName('ec-composer-main')[0].classList.contains('ec-composer-main-hide-panel')) {
                                                    params.selector.getElementsByClassName('ec-composer-main')[0].classList.add('ec-composer-main-show-panel');
                                                    setTimeout(() => {
                                                        params.selector.getElementsByClassName('ec-composer-main')[0].classList.remove('ec-composer-main-hide-panel');
                                                        params.selector.getElementsByClassName('ec-composer-main')[0].classList.remove('ec-composer-main-show-panel');
                                                    }, 300);
                                                }
                                            }
                                        }, 100);
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Tabs = Tabs;
})(Components$d = Components$d || (Components$d = {}));

var Components$c;
(function (Components) {
    class Sections {
        get_events(params) {
            return [
                {
                    action: 'click',
                    target: (e) => {
                        let target = e.target;
                        if (target instanceof HTMLElement) {
                            if (target.closest('.ec-section-header')) {
                                let section = target.closest('.ec-section');
                                if (section !== null) {
                                    let section_body = section.querySelector('.ec-section-body');
                                    if (section.classList.contains('ec-section-show')) {
                                        section.classList.add('ec-section-active');
                                        let first_child = section_body?.firstChild;
                                        section_body.style.height = first_child.offsetHeight + 'px';
                                        setTimeout(() => {
                                            section_body.style.height = '0';
                                            section.classList.remove('ec-section-show');
                                        }, 10);
                                        setTimeout(() => {
                                            section.classList.remove('ec-section-active');
                                        }, 300);
                                    }
                                    else {
                                        section_body.style.height = '0';
                                        section.classList.add('ec-section-show');
                                        let first_child = section_body?.firstChild;
                                        section_body.style.height = first_child.offsetHeight + 'px';
                                        setTimeout(() => {
                                            section_body.style.height = 'auto';
                                        }, 300);
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                },
                {
                    action: 'click',
                    element: '.ec-composer .ec-section-action-hide-button',
                    target: (e) => {
                        let target = e.target;
                        if (target instanceof HTMLElement) {
                            let composer_main = target.closest('.ec-composer-main');
                            if (composer_main instanceof HTMLElement) {
                                composer_main.classList.add('ec-composer-main-hide-panel');
                                params.selector.getElementsByClassName('ec-composer-nav-link-active')[0].classList.remove('ec-composer-nav-link-active');
                            }
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Sections = Sections;
})(Components$c = Components$c || (Components$c = {}));

var Components$b;
(function (Components) {
    class Main {
        get_events(params) {
            return [
                {
                    action: 'focus',
                    element: '.ec-composer .ec-composer-name .ec-composer-name-text',
                    target: (e) => {
                        e.preventDefault();
                        e.target.closest('.ec-composer-name').classList.add('ec-composer-name-active');
                    },
                    capture: false
                }, {
                    action: 'focusout',
                    element: '.ec-composer .ec-composer-name .ec-composer-name-text',
                    target: (e) => {
                        e.preventDefault();
                        e.target.closest('.ec-composer-name').classList.remove('ec-composer-name-active');
                    },
                    capture: false
                }, {
                    action: 'keyup',
                    element: '.ec-composer .ec-composer-name .ec-composer-name-text',
                    target: (e) => {
                        e.preventDefault();
                        e.target.closest('.ec-composer-name').classList.add('ec-composer-name-unsaved-changes');
                    },
                    capture: false
                }, {
                    action: 'change',
                    element: '.ec-composer .ec-composer-mode > input[type="radio"]',
                    target: (e) => {
                        e.preventDefault();
                        if (e.target.value === '1') {
                            params.selector.getElementsByClassName('ec-composer-preview')[0].innerHTML = '';
                            params.selector.getElementsByClassName('ec-composer-preview')[0].classList.add('ec-composer-preview-show');
                            let builder_options = get_option('builder');
                            let itemplate = document.createElement('iframe');
                            itemplate.classList.add('ec-composer-template-preview');
                            itemplate.setAttribute('frameborder', '0');
                            itemplate.setAttribute('sandbox', 'allow-same-origin allow-modals');
                            params.selector.getElementsByClassName('ec-composer-preview')[0].appendChild(itemplate);
                            if (typeof builder_options.css === 'object') {
                                if (builder_options.css.length > 0) {
                                    let css_link = document.createElement('link');
                                    css_link.setAttribute('href', builder_options.css[0].href);
                                    css_link.setAttribute('rel', 'stylesheet');
                                    itemplate.contentDocument.head.innerHTML += css_link.outerHTML;
                                }
                            }
                            let fonts_link = get_fonts_link();
                            if (fonts_link) {
                                let link = document.createElement('link');
                                link.setAttribute('href', fonts_link);
                                link.setAttribute('rel', 'stylesheet');
                                document.head.appendChild(link);
                                itemplate.contentDocument.head.innerHTML += link.outerHTML;
                            }
                            itemplate.contentDocument.head.innerHTML += get_styles('template');
                            itemplate.contentDocument.head.innerHTML += get_styles('library');
                            itemplate.contentDocument.head.innerHTML += get_styles('default');
                            itemplate.contentDocument.body.innerHTML = '<div class="ec-composer-template"></div>';
                            itemplate.contentDocument.body.getElementsByClassName('ec-composer-template')[0].innerHTML = get_content({
                                'format': 1
                            }).outerHTML;
                            new Classes$1.History().get_history_recent(params, 'ec-composer-template-preview');
                            setTimeout(() => {
                                itemplate.contentDocument.body.getElementsByClassName('ec-composer-template')[0].classList.add('ec-disable-mouse');
                            }, 300);
                        }
                        else {
                            params.selector.getElementsByClassName('ec-composer-preview')[0].classList.remove('ec-composer-preview-show');
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-composer-name-icon',
                    target: async (e) => {
                        e.preventDefault();
                        let template_name = e.target.closest('.ec-composer-name').getElementsByClassName('ec-composer-name-text')[0].textContent;
                        if (template_name) {
                            let post_fields = {
                                template_id: params.template_id,
                                template_name: template_name
                            };
                            let request_params = {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(post_fields)
                            };
                            let response = await fetch(params.options('api_url') + 'api/update_template_name', request_params);
                            if (!response.ok) {
                                if (response.status === 404) {
                                    show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
                                }
                                else if (response.status === 500) {
                                    show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
                                }
                                else {
                                    show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
                                }
                                return;
                            }
                            let json = await response.json();
                            e.target.closest('.ec-composer-name').classList.remove('ec-composer-name-unsaved-changes');
                            setTimeout(() => {
                                e.target.closest('.ec-composer-name').classList.remove('ec-composer-name-saved-changes');
                                e.target.closest('.ec-composer-name').classList.remove('ec-composer-name-saved-failed-changes');
                            }, 2000);
                            if (json.success) {
                                e.target.closest('.ec-composer-name').classList.add('ec-composer-name-saved-changes');
                            }
                            else {
                                e.target.closest('.ec-composer-name').classList.add('ec-composer-name-saved-failed-changes');
                                show_message(params.words('error_name') + ': ' + json.message);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-save-settings-button',
                    target: (e) => {
                        e.preventDefault();
                        unselect_element(params);
                        if (params.selector.getElementsByClassName('ec-composer-preview')[0].classList.contains('ec-composer-preview-show')) {
                            params.selector.querySelectorAll('.ec-composer-mode input[type="radio"]')[0].click();
                        }
                        params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-show');
                        let settings_modal = params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-settings-modal"]');
                        settings_modal.classList.add('ec-composer-modal-show');
                        let default_options = [{
                                title: params.words('position'),
                                list: [{
                                        name: 'text_align',
                                        template: 'position',
                                        value: 'center',
                                        text: {
                                            label: params.words('template_position'),
                                            description: params.words('template_position_description')
                                        },
                                        element: 'td:has(.ec-composer-template-row)'
                                    }],
                                collapsed: true
                            }, {
                                title: params.words('margin'),
                                list: [{
                                        name: 'padding_top',
                                        template: 'number',
                                        value: 0,
                                        unit: 'px',
                                        text: {
                                            label: params.words('margin_top'),
                                            description: params.words('margin_top_description')
                                        },
                                        element: '.ec-composer-template'
                                    }, {
                                        name: 'padding_right',
                                        template: 'number',
                                        value: 0,
                                        unit: 'px',
                                        text: {
                                            label: params.words('margin_right'),
                                            description: params.words('margin_right_description')
                                        },
                                        element: '.ec-composer-template'
                                    }, {
                                        name: 'padding_bottom',
                                        template: 'number',
                                        value: 0,
                                        unit: 'px',
                                        text: {
                                            label: params.words('margin_bottom'),
                                            description: params.words('margin_bottom_description')
                                        },
                                        element: '.ec-composer-template'
                                    }, {
                                        name: 'padding_left',
                                        template: 'number',
                                        value: 0,
                                        unit: 'px',
                                        text: {
                                            label: params.words('margin_left'),
                                            description: params.words('margin_left_description')
                                        },
                                        element: '.ec-composer-template'
                                    }],
                                collapsed: false
                            }, {
                                title: params.words('width'),
                                list: [{
                                        name: 'width',
                                        template: 'number',
                                        value: 950,
                                        unit: 'px',
                                        text: {
                                            label: params.words('width'),
                                            description: params.words('template_width_description')
                                        },
                                        element: '.ec-composer-template-row'
                                    }],
                                collapsed: false
                            }, {
                                title: params.words('colors'),
                                list: [{
                                        name: 'background_color',
                                        template: 'color',
                                        value: '#FFFFFC',
                                        text: {
                                            label: params.words('color_background'),
                                            description: params.words('color_background_description')
                                        },
                                        element: '.ec-composer-template'
                                    }, {
                                        name: 'background_color',
                                        template: 'color',
                                        value: '#FFFFFC',
                                        text: {
                                            label: params.words('template_color_background'),
                                            description: params.words('template_color_background_description')
                                        },
                                        element: '.ec-composer-template-row'
                                    }],
                                collapsed: false
                            }, {
                                title: params.words('analytics'),
                                list: [{
                                        name: 'google_analytics',
                                        template: 'checkbox',
                                        value: 0,
                                        text: {
                                            label: params.words('google_analytics'),
                                            description: params.words('google_analytics_description')
                                        },
                                        element: ''
                                    }, {
                                        name: 'analytics',
                                        template: 'list',
                                        items: [{
                                                name: 'utm_source',
                                                label: params.words('utm_source'),
                                                description: params.words('utm_source_description'),
                                                placeholder: params.words('utm_enter_source')
                                            }, {
                                                name: 'utm_medium',
                                                label: params.words('utm_medium'),
                                                description: params.words('utm_medium_description'),
                                                placeholder: params.words('utm_enter_medium')
                                            }, {
                                                name: 'utm_campaign',
                                                label: params.words('utm_campaign'),
                                                description: params.words('utm_campaign_description'),
                                                placeholder: params.words('utm_enter_campaign')
                                            }, {
                                                name: 'utm_term',
                                                label: params.words('utm_term'),
                                                description: params.words('utm_term_description'),
                                                placeholder: params.words('utm_enter_term')
                                            }, {
                                                name: 'utm_content',
                                                label: params.words('utm_content'),
                                                description: params.words('utm_content_description'),
                                                placeholder: params.words('utm_enter_content')
                                            }]
                                    }],
                                collapsed: false
                            }];
                        let properties_list = {};
                        let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                        if (iframe_template[0] instanceof HTMLIFrameElement) {
                            let idocument = iframe_template[0].contentDocument;
                            if (idocument !== null) {
                                let default_styles = iframe_template[0].contentDocument?.head.querySelector('style[data-scope="default"]');
                                if ((typeof default_styles !== 'undefined') && default_styles) {
                                    let sheet = default_styles.sheet;
                                    if (sheet !== null) {
                                        if (sheet.cssRules.length > 0) {
                                            for (let rule of sheet.cssRules) {
                                                if (typeof rule.media === 'undefined') {
                                                    let style = rule.style;
                                                    for (let property of rule.style) {
                                                        if (typeof properties_list[rule.selectorText] !== 'undefined') {
                                                            properties_list[rule.selectorText][property] = style.getPropertyValue(property);
                                                        }
                                                        else {
                                                            properties_list[rule.selectorText] = {
                                                                [property]: style.getPropertyValue(property)
                                                            };
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let template_options = get_template_options(default_options, properties_list, params);
                        if (typeof template_options !== 'undefined') {
                            params.selector.querySelector('.ec-composer .ec-composer-modal[data-scope="ec-composer-settings-modal"] .ec-composer-modal-body .ec-sections').innerHTML = template_options;
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-save-export-button',
                    target: (e) => {
                        e.preventDefault();
                        params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-show');
                        let export_modal = params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-export-modal"]');
                        export_modal.classList.add('ec-composer-modal-show');
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-templates-button',
                    target: (e) => {
                        e.preventDefault();
                        params.selector.classList.remove('ec-composer-show');
                        setTimeout(() => {
                            params.selector.innerHTML = '';
                        }, 300);
                        let events_list = Classes$1.Events.events_list;
                        if (events_list && (events_list.length > 0)) {
                            for (let event of events_list) {
                                let { node, action, target, iframe, capture } = event;
                                if (!node) {
                                    if (iframe) {
                                        let iframes = document.querySelectorAll(iframe);
                                        if (typeof iframes !== 'undefined') {
                                            iframes[0].contentWindow.removeEventListener(action, target, capture);
                                        }
                                    }
                                    else {
                                        document.removeEventListener(action, target, capture);
                                    }
                                }
                                else {
                                    let all_nodes = node.length;
                                    for (var a = 0; a < all_nodes; a++) {
                                        node[a].removeEventListener(action, target, capture);
                                    }
                                }
                            }
                            Classes$1.Events.events_list = null;
                        }
                        Core$4.Instances.instances_list = {};
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-save-download-html-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        target.classList.add('ec-save-download-active-button');
                        let export_module = params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-export-modal"]');
                        export_module.getElementsByClassName('ec-composer-modal-message')[0].classList.remove('ec-composer-modal-message-error');
                        let fields = {
                            template_id: params.template_id,
                            format: 'html'
                        };
                        let request_params = {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(fields)
                        };
                        let request = fetch(params.options('api_url') + 'api/download_template', request_params);
                        request.then(response => {
                            return response.json();
                        }).then(response => {
                            target.classList.remove('ec-save-download-active-button');
                            if (!response.success) {
                                export_module.getElementsByClassName('ec-composer-modal-message')[0].textContent = response.message;
                                export_module.getElementsByClassName('ec-composer-modal-message')[0].classList.add('ec-composer-modal-message-error');
                            }
                            else {
                                document.location.href = params.options('share_url') + response.zip;
                            }
                        });
                        request.then(error => {
                            console.log(error);
                        });
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Main = Main;
})(Components$b = Components$b || (Components$b = {}));

var Components$a;
(function (Components) {
    class Search {
        get_events(params) {
            return [
                {
                    action: 'click',
                    element: '.ec-search .ec-search-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        let nav = target.closest('.ec-search');
                        if (nav.getElementsByClassName('ec-search-active-button').length > 0) {
                            if (params.selector.querySelector(target.getAttribute('data-target'))) {
                                params.selector.querySelector(nav.getElementsByClassName('ec-search-active-button')[0].getAttribute('data-target')).classList.add('ec-search-section-hide');
                                params.selector.querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-start');
                                setTimeout(() => {
                                    Array.from(nav.getElementsByClassName('ec-search-button')).forEach((element) => {
                                        element.classList.remove('ec-search-active-button');
                                    });
                                    target.classList.add('ec-search-active-button');
                                    Array.from(params.selector.querySelector(target.getAttribute('data-target')).closest('.ec-search-sections').getElementsByClassName('ec-search-section')).forEach((element) => {
                                        element.classList.remove('ec-search-section-show', 'ec-search-section-hide', 'ec-search-section-start');
                                    });
                                    params.selector.querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-show');
                                }, 100);
                            }
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Search = Search;
})(Components$a = Components$a || (Components$a = {}));

var Components$9;
(function (Components) {
    class History {
        get_events(params) {
            return [
                {
                    action: 'click',
                    target: (e) => {
                        let target = e.target;
                        if (target.closest('.ec-loading-navigation-button')) {
                            e.preventDefault();
                            let history = target.closest('.ec-history-component')?.getAttribute('data-history');
                            let page = target.closest('a')?.getAttribute('data-page');
                            if ((typeof history === 'string') && (typeof page === 'string')) {
                                new Classes$1.History().get_history_by_date(params, parseInt(history), parseInt(page), 4);
                            }
                        }
                        else if (target.closest('.ec-history-record')) {
                            e.preventDefault();
                            if (target.classList.contains('ec-history-restore-button')) {
                                const time = target.closest('.ec-grid')?.getAttribute('data-time');
                                if (typeof time === 'string') {
                                    target.classList.add('ec-history-restore-active-button');
                                    setTimeout(() => {
                                        new Classes$1.History().restore_history_record(params, parseInt(time));
                                    }, 1000);
                                }
                            }
                        }
                        else if (target.closest('.ec-section-history')) {
                            e.preventDefault();
                            if (target.closest('.ec-loading-button')) {
                                target.classList.add('ec-load-more-active');
                                let page = target.getAttribute('data-page');
                                if (page) {
                                    new Classes$1.History().get_history_all(params, parseInt(page), 10);
                                }
                            }
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.History = History;
})(Components$9 = Components$9 || (Components$9 = {}));

var Components$8;
(function (Components) {
    class Code {
        _caret_position = 0;
        _selector = {};
        _selection = {};
        _history = {};
        _classes = [
            'ec-code-template-main',
            'ec-code-template-header',
            'ec-code-template-body',
            'ec-code-template-footer'
        ];
        _text_count = 0;
        get_events(params) {
            this._selector = params.selector;
            return [
                {
                    action: 'mousemove',
                    element: '.ec-composer .ec-template-resize-code-button',
                    target: (e) => {
                        if (e.buttons === 1) {
                            let container = params.selector.getElementsByClassName('ec-composer-container')[0];
                            let container_rect = container.getBoundingClientRect();
                            let client_y = (e.clientY > -1) ? (e.clientY - container_rect.y) : 0;
                            let difference = container_rect.height - (client_y - 94);
                            if (difference > 199) {
                                container.getElementsByClassName('ec-composer-template-container')[0].style.height = (client_y - 124) + 'px';
                                container.getElementsByClassName('ec-composer-code-container')[0].style.height = difference + 'px';
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    iframe: '.ec-composer-element-html-container',
                    target: (e) => {
                        params.selector.getElementsByClassName('ec-composer-element-css-container')[0].classList.remove('ec-composer-editor-active');
                        params.selector.getElementsByClassName('ec-composer-element-html-container')[0].classList.add('ec-composer-editor-active');
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    iframe: '.ec-composer-element-css-container',
                    target: (e) => {
                        params.selector.getElementsByClassName('ec-composer-element-html-container')[0].classList.remove('ec-composer-editor-active');
                        params.selector.getElementsByClassName('ec-composer-element-css-container')[0].classList.add('ec-composer-editor-active');
                    },
                    capture: false
                }, {
                    action: 'keydown',
                    iframe: '.ec-composer-element-html-container',
                    target: (e) => {
                        if (e.key.toLowerCase() === 'enter') {
                            this._enter(params);
                        }
                        else if (e.ctrlKey && (e.code === 'KeyZ')) {
                            e.preventDefault();
                        }
                        else if (e.ctrlKey && (e.code === 'KeyY')) {
                            e.preventDefault();
                        }
                        else if (e.ctrlKey && (e.code === 'KeyV')) {
                            e.preventDefault();
                        }
                        else if (e.key.toLowerCase() === 'backspace') {
                            this._delete(params);
                        }
                        else {
                            this._delete2(params);
                        }
                    },
                    capture: false
                }, {
                    action: 'keydown',
                    iframe: '.ec-composer-element-css-container',
                    target: (e) => {
                        if (e.key.toLowerCase() === 'enter') {
                            this._enter(params);
                        }
                        else if (e.ctrlKey && (e.code === 'KeyZ')) {
                            e.preventDefault();
                        }
                        else if (e.ctrlKey && (e.code === 'KeyY')) {
                            e.preventDefault();
                        }
                        else if (e.ctrlKey && (e.code === 'KeyV')) {
                            e.preventDefault();
                        }
                        else if (e.key.toLowerCase() === 'backspace') {
                            this._delete(params);
                        }
                        else {
                            this._delete2(params);
                        }
                    },
                    capture: false
                }, {
                    action: 'input',
                    iframe: '.ec-composer-element-html-container',
                    target: (e) => {
                        e.preventDefault();
                        this._input(e, params);
                    },
                    capture: false
                }, {
                    action: 'input',
                    iframe: '.ec-composer-element-css-container',
                    target: (e) => {
                        e.preventDefault();
                        this._input(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-template-code-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                        if (iframe_template[0] instanceof HTMLIFrameElement) {
                            let idocument = iframe_template[0].contentDocument;
                            if (idocument !== null) {
                                let element_id = idocument.querySelector('.ec-element-content-active')?.getAttribute('data-id');
                                if (typeof element_id === 'string') {
                                    target.closest('.ec-composer-container').getElementsByClassName('ec-composer-code-container')[0].setAttribute('data-element', element_id);
                                    let element_content = idocument.querySelector('.ec-element-content-active .ec-element-content-data');
                                    if (element_content) {
                                        target.classList.add('ec-template-code-active-button');
                                        target.closest('.ec-composer-container').classList.add('ec-composer-container-template-and-code');
                                        target.closest('.ec-composer-container').classList.add('ec-composer-container-template-and-code-show');
                                        let format_html_code = new Plugins$1.HtmlFormatter();
                                        let iframe_html = params.selector.getElementsByClassName('ec-composer-element-html-container');
                                        if (iframe_html[0] instanceof HTMLIFrameElement) {
                                            let idocument_html = iframe_html[0].contentDocument;
                                            if (idocument_html !== null) {
                                                idocument_html.head.innerHTML += get_styles('html');
                                                idocument_html.body.innerHTML = `<div class="ec-composer-code-editor" data-type="html">
                                                    <div class="ec-composer-code-index"></div>
                                                    <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                </div>`;
                                                format_html_code.format({ lines: true, spaces: true }, element_content.innerHTML)
                                                    .then((html) => {
                                                    let clines = idocument_html.body.querySelector('.ec-composer-code-lines');
                                                    clines.innerHTML = html;
                                                    show_index(idocument_html.body);
                                                    let index = idocument_html.getElementsByClassName('ec-composer-code-index')[0];
                                                    let lines = idocument_html.getElementsByClassName('ec-composer-code-lines')[0];
                                                    index.addEventListener('scroll', function () {
                                                        lines.scrollTop = index.scrollTop;
                                                    });
                                                    lines.addEventListener('scroll', function () {
                                                        index.scrollTop = lines.scrollTop;
                                                    });
                                                })
                                                    .catch((error) => {
                                                    console.error(error);
                                                });
                                            }
                                        }
                                        setTimeout(() => {
                                            target.classList.remove('ec-template-code-active-button');
                                            target.classList.add('ec-template-code-hide-button');
                                        }, 300);
                                        setTimeout(() => {
                                            target.closest('.ec-composer-container').classList.remove('ec-composer-container-template-and-code-show');
                                        }, 1000);
                                        if (target.closest('.ec-composer-container').getElementsByClassName('ec-composer-code-show').length < 1) {
                                            target.closest('.ec-composer-container').querySelector('.ec-composer-code-container > .ec-composer-code-header .ec-composer-code-tab:nth-child(1)').classList.add('ec-composer-code-active-tab');
                                            target.closest('.ec-composer-container').querySelector('.ec-composer-code-container > .ec-composer-code-body .ec-composer-code-html').classList.add('ec-composer-code-show');
                                        }
                                    }
                                    let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                    if ((typeof element_style !== 'undefined') && element_style) {
                                        let format_css_code = new Plugins$1.CssFormatter();
                                        format_css_code.format({ lines: true, spaces: true }, element_style.innerHTML)
                                            .then((html) => {
                                            let iframe_css = params.selector.getElementsByClassName('ec-composer-element-css-container');
                                            if (iframe_css[0] instanceof HTMLIFrameElement) {
                                                let idocument_css = iframe_css[0].contentDocument;
                                                if (idocument_css !== null) {
                                                    idocument_css.head.innerHTML += get_styles('css');
                                                    idocument_css.body.innerHTML = `<div class="ec-composer-code-editor" data-type="css">
                                                        <div class="ec-composer-code-index"></div>
                                                        <div class="ec-composer-code-lines" contenteditable="true"></div>
                                                    </div>`;
                                                    let clines = idocument_css.body.querySelector('.ec-composer-code-lines');
                                                    clines.innerHTML = html;
                                                    show_index(idocument_css.body);
                                                    let index = idocument_css.getElementsByClassName('ec-composer-code-index')[0];
                                                    let lines = idocument_css.getElementsByClassName('ec-composer-code-lines')[0];
                                                    index.addEventListener('scroll', function () {
                                                        lines.scrollTop = index.scrollTop;
                                                    });
                                                    lines.addEventListener('scroll', function () {
                                                        index.scrollTop = lines.scrollTop;
                                                    });
                                                }
                                            }
                                        })
                                            .catch((error) => {
                                            console.error(error);
                                        });
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'paste',
                    iframe: '.ec-composer-element-html-container',
                    target: (e) => {
                        e.preventDefault();
                        this._paste(e, params);
                    },
                    capture: false
                }, {
                    action: 'paste',
                    iframe: '.ec-composer-element-css-container',
                    target: (e) => {
                        e.preventDefault();
                        this._paste(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-template-hide-code-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        target.closest('.ec-composer-container').classList.add('ec-composer-container-template-and-code-hide');
                        this._selector?.querySelector('.ec-composer .ec-template-code-button').classList.remove('ec-template-code-hide-button');
                        target.closest('.ec-composer-container').classList.remove('ec-composer-container-template-and-code');
                        setTimeout(() => {
                            target.closest('.ec-composer-container').classList.remove('ec-composer-container-template-and-code-hide');
                        }, 1000);
                        target.closest('.ec-composer-container').getElementsByClassName('ec-composer-template-container')[0].removeAttribute('style');
                        target.closest('.ec-composer-container').getElementsByClassName('ec-composer-code-container')[0].removeAttribute('style');
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-composer-code-container .ec-composer-code-header .ec-composer-code-tab',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        let tab_id = target.getAttribute('data-tab');
                        if (target.classList.contains('ec-composer-code-active-tab')) {
                            target.classList.remove('ec-composer-code-active-tab');
                            target.closest('.ec-composer-code-container').getElementsByClassName('ec-composer-code-' + tab_id)[0].classList.remove('ec-composer-code-show');
                        }
                        else {
                            target.classList.add('ec-composer-code-active-tab');
                            target.closest('.ec-composer-code-container').getElementsByClassName('ec-composer-code-' + tab_id)[0].classList.add('ec-composer-code-show');
                        }
                        if (target.closest('.ec-composer-code-container').getElementsByClassName('ec-composer-code-show').length < 1) {
                            this._selector?.querySelector('.ec-composer .ec-template-code-button').classList.remove('ec-template-code-hide-button');
                            target.closest('.ec-composer-container').classList.remove('ec-composer-container-template-and-code');
                        }
                    },
                    capture: false
                }
            ];
        }
        _process_line = (params, spaces_before = 0) => {
            let line = null;
            let iframe = params.selector.getElementsByClassName('ec-composer-editor-active')[0];
            let cwindow = iframe.contentWindow;
            if (cwindow) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let range = selection.getRangeAt(0);
                    if (range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line')) {
                        line = range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line');
                    }
                    else if (range.commonAncestorContainer.parentElement?.className === 'ec-composer-code-editor-line') {
                        line = range.commonAncestorContainer.parentElement;
                    }
                    else if ((range.commonAncestorContainer.parentElement?.className === 'ec-composer-code-lines') && (range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-editor-line').length > 0)) {
                        if (range.commonAncestorContainer.className === 'ec-composer-code-editor-line') {
                            line = range.commonAncestorContainer;
                            let line_code = document.createElement('div');
                            line_code.classList.add('ec-composer-code-editor-line-code');
                            line.innerHTML = line_code.outerHTML;
                        }
                        else {
                            line = range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-editor-line')[0];
                        }
                    }
                    else if ((range.commonAncestorContainer.parentElement?.className === 'ec-composer-code-editor') && (range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-lines').length > 0)) {
                        let div = document.createElement('div');
                        div.classList.add('ec-composer-code-editor-line');
                        range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-lines')[0].appendChild(div);
                        line = range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-editor-line')[0];
                    }
                    if (line) {
                        let node_start = document.createTextNode('');
                        range.insertNode(node_start);
                        let sup = document.createElement('sup');
                        sup.setAttribute('data-content', 'ec-composer-code-editor-caret');
                        range.insertNode(node_start);
                        node_start.replaceWith(sup);
                        let line_html = line.innerHTML.replace('<div class="ec-composer-code-editor-line-code">', '').replace('</div>', '');
                        this._format_string(line_html, line.closest('.ec-composer-code-editor').getAttribute('data-type'), (html) => {
                            let line_code = document.createElement('div');
                            line_code.classList.add('ec-composer-code-editor-line-code');
                            line_code.innerHTML = (spaces_before > 0) ? '<span class="ec-code-whitespace">&nbsp;</span>'.repeat(spaces_before) + html : html;
                            line.innerHTML = line_code.outerHTML;
                            if (line.querySelector('sup[data-content="ec-composer-code-editor-caret"]')) {
                                line.querySelector('sup[data-content="ec-composer-code-editor-caret"]').replaceWith(node_start);
                                let nodes = this._nodes_list(line);
                                let new_range = document.createRange();
                                new_range.setStart(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                new_range.setEnd(nodes[Array.from(nodes).indexOf(node_start)], 0);
                                if (selection) {
                                    selection.removeAllRanges();
                                    selection.addRange(new_range);
                                }
                            }
                            let editor = line.closest('.ec-composer-code-editor');
                            let element_id = params.selector.getElementsByClassName('ec-composer-code-container')[0].getAttribute('data-element');
                            if (element_id) {
                                params.selector.getElementsByClassName('ec-composer-code-container')[0].classList.add('ec-composer-editor-mode');
                                Classes$1.Timer.schedule_event('update_html', () => {
                                    params.selector.getElementsByClassName('ec-composer-code-container')[0].classList.remove('ec-composer-editor-mode');
                                }, 5000);
                                if (editor.getAttribute('data-type') === 'html') {
                                    let html_code = line.closest('.ec-composer-code-lines').innerText;
                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                        let idocument = iframe_template[0].contentDocument;
                                        if (idocument !== null) {
                                            idocument.querySelector('.ec-element-content-active .ec-element-content-data').innerHTML = sanitize_code(html_code);
                                        }
                                    }
                                }
                                else {
                                    let css_code = line.closest('.ec-composer-code-lines').textContent;
                                    let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                    if (iframe_template[0] instanceof HTMLIFrameElement) {
                                        let idocument = iframe_template[0].contentDocument;
                                        if (idocument !== null) {
                                            let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                            if ((typeof element_style !== 'undefined') && element_style) {
                                                element_style.innerHTML = sanitize_code(css_code);
                                                let backup = new Classes$1.Backup();
                                                backup.update_css_element_id(element_id, params, element_style.textContent);
                                                setTimeout(() => {
                                                    let element_name = idocument.querySelector('.ec-element-content-active')?.getAttribute('data-name');
                                                    let name_space = Object.getOwnPropertyDescriptor(elements$2, 'ResourcesElements' + element_name.charAt(0).toUpperCase() + element_name.substring(1))?.value.Resources.Elements;
                                                    let key = Object.keys(name_space)[0];
                                                    let element_class = new name_space[key]();
                                                    let element_options = element_class.get_options(params);
                                                    if (element_options.desktop.length > 0) {
                                                        let desktop_properties_list = {};
                                                        let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                                        if (iframe_template[0] instanceof HTMLIFrameElement) {
                                                            let idocument = iframe_template[0].contentDocument;
                                                            if (idocument !== null) {
                                                                let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                                if ((typeof element_style !== 'undefined') && element_style) {
                                                                    let style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                                    if ((typeof style !== 'undefined') && style) {
                                                                        let sheet = style.sheet;
                                                                        if (sheet !== null) {
                                                                            if (sheet.cssRules.length > 0) {
                                                                                for (let rule of sheet.cssRules) {
                                                                                    if (typeof rule.media === 'undefined') {
                                                                                        if (rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"]') {
                                                                                            let style = rule.style;
                                                                                            for (let property of rule.style) {
                                                                                                if (typeof desktop_properties_list['desktop'] !== 'undefined') {
                                                                                                    desktop_properties_list['desktop'][property] = style.getPropertyValue(property);
                                                                                                }
                                                                                                else {
                                                                                                    desktop_properties_list['desktop'] = {
                                                                                                        [property]: style.getPropertyValue(property)
                                                                                                    };
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        let html = get_element_options(element_options, desktop_properties_list, params, 'desktop');
                                                        if (typeof html !== 'undefined') {
                                                            params.selector.getElementsByClassName('ec-sections')[0].innerHTML = html;
                                                        }
                                                    }
                                                    if (element_options.mobile.length > 0) {
                                                        let mobile_properties_list = {};
                                                        let iframe_template = params.selector.getElementsByClassName('ec-composer-template-container');
                                                        if (iframe_template[0] instanceof HTMLIFrameElement) {
                                                            let idocument = iframe_template[0].contentDocument;
                                                            if (idocument !== null) {
                                                                let element_style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                                if ((typeof element_style !== 'undefined') && element_style) {
                                                                    let style = iframe_template[0].contentDocument?.head.querySelector('style[data-element="' + element_id + '"]');
                                                                    if ((typeof style !== 'undefined') && style) {
                                                                        let sheet = style.sheet;
                                                                        if (sheet !== null) {
                                                                            if (sheet.cssRules.length > 0) {
                                                                                for (let rule of sheet.cssRules) {
                                                                                    if (typeof rule.media !== 'undefined') {
                                                                                        if (rule.conditionText.replaceAll(' ', '').search('(max-width:600px)') > -1) {
                                                                                            if (rule.cssRules.length > 0) {
                                                                                                for (let media_rule of rule.cssRules) {
                                                                                                    if (media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"]') {
                                                                                                        let style = media_rule.style;
                                                                                                        for (let property of media_rule.style) {
                                                                                                            if (typeof mobile_properties_list['mobile'] !== 'undefined') {
                                                                                                                mobile_properties_list['mobile'][property] = style.getPropertyValue(property);
                                                                                                            }
                                                                                                            else {
                                                                                                                mobile_properties_list['mobile'] = {
                                                                                                                    [property]: style.getPropertyValue(property)
                                                                                                                };
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        let html = get_element_options(element_options, mobile_properties_list, params, 'mobile');
                                                        if (typeof html !== 'undefined') {
                                                            params.selector.getElementsByClassName('ec-sections')[1].innerHTML = html;
                                                        }
                                                    }
                                                }, 5000);
                                            }
                                        }
                                    }
                                }
                            }
                            show_index(editor);
                        });
                    }
                }
            }
        };
        replaceStr(str) {
            return str
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }
        remove_custom_tags = (parent, list) => {
            if (!parent) {
                return list;
            }
            if (parent.childNodes.length > 0) {
                let node_string = '';
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        node_string += node.textContent;
                    }
                    else {
                        node_string += this.remove_custom_tags(node, list);
                    }
                }
                list += node_string;
            }
            return list;
        };
        _enter = (params) => {
            let iframe = params.selector.getElementsByClassName('ec-composer-editor-active')[0];
            let cwindow = iframe.contentWindow;
            if (cwindow) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let range = selection.getRangeAt(0);
                    let llines = range.commonAncestorContainer.parentElement.closest('.ec-composer-code-lines')?.getElementsByClassName('ec-composer-code-editor-line');
                    if (typeof llines !== 'undefined') {
                        let line_index = Array.from(llines).indexOf.call(llines, range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line'));
                        let before = (typeof llines[line_index] !== 'undefined') ? this._space_before(llines[line_index].getElementsByClassName('ec-composer-code-editor-line-code')[0].childNodes) : { spaces: 0, complete: 0 };
                        if (llines[line_index].outerHTML.split('ec-code-tag-start-open').length > llines[line_index].outerHTML.split('ec-code-tag-end-open').length) {
                            before.spaces = before.spaces + 4;
                        }
                        if (llines[line_index].closest('.ec-composer-code-editor')?.getAttribute('data-type') === 'css') {
                            if (Array.from(llines[line_index].getElementsByClassName('ec-composer-code-editor-line-code')[0].childNodes).find(child => (child.nodeType === Node.ELEMENT_NODE) && ['ec-code-css-curly-bracket-open', 'ec-code-whitespace'].includes(child.className))) {
                                if ((before.spaces > 3) && llines[line_index].getElementsByClassName('ec-composer-code-editor-line-code')[0].innerHTML.indexOf('ec-code-css-curly-bracket-open') > 0) {
                                    before = { spaces: 8, complete: 1 };
                                }
                                else {
                                    before = (before.spaces > 4) ? { spaces: 8, complete: 1 } : { spaces: 4, complete: 1 };
                                }
                            }
                        }
                        setTimeout(() => {
                            this._process_line(params, before.spaces);
                        }, 1);
                    }
                    else if (range.commonAncestorContainer.parentElement?.className === 'ec-composer-code-editor') {
                        setTimeout(() => {
                            show_index(range.commonAncestorContainer.parentElement);
                        }, 1);
                    }
                }
            }
        };
        _input = (e, params) => {
            if (e.inputType === 'insertParagraph') {
                let target = e.target;
                if (target.className === 'ec-composer-code-lines') {
                    setTimeout(() => {
                        let index = target.closest('.ec-composer-code-editor').getElementsByClassName('ec-composer-code-index')[0];
                        let lines = target;
                        index.scrollTop = lines.scrollTop;
                    }, 100);
                }
            }
            if ((e.inputType === 'deleteContentBackward') || (e.inputType === 'insertParagraph') || (e.inputType === 'insertFromPaste')) {
                return;
            }
            setTimeout(() => {
                this._process_line(params);
            }, 1);
        };
        _delete = (params) => {
            let iframe = params.selector.getElementsByClassName('ec-composer-editor-active')[0];
            let cwindow = iframe.contentWindow;
            if (cwindow) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let range = selection.getRangeAt(0);
                    if (range.startContainer.parentElement.getBoundingClientRect().y !== range.endContainer.parentElement.getBoundingClientRect().y) {
                        setTimeout(() => {
                            this._reset_lines(range);
                        }, 10);
                    }
                }
            }
            setTimeout(() => {
                this._process_line(params);
            }, 1);
        };
        _delete2 = (params) => {
            let iframe = params.selector.getElementsByClassName('ec-composer-editor-active')[0];
            let cwindow = iframe.contentWindow;
            if (cwindow) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let range = selection.getRangeAt(0);
                    if (range.startContainer.parentElement.getBoundingClientRect().y !== range.endContainer.parentElement.getBoundingClientRect().y) {
                        setTimeout(() => {
                            this._reset_lines(range);
                        }, 10);
                    }
                }
            }
        };
        _paste = (e, params) => {
            let iframe = params.selector.getElementsByClassName('ec-composer-editor-active')[0];
            let cwindow = iframe.contentWindow;
            let clipboard = e.clipboardData;
            if (cwindow && clipboard) {
                let selection = cwindow.getSelection();
                if (selection && (selection.rangeCount > 0)) {
                    let range = selection.getRangeAt(0);
                    let line = range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line');
                    if (line) {
                        let text_node = document.createTextNode(clipboard.getData('text'));
                        range.insertNode(text_node);
                        selection.removeAllRanges();
                        let line_code = line.getElementsByClassName('ec-composer-code-editor-line-code');
                        if (line_code.length > 0) {
                            if (line_code[0].closest('.ec-composer-code-editor').getAttribute('data-type') === 'html') {
                                let format_html_code = new Plugins$1.HtmlFormatter();
                                let params = {
                                    lines: false,
                                    spaces: false
                                };
                                format_html_code.format(params, this._html_to_plain(line_code[0].innerHTML))
                                    .then((html) => {
                                    line_code[0].innerHTML = html;
                                })
                                    .catch((error) => {
                                    console.error(error);
                                });
                            }
                            else {
                                let format_css_code = new Plugins$1.CssFormatter();
                                let params = {
                                    lines: false,
                                    spaces: false
                                };
                                format_css_code.format(params, this._html_to_plain(line_code[0].innerHTML))
                                    .then((html) => {
                                    line_code[0].innerHTML = html;
                                })
                                    .catch((error) => {
                                    console.error(error);
                                });
                            }
                        }
                    }
                }
            }
        };
        _reset_lines = (range) => {
            let llines = range.commonAncestorContainer.parentElement.getElementsByClassName('ec-composer-code-editor-line');
            let line = null;
            if (range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line')) {
                line = range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor-line');
            }
            else if (range.commonAncestorContainer.parentElement?.className === 'ec-composer-code-editor-line') {
                line = range.commonAncestorContainer.parentElement;
            }
            if (llines.length > 0) {
                for (let lline of llines) {
                    if (line && (line.isSameNode(lline))) {
                        continue;
                    }
                    if (lline.childNodes[0].nodeName !== 'DIV') {
                        lline.remove();
                    }
                    else {
                        if ((lline.childNodes[0].childNodes.length === 1) && !lline.childNodes[0].childNodes[0].textContent) {
                            lline.remove();
                        }
                    }
                }
                show_index(range.commonAncestorContainer.parentElement.closest('.ec-composer-code-editor'));
            }
        };
        _nodes_list = (parent, result = []) => {
            if (parent.childNodes && parent.childNodes.length > 0) {
                for (let child of parent.childNodes) {
                    result.push(child);
                    this._nodes_list(child, result);
                }
            }
            return result;
        };
        _space_before(childrens) {
            let before = { spaces: 0, complete: 0 };
            Array.from(childrens).map((child) => {
                if ((child.nodeType === Node.ELEMENT_NODE) && (before.complete < 1)) {
                    if ((child.className === 'ec-code-whitespace')) {
                        if (child.querySelector('sup[data-content="ec-composer-code-editor-caret"]'))
                            before.complete = 1;
                        before.spaces++;
                    }
                    else {
                        before.complete = 1;
                    }
                }
            });
            return before;
        }
        _to_html(html) {
            html = html.replace(/&gt;/g, '>');
            html = html.replace(/&lt;/g, '<');
            html = html.replace(/&quot;/g, '"');
            html = html.replace(/&apos;/g, "'");
            html = html.replace(/&amp;/g, '&');
            return html;
        }
        _html_to_plain(html) {
            let div = document.createElement('div');
            div.innerHTML = html;
            return div.textContent || div.innerText || '';
        }
        _format_string(html, type, func) {
            let caret = html.split('<sup data-content="ec-composer-code-editor-caret"></sup>').shift();
            let caret_pos = 0;
            if (typeof caret !== 'undefined') {
                let div = document.createElement('div');
                div.textContent = caret;
                caret_pos = this._html_to_plain(div.textContent)?.length;
            }
            let plain_text = this._html_to_plain(html);
            if (type === 'css') {
                if ((plain_text.length > 4) && !plain_text.substring(0, 4).trim() && (plain_text.substring(4, 5) === '}')) {
                    caret_pos = 1;
                }
            }
            let format_html_code = (type === 'html') ? new Plugins$1.HtmlFormatter() : new Plugins$1.CssFormatter();
            let params = {
                lines: false,
                spaces: false
            };
            format_html_code.format(params, plain_text)
                .then((html) => {
                if (!html) {
                    html = html + '<sup data-content="ec-composer-code-editor-caret"></sup><br>';
                    func(html);
                }
                else {
                    let dom_parser = new DOMParser();
                    let nodes_list = dom_parser.parseFromString(html, 'text/html');
                    this._text_count = 0;
                    let new_html = this._add_caret(nodes_list.getElementsByTagName('body')[0], caret_pos, '');
                    func(new_html);
                }
            })
                .catch((error) => {
                console.error(error);
            });
            return html;
        }
        _add_caret(parent, caret_pos, content) {
            if (!parent) {
                return content;
            }
            if (parent.childNodes.length > 0) {
                let node_string = '';
                let node_end = '';
                let html_node = parent;
                if (parent.nodeName !== 'BODY') {
                    node_string = html_node.outerHTML.split('>').shift() + '>';
                    node_end = '<' + html_node.outerHTML.slice(html_node.outerHTML.lastIndexOf('<') + 1);
                }
                for (let node of parent.childNodes) {
                    if (node.nodeName === '#text') {
                        let characters = '';
                        for (var t = 0; t < node.textContent.length; t++) {
                            if (caret_pos === 0) {
                                if (caret_pos === this._text_count) {
                                    characters += '<sup data-content="ec-composer-code-editor-caret"></sup>';
                                }
                            }
                            characters += node.textContent[t];
                            this._text_count++;
                            if (caret_pos !== 0) {
                                if (caret_pos === this._text_count) {
                                    characters += '<sup data-content="ec-composer-code-editor-caret"></sup>';
                                }
                            }
                        }
                        node_string += characters;
                    }
                    else {
                        node_string += this._add_caret(node, caret_pos, content);
                    }
                }
                node_string += node_end;
                content += node_string;
            }
            return content;
        }
    }
    Components.Code = Code;
})(Components$8 = Components$8 || (Components$8 = {}));

var Components$7;
(function (Components) {
    class Content {
        get_events(params) {
            return [
                {
                    action: 'mousedown',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        let target = e.target;
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container');
                        let cwindow = iframe[0].contentWindow;
                        if (cwindow) {
                            if (cwindow.getSelection) {
                                cwindow.getSelection().removeAllRanges();
                            }
                        }
                        if (target.closest('.ec-composer-template-content-move-button')) {
                            e.preventDefault();
                            let lines = target.closest('.ec-composer-template').getElementsByClassName('ec-composer-template-content-line');
                            let tlines = lines.length;
                            let c = 0;
                            do {
                                let drops = document.createElement('div');
                                drops.classList.add('ec-composer-template-content-line-drop');
                                drops.innerHTML = params.icons('unfold_less');
                                lines[c].insertAdjacentElement('afterend', drops);
                                c++;
                            } while (c < tlines);
                            let line = target.closest('.ec-composer-template-content-line');
                            let cline = line.cloneNode(true);
                            line.classList.add('ec-composer-template-content-line-temp');
                            cline.setAttribute('data-top', (e.clientY - line.getBoundingClientRect().y));
                            cline.classList.add('ec-composer-template-content-line-drag-active');
                            cline.style.opacity = 0;
                            target.closest('.ec-composer-template').appendChild(cline);
                            if (iframe[0] instanceof HTMLIFrameElement) {
                                if (cwindow.document.getElementsByClassName('ec-element-content-active').length > 0) {
                                    let active = cwindow.document.getElementsByClassName('ec-element-content-active')[0];
                                    active.classList.remove('ec-element-content-active');
                                }
                                iframe[0].classList.add('ec-composer-template-container-active');
                                let drops = document.createElement('div');
                                drops.classList.add('ec-composer-template-content-line-drop');
                                drops.innerHTML = params.icons('unfold_less');
                                cwindow.document.getElementsByClassName('ec-composer-template')[0].insertAdjacentElement('afterbegin', drops);
                            }
                        }
                        else if (target.closest('.ec-composer-element-move-button')) {
                            e.preventDefault();
                            if (target.closest('.ec-composer-template').getElementsByClassName('ec-composer-template-cell-drop').length < 1) {
                                let cells = target.closest('.ec-composer-template').querySelectorAll('.ec-composer-template .ec-composer-template-cell');
                                if (cells.length > 0) {
                                    let tcells = cells.length;
                                    let c = 0;
                                    do {
                                        let drops = document.createElement('div');
                                        drops.classList.add('ec-composer-template-cell-drop');
                                        drops.innerHTML = params.icons('unfold_less');
                                        cells[c].insertAdjacentElement('afterBegin', drops);
                                        c++;
                                    } while (c < tcells);
                                }
                                let contents = target.closest('.ec-composer-template').querySelectorAll('.ec-composer-template .ec-element-content');
                                if (contents.length > 0) {
                                    let tcontents = contents.length;
                                    let co = 0;
                                    do {
                                        let drops = document.createElement('div');
                                        drops.classList.add('ec-composer-template-cell-drop');
                                        drops.innerHTML = params.icons('unfold_less');
                                        contents[co].insertAdjacentElement('afterEnd', drops);
                                        co++;
                                    } while (co < tcontents);
                                }
                            }
                            let element = target.closest('.ec-element-content');
                            let celement = element.cloneNode(true);
                            element.classList.add('ec-element-content-temp');
                            let element_rect = element.getBoundingClientRect();
                            celement.setAttribute('data-top', (e.clientY - element_rect.y));
                            celement.setAttribute('data-left', (e.clientX - element_rect.x));
                            celement.classList.add('ec-composer-element-drag-active');
                            celement.style.opacity = 0;
                            celement.style.width = element_rect.width;
                            celement.style.height = element_rect.height;
                            target.closest('body').appendChild(celement);
                            if (iframe[0] instanceof HTMLIFrameElement) {
                                if (cwindow.document.getElementsByClassName('ec-element-content-active').length > 0) {
                                    let active = cwindow.document.getElementsByClassName('ec-element-content-active')[0];
                                    active.classList.remove('ec-element-content-active');
                                }
                                iframe[0].classList.add('ec-composer-template-container-active');
                            }
                        }
                        if (target.closest('.ec-composer-element-buttons-group') || target.closest('.ec-composer-template-content-buttons-group') || target.closest('.ec-composer-template-content-move-button')) {
                            if (target.closest('.ec-composer-template').getElementsByClassName('ec-element-content-active').length > 0) {
                                unselect_element(params);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousemove',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        if (e.buttons === 1) {
                            let target = e.target;
                            if (target) {
                                let iframe_body = target.closest('body');
                                if (iframe_body?.getElementsByClassName('ec-composer-template-content-line-drag-active').length > 0) {
                                    e.preventDefault();
                                    let line = iframe_body?.getElementsByClassName('ec-composer-template-content-line-drag-active');
                                    if (line.length > 0) {
                                        let top = line[0].getAttribute('data-top');
                                        if (top !== null) {
                                            let drag_line = ((e.clientY - parseInt(top)) + iframe_body?.scrollTop);
                                            line[0].style.top = drag_line + 'px';
                                            line[0].style.opacity = '0.3';
                                            if (iframe_body?.getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                                                Array.from(iframe_body?.getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                                                    item.classList.remove('ec-composer-template-content-line-drop-active');
                                                });
                                                let found = 0;
                                                Array.from(iframe_body?.getElementsByClassName('ec-composer-template-content-line-drop')).forEach((element) => {
                                                    if (found > 0)
                                                        return;
                                                    if ((line[0].getBoundingClientRect().y <= element.getBoundingClientRect().y) && ((line[0].getBoundingClientRect().y + line[0].getBoundingClientRect().height) >= element.getBoundingClientRect().y)) {
                                                        element.classList.add('ec-composer-template-content-line-drop-active');
                                                        found++;
                                                    }
                                                });
                                            }
                                        }
                                    }
                                }
                                else if (params.selector.getElementsByClassName('ec-element-drag-active').length > 0) {
                                    let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    let client_rect = iframe.getBoundingClientRect();
                                    move_element(params.selector, (client_rect.y + e.clientY), (client_rect.x + e.clientX), params.icons('unfold_less'));
                                }
                                else if (params.selector.getElementsByClassName('ec-row-drag-active').length > 0) {
                                    let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    let client_rect = iframe.getBoundingClientRect();
                                    move_structure(params.selector, (client_rect.y + e.clientY), (client_rect.x + e.clientX), params.icons('unfold_less'));
                                }
                                else if (iframe_body?.getElementsByClassName('ec-composer-element-drag-active').length > 0) {
                                    e.preventDefault();
                                    let body_rect = iframe_body.getBoundingClientRect();
                                    let element = iframe_body?.getElementsByClassName('ec-composer-element-drag-active')[0];
                                    let drag_top = ((e.clientY - parseInt(element.getAttribute('data-top'))) + iframe_body?.scrollTop);
                                    let drag_left = ((e.clientX - parseInt(element.getAttribute('data-left'))) + iframe_body?.scrollLeft);
                                    element.style.top = drag_top + 'px';
                                    element.style.left = drag_left + 'px';
                                    element.style.opacity = '0.3';
                                    let element_rect = element.getBoundingClientRect();
                                    if (iframe_body?.getElementsByClassName('ec-composer-template-cell-drop').length > 0) {
                                        Array.from(iframe_body?.getElementsByClassName('ec-composer-template-cell-drop')).map((drop) => {
                                            drop.classList.remove('ec-composer-template-cell-drop-active');
                                        });
                                        let found = 0;
                                        Array.from(iframe_body?.getElementsByClassName('ec-composer-template-cell-drop')).forEach((drop) => {
                                            if (found > 0)
                                                return;
                                            let drop_rect = drop.getBoundingClientRect();
                                            if ((element_rect.y <= (body_rect.x + drop_rect.y)) && ((element_rect.y + element_rect.height) >= (body_rect.x + drop_rect.y)) && ((body_rect.x + drop_rect.x) <= e.clientX) && (e.clientX <= (body_rect.x + drop_rect.x + drop_rect.width))) {
                                                drop.classList.add('ec-composer-template-cell-drop-active');
                                                found++;
                                            }
                                        });
                                        Array.from(iframe_body?.getElementsByClassName('ec-composer-template-cell-placeholder')).forEach((placeholder) => {
                                            if (found > 0)
                                                return;
                                            let placeholder_rect = placeholder.getBoundingClientRect();
                                            if ((element_rect.y >= placeholder_rect.y) && ((element_rect.y + element_rect.height) >= placeholder_rect.y) && ((body_rect.x + placeholder_rect.x) <= e.clientX) && (e.clientX <= (body_rect.x + placeholder_rect.x + placeholder_rect.width))) {
                                                placeholder.closest('.ec-composer-template-cell').getElementsByClassName('ec-composer-template-cell-drop')[0].classList.add('ec-composer-template-cell-drop-active');
                                                found++;
                                            }
                                        });
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mouseup',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        e.preventDefault();
                        reset_contents(params);
                        reset_elements(params);
                        reset_structures(params);
                    },
                    capture: false
                }, {
                    action: 'mouseup',
                    element: '.ec-composer',
                    target: (e) => {
                        e.preventDefault();
                        reset_contents(params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target.closest('.ec-composer-template-content-new-button')) {
                            target.closest('.ec-composer-template-content-line').classList.add('ec-composer-template-content-line-active');
                            params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-show');
                            params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-rows-modal"]').classList.add('ec-composer-modal-show');
                        }
                        else if (target.closest('.ec-composer-template-content-save-button')) {
                            Array.from(target.closest('.ec-composer-template').getElementsByClassName('ec-composer-template-content-line')).map(line => {
                                line.classList.remove('ec-composer-template-content-line-selected');
                            });
                            target.closest('.ec-composer-template-content-line').classList.add('ec-composer-template-content-line-selected');
                            params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-show');
                            let create_module = params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]');
                            create_module.getElementsByClassName('ec-menu-module-name')[0].value = '';
                            create_module.getElementsByClassName('ec-menu-module-description')[0].value = '';
                            create_module.getElementsByClassName('ec-module-advanced-fields')[0].classList.remove('ec-module-advanced-fields-expanded');
                            create_module.getElementsByClassName('ec-module-category-button')[0].removeAttribute('data-id');
                            create_module.querySelectorAll('.ec-module-category-button > span')[0].textContent = params.words('uncategorized');
                            create_module.classList.add('ec-composer-modal-show');
                            create_module.getElementsByClassName('ec-cover-uploaded-files')[0].classList.remove('ec-cover-uploaded-files-show');
                            create_module.getElementsByClassName('ec-save-module-button')[0].classList.remove('ec-saving-module-button');
                            create_module.getElementsByClassName('ec-composer-modal-message')[0].classList.remove('ec-composer-modal-message-success', 'ec-composer-modal-message-error');
                        }
                        else if (target.closest('.ec-composer-template-content-delete-button')) {
                            target.closest('.ec-composer-template-content-line').classList.add('ec-hide-content');
                            setTimeout(() => {
                                target.closest('.ec-composer-template-content-line').remove();
                            }, 300);
                        }
                        else if (target.closest('.ec-composer-element-clone-button')) {
                            let element_html = target.closest('.ec-element-content').getElementsByClassName('ec-element-content-data')[0].outerHTML;
                            let element_id = target.closest('.ec-element-content').getAttribute('data-id');
                            let new_element_id = 'ec-element-' + Date.now();
                            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            if (iframe) {
                                let iframeDocument = iframe.contentDocument;
                                if (iframeDocument !== null) {
                                    let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                    if (style) {
                                        let new_style = style.outerHTML.replaceAll(element_id, new_element_id);
                                        style.insertAdjacentHTML('afterend', new_style);
                                        setTimeout(() => {
                                            let backup = new Classes$1.Backup();
                                            backup.update_css_element_id(new_element_id, params, style.innerHTML.replaceAll(element_id, new_element_id), false);
                                        }, 1000);
                                    }
                                }
                            }
                            let buttons = '';
                            let gbuttons = document.createElement('div');
                            gbuttons.classList.add('ec-composer-element-buttons-group');
                            let mbutton = document.createElement('button');
                            mbutton.setAttribute('type', 'button');
                            mbutton.classList.add('ec-composer-element-move-button');
                            mbutton.innerHTML = params.icons('drag');
                            gbuttons.innerHTML += mbutton.outerHTML;
                            let clone = document.createElement('button');
                            clone.setAttribute('type', 'button');
                            clone.classList.add('ec-composer-element-clone-button');
                            clone.innerHTML = params.icons('backup_table');
                            gbuttons.innerHTML += clone.outerHTML;
                            let delement = document.createElement('button');
                            delement.setAttribute('type', 'button');
                            delement.classList.add('ec-composer-element-delete-button');
                            delement.innerHTML = params.icons('trash');
                            gbuttons.innerHTML += delement.outerHTML;
                            buttons += gbuttons.outerHTML;
                            let div = document.createElement('div');
                            div.innerHTML = '<div class="ec-element-content" data-id="' + new_element_id + '" data-name="' + target.closest('.ec-element-content').getAttribute('data-name') + '">'
                                + element_html
                                + buttons
                                + '</div>';
                            target.closest('.ec-element-content').insertAdjacentElement('afterend', div.firstChild);
                        }
                        else if (target.closest('.ec-composer-element-delete-button')) {
                            let cell = target.closest('.ec-composer-template-cell');
                            target.closest('.ec-element-content').classList.add('ec-hide-content');
                            setTimeout(() => {
                                let element_id = target.closest('.ec-element-content').getAttribute('data-id');
                                target.closest('.ec-element-content').remove();
                                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                if (iframe) {
                                    let iframeDocument = iframe.contentDocument;
                                    if (iframeDocument !== null) {
                                        let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                        if (style) {
                                            style.remove();
                                        }
                                    }
                                }
                                if (cell.getElementsByClassName('ec-element-content').length < 1) {
                                    let placeholder = document.createElement('a');
                                    placeholder.setAttribute('href', '#');
                                    placeholder.classList.add('ec-composer-template-cell-placeholder');
                                    placeholder.classList.add('ec-show-content');
                                    let text = document.createElement('span');
                                    text.classList.add('ec-composer-template-cell-placeholder-text');
                                    text.innerText = params.words('drag_elements_here');
                                    placeholder.innerHTML = '<span>'
                                        + params.icons('place_item', { 'icon_class': 'ec-composer-template-cell-placeholder-icon' })
                                        + text.outerHTML
                                        + '</span>';
                                    cell.innerHTML = placeholder.outerHTML;
                                    setTimeout(() => {
                                        cell.getElementsByClassName('ec-composer-template-cell-placeholder')[0].classList.remove('ec-show-content');
                                    }, 300);
                                    if (target.closest('.ec-element-content-active')) {
                                        let options = params.selector.getElementsByClassName('ec-composer-element-options')[0];
                                        options.classList.remove('ec-composer-element-options-show');
                                        options.classList.add('ec-composer-element-options-hide');
                                        if (params.selector.getElementsByClassName('ec-ste-show').length > 0) {
                                            params.selector.getElementsByClassName('ec-ste-show')[0].classList.remove('ec-ste-show');
                                        }
                                        params.selector.getElementsByClassName('ec-template-code-button')[0].classList.add('ec-template-code-hide-button');
                                        params.selector.getElementsByClassName('ec-composer-container')[0].classList.remove('ec-composer-container-template-and-code');
                                        params.selector.getElementsByClassName('ec-composer-code-container')[0].removeAttribute('style');
                                        params.selector.getElementsByClassName('ec-composer-template-container')[0].removeAttribute('style');
                                    }
                                }
                            }, 300);
                        }
                        if (params.selector.getElementsByClassName('ec-ste-link-box').length > 0) {
                            params.selector.getElementsByClassName('ec-ste-link-box')[0].remove();
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-modal .ec-row > div',
                    target: (e) => {
                        e.preventDefault();
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let target = e.target;
                        if (target instanceof HTMLElement) {
                            let format = target.getAttribute('data-format');
                            if (format !== null) {
                                let element = get_content({
                                    'format': ['1', '2', '3', '4', '5', '6'].includes(format) ? parseInt(format) : 1
                                });
                                element.classList.add('ec-show-content');
                                iframe.contentWindow.document.getElementsByClassName('ec-composer-template-content-line-active')[0].insertAdjacentElement('afterend', element);
                                iframe.contentWindow.document.getElementsByClassName('ec-composer-template-content-line-active')[0].classList.remove('ec-composer-template-content-line-active');
                                params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-hide');
                                params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-rows-modal"]').classList.add('ec-composer-modal-hide');
                                setTimeout(() => {
                                    params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.remove('ec-composer-shadow-hide');
                                    params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-rows-modal"]').classList.remove('ec-composer-modal-hide');
                                    params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.remove('ec-composer-shadow-show');
                                    params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-rows-modal"]').classList.remove('ec-composer-modal-show');
                                    iframe.contentWindow.document.getElementsByClassName('ec-show-content')[0].classList.remove('ec-show-content');
                                }, 300);
                            }
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Content = Content;
})(Components$7 = Components$7 || (Components$7 = {}));

var Components$6;
(function (Components) {
    class Modals {
        get_events(params) {
            return [
                {
                    action: 'click',
                    target: (e) => {
                        let target = e.target;
                        if (target.closest('.ec-composer-shadow')) {
                            if (target.closest('.ec-composer-shadow').getElementsByClassName('ec-composer-modal-select-dropdown-show').length > 0) {
                                target.closest('.ec-composer-shadow').getElementsByClassName('ec-composer-modal-select-dropdown-show')[0].classList.remove('ec-composer-modal-select-dropdown-show');
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-template-hide-modal-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.add('ec-composer-shadow-hide');
                        let modal = target.closest('.ec-composer-modal');
                        if (modal) {
                            modal.classList.add('ec-composer-modal-hide');
                            setTimeout(() => {
                                params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.remove('ec-composer-shadow-hide');
                                modal.classList.remove('ec-composer-modal-hide');
                                params.selector.getElementsByClassName('ec-composer-shadow')[0].classList.remove('ec-composer-shadow-show');
                                modal.classList.remove('ec-composer-modal-show');
                            }, 300);
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-modal .ec-composer-modal-select-dropdown .ec-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        setTimeout(() => {
                            target.closest('.ec-composer-modal-select-dropdown').classList.add('ec-composer-modal-select-dropdown-show');
                        }, 100);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-modal .ec-composer-modal-select-dropdown .ec-composer-modal-select-menu a',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        let dropdown = target.closest('.ec-composer-modal-select-dropdown');
                        dropdown.getElementsByClassName('ec-button')[0].setAttribute('data-id', target.getAttribute('data-id'));
                        dropdown.getElementsByTagName('span')[0].textContent = target.textContent;
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Modals = Modals;
})(Components$6 = Components$6 || (Components$6 = {}));

var Components$5;
(function (Components) {
    class Elements {
        get_events(params) {
            return [
                {
                    action: 'mousedown',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        new Plugins$1.Small_editor().get_styles(e, params);
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    element: '.ec-element',
                    target: (e) => {
                        e.preventDefault();
                        if (e.buttons === 1) {
                            let target = e.target;
                            Array.from(params.selector.getElementsByClassName('ec-element')).map((element) => {
                                element.classList.remove('ec-element-temp', 'ec-element-temp-show');
                            });
                            target.classList.add('ec-element-temp');
                            let element = target.cloneNode(true);
                            let cloned = target.getBoundingClientRect();
                            element.classList.add('ec-element-drag-active');
                            let top = (e.clientY - cloned.y);
                            let left = (e.clientX - cloned.x);
                            element.setAttribute('data-top', top);
                            element.setAttribute('data-left', left);
                            element.style.width = cloned.width + 'px';
                            element.style.height = cloned.height + 'px';
                            element.style.top = (e.clientY - top) + 'px';
                            element.style.left = (e.clientX - left) + 'px';
                            target.closest('.ec-composer').insertAdjacentElement('beforeend', element);
                        }
                    },
                    capture: false
                }, {
                    action: 'mousemove',
                    target: (e) => {
                        if (e.buttons === 1) {
                            if (params.selector.getElementsByClassName('ec-element-drag-active').length > 0) {
                                e.preventDefault();
                                move_element(params.selector, e.clientY, e.clientX, params.icons('unfold_less'));
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mouseup',
                    target: (e) => {
                        e.preventDefault();
                        reset_elements(params);
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Elements = Elements;
})(Components$5 = Components$5 || (Components$5 = {}));

var Components$4;
(function (Components) {
    class Structures {
        get_events(params) {
            return [
                {
                    action: 'mousedown',
                    element: '.ec-sections .ec-rows > .ec-row',
                    target: (e) => {
                        e.preventDefault();
                        if (e.buttons === 1) {
                            let target = e.target;
                            target.classList.add('ec-row-temp');
                            let structure = target.cloneNode(true);
                            let cloned = target.getBoundingClientRect();
                            structure.classList.add('ec-row-drag-active');
                            let top = (e.clientY - cloned.y);
                            let left = (e.clientX - cloned.x);
                            structure.setAttribute('data-top', top.toString());
                            structure.setAttribute('data-left', left.toString());
                            structure.style.width = cloned.width + 'px';
                            structure.style.height = cloned.height + 'px';
                            structure.style.top = (e.clientY - top) + 'px';
                            structure.style.left = (e.clientX - left) + 'px';
                            target.closest('.ec-composer').insertAdjacentElement('beforeend', structure);
                            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            let lines = iframe.contentWindow.document.getElementsByClassName('ec-composer-template-content-line');
                            for (let line of lines) {
                                let drops = document.createElement('div');
                                drops.classList.add('ec-composer-template-content-line-drop');
                                drops.innerHTML = params.icons('unfold_less');
                                line.insertAdjacentElement('afterend', drops);
                            }
                            let drops = document.createElement('div');
                            drops.classList.add('ec-composer-template-content-line-drop');
                            drops.innerHTML = params.icons('unfold_less');
                            iframe.contentWindow.document.getElementsByClassName('ec-composer-template')[0].insertAdjacentElement('afterbegin', drops);
                        }
                    },
                    capture: false
                }, {
                    action: 'mousemove',
                    target: (e) => {
                        if (e.buttons === 1) {
                            if (params.selector.getElementsByClassName('ec-row-drag-active').length > 0) {
                                e.preventDefault();
                                move_structure(params.selector, e.clientY, e.clientX, params.icons('unfold_less'));
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mouseup',
                    target: (e) => {
                        e.preventDefault();
                        reset_structures(params);
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Structures = Structures;
})(Components$4 = Components$4 || (Components$4 = {}));

var Components$3;
(function (Components) {
    class Options {
        get_events(params) {
            return [
                {
                    action: 'change',
                    element: '.ec-composer .ec-composer-element-options-tabs input',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target) {
                            if (target.classList.contains('ec-composer-element-options-tab-1')) {
                                params.selector.getElementsByClassName('ec-composer-container')[0].classList.add('ec-composer-template-mobile');
                                target.closest('.ec-composer-element-options').getElementsByClassName('ec-composer-element-options-area-body')[0].classList.add('ec-composer-element-mobile-options');
                                params.selector.getElementsByClassName('ec-composer-template-container')[0].style.marginRight = 'auto';
                                params.selector.getElementsByClassName('ec-composer-template-container')[0].style.marginLeft = 'auto';
                            }
                            else {
                                params.selector.getElementsByClassName('ec-composer-container')[0].classList.remove('ec-composer-template-mobile');
                                target.closest('.ec-composer-element-options').getElementsByClassName('ec-composer-element-options-area-body')[0].classList.remove('ec-composer-element-mobile-options');
                                setTimeout(() => {
                                    params.selector.getElementsByClassName('ec-composer-template-container')[0].removeAttribute('style');
                                }, 300);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer .ec-composer-element-options-cancel',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target) {
                            unselect_element(params);
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Options = Options;
})(Components$3 = Components$3 || (Components$3 = {}));

var Components$2;
(function (Components) {
    class Text {
        get_events(params) {
            return [
                {
                    action: 'keydown',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        let target = e.target;
                        if (e.key === 'Enter') {
                            if (target.closest('.ec-element-content-data') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                let childrens = target.closest('.ec-element-content-data')?.children;
                                if (childrens) {
                                    for (let children of childrens) {
                                        if (children.nodeName === 'DIV') {
                                            let paragraph = document.createElement('p');
                                            paragraph.innerHTML = children.innerHTML;
                                            children.replaceWith(paragraph);
                                        }
                                    }
                                }
                            }
                        }
                        else if (e.key === 'Backspace') {
                            if (target.closest('.ec-element-content-data') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                if (target.closest('.ec-element-content-data').childNodes.length < 1) {
                                    e.preventDefault();
                                }
                                let paragraphs = target.closest('.ec-element-content-data').getElementsByTagName('p');
                                if (paragraphs.length < 1) {
                                    let paragraph = document.createElement('p');
                                    paragraph.innerHTML = (target.closest('.ec-element-content-data').innerHTML.length < 1) ? '<br>' : target.closest('.ec-element-content-data').innerHTML;
                                    target.closest('.ec-element-content-data').appendChild(paragraph);
                                }
                            }
                            if (target.closest('.ec-element-content-data[contenteditable="true"]') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                new Plugins$1.Small_editor().get_styles(e, params);
                            }
                        }
                        else if (e.key === 'ArrowUp') {
                            if (target.closest('.ec-element-content-data[contenteditable="true"]') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                new Plugins$1.Small_editor().get_styles(e, params);
                            }
                        }
                        else if (e.key === 'ArrowRight') {
                            if (target.closest('.ec-element-content-data[contenteditable="true"]') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                new Plugins$1.Small_editor().get_styles(e, params);
                            }
                        }
                        else if (e.key === 'ArrowDown') {
                            if (target.closest('.ec-element-content-data[contenteditable="true"]') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                new Plugins$1.Small_editor().get_styles(e, params);
                            }
                        }
                        else if (e.key === 'ArrowLeft') {
                            if (target.closest('.ec-element-content-data[contenteditable="true"]') && (target.closest('.ec-element-content').getAttribute('data-name') === 'text')) {
                                new Plugins$1.Small_editor().get_styles(e, params);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'beforeinput',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        if ((e.inputType === 'insertText') || (e.inputType === 'insertFromPaste')) {
                            if (e.target.closest('.ec-element-content').getAttribute('data-name') === 'text') {
                                if (!e.target.closest('p') && !e.target.closest('li')) {
                                    let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                    let cwindow = iframe.contentWindow;
                                    if (cwindow) {
                                        let selection = cwindow.getSelection();
                                        if (selection && (selection.rangeCount > 0)) {
                                            let range = selection.getRangeAt(0);
                                            if ((range.startContainer.parentElement?.nodeName !== 'P') && (range.startContainer.nodeName !== 'P') && !range.startContainer.parentElement?.closest('p') && (range.startContainer.parentElement?.nodeName !== 'LI') && (range.startContainer.nodeName !== 'LI') && !range.startContainer.parentElement?.closest('li')) {
                                                let p = document.createElement('p');
                                                let br = document.createElement('br');
                                                p.appendChild(br);
                                                range.deleteContents();
                                                range.insertNode(p);
                                                let new_range = document.createRange();
                                                new_range.setStart(p, 0);
                                                new_range.collapse(true);
                                                selection.removeAllRanges();
                                                selection.addRange(new_range);
                                            }
                                        }
                                    }
                                }
                                new Plugins$1.Small_editor().format(e, params);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'input',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            if (target.closest('.ec-color-input')) {
                                let hex = target.value;
                                if (new Plugins$1.Color().is_hex_valid(hex)) {
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            if (target.closest('.ec-color-opacity-filter')) {
                                if (e.buttons === 1) {
                                    target.closest('.ec-color-opacity-filter').classList.add('ec-color-opacity-filter-active');
                                }
                            }
                            else if (target.closest('.ec-color-gradient-filter')) {
                                e.preventDefault();
                                let color = new Plugins$1.Color();
                                color.get_filter_color(e, params, (hex) => {
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                    new PluginsSmallEditorCore.Color().change_text_color(e, params, hex);
                                });
                            }
                            else if (target.closest('.ec-color-gradient-selector')) {
                                e.preventDefault();
                                let color = new Plugins$1.Color();
                                color.get_gradient_color(e, params, (hex) => {
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                    new PluginsSmallEditorCore.Color().change_text_color(e, params, hex);
                                });
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    iframe: '.ec-composer-template-container',
                    target: (e) => {
                        if (params.selector.getElementsByClassName('ec-ste-dropdown-show').length > 0) {
                            e.preventDefault();
                            params.selector.getElementsByClassName('ec-ste-dropdown-show')[0].classList.remove('ec-ste-dropdown-show');
                        }
                        if (params.selector.getElementsByClassName('ec-option-selector-dropdown-show').length > 0) {
                            e.preventDefault();
                            params.selector.getElementsByClassName('ec-option-selector-dropdown-show')[0].classList.remove('ec-option-selector-dropdown-show');
                        }
                        let color = new Plugins$1.Color();
                        color.remove_dropdown(e, params);
                    },
                    capture: false
                }, {
                    action: 'mousemove',
                    target: (e) => {
                        if (e.buttons === 1) {
                            let target = e.target;
                            if (target !== null) {
                                if (params.selector.getElementsByClassName('ec-color-opacity-filter-active').length > 0) {
                                    e.preventDefault();
                                    let color = new Plugins$1.Color();
                                    color.create_opacity(e, params, (hex) => {
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                        new PluginsSmallEditorCore.Color().change_text_color(e, params, hex);
                                    });
                                }
                                else if (target.closest('.ec-color-gradient-filter')) {
                                    e.preventDefault();
                                    let color = new Plugins$1.Color();
                                    color.get_filter_color(e, params, (hex) => {
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                        new PluginsSmallEditorCore.Color().change_text_color(e, params, hex);
                                    });
                                }
                                else if (target.closest('.ec-color-gradient-selector')) {
                                    e.preventDefault();
                                    let color = new Plugins$1.Color();
                                    color.get_gradient_color(e, params, (hex) => {
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                        params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                        new PluginsSmallEditorCore.Color().change_text_color(e, params, hex);
                                    });
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    target: (e) => {
                        let target = e.target;
                        if (params.selector.getElementsByClassName('ec-ste-dropdown-show').length > 0) {
                            e.preventDefault();
                            params.selector.getElementsByClassName('ec-ste-dropdown-show')[0].classList.remove('ec-ste-dropdown-show');
                        }
                        if (params.selector.getElementsByClassName('ec-option-selector-dropdown-show').length > 0) {
                            e.preventDefault();
                            params.selector.getElementsByClassName('ec-option-selector-dropdown-show')[0].classList.remove('ec-option-selector-dropdown-show');
                        }
                        if (target.closest('.ec-ste-text-weights')) {
                            e.preventDefault();
                            new PluginsSmallEditorCore.Font().change_font_weight(e, params);
                        }
                        if (params.selector.getElementsByClassName('ec-color-box').length > 0) {
                            e.preventDefault();
                            let color = new Plugins$1.Color();
                            color.remove_dropdown(e, params);
                            if (target.closest('.ec-color-opacity-filter')) {
                                if (e.buttons === 1) {
                                    target.closest('.ec-color-opacity-filter').classList.add('ec-color-opacity-filter-active');
                                }
                            }
                            else if (target.closest('.ec-color-gradient-filter')) {
                                color.get_filter_color(e, params, (hex) => {
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                });
                            }
                            else if (target.closest('.ec-color-gradient-selector')) {
                                color.get_gradient_color(e, params, (hex) => {
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].style.setProperty('--bgcolor', hex);
                                    params.selector.getElementsByClassName('ec-button-color-active')[0].getElementsByTagName('button')[0].setAttribute('data-color', hex);
                                });
                            }
                        }
                        if (target.closest('.ec-ste-link-box')) {
                            if (target.closest('.ec-ste-link-update-button')) {
                                new PluginsSmallEditorCore.Link().update(e, params);
                            }
                            else if (target.closest('.ec-ste-link-remove-button')) {
                                new PluginsSmallEditorCore.Link().remove(e, params);
                            }
                        }
                        else {
                            if (params.selector.getElementsByClassName('ec-ste-link-box').length > 0) {
                                params.selector.getElementsByClassName('ec-ste-link-box')[0].remove();
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-align-button',
                    target: (e) => {
                        e.preventDefault();
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let range = selection.getRangeAt(0);
                                let parent_element = range.commonAncestorContainer.parentElement;
                                if (parent_element?.closest('.ec-element-content-data')) {
                                    let target = e.target;
                                    if (target) {
                                        if (target.classList.contains('ec-ste-active-button')) {
                                            target.closest('.ec-ste-group-buttons').getElementsByClassName('ec-ste-active-button')[0]?.classList.remove('ec-ste-active-button');
                                            parent_element.style.removeProperty('text-align');
                                        }
                                        else {
                                            target.closest('.ec-ste-group-buttons').getElementsByClassName('ec-ste-active-button')[0]?.classList.remove('ec-ste-active-button');
                                            target.classList.add('ec-ste-active-button');
                                            let direction = target.getAttribute('data-direction');
                                            if (direction) {
                                                let parent = parent_element.closest('p') ? parent_element.closest('p') : parent_element.closest('li');
                                                new Plugins$1.Small_editor().text_align(parent, direction);
                                                parent.closest('.ec-element-content-data').focus();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-format-italic-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target.classList.contains('ec-ste-active-button')) {
                            target.classList.remove('ec-ste-active-button');
                        }
                        else {
                            target.classList.add('ec-ste-active-button');
                        }
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let small_editor = new Plugins$1.Small_editor();
                                let range = selection.getRangeAt(0);
                                small_editor.apply_tags(params, range, 'i');
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-format-underlined-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target.classList.contains('ec-ste-active-button')) {
                            target.classList.remove('ec-ste-active-button');
                        }
                        else {
                            target.classList.add('ec-ste-active-button');
                        }
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let small_editor = new Plugins$1.Small_editor();
                                let range = selection.getRangeAt(0);
                                small_editor.apply_tags(params, range, 'u');
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-format-strikethrough-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target.classList.contains('ec-ste-active-button')) {
                            target.classList.remove('ec-ste-active-button');
                        }
                        else {
                            target.classList.add('ec-ste-active-button');
                        }
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let small_editor = new Plugins$1.Small_editor();
                                let range = selection.getRangeAt(0);
                                small_editor.apply_tags(params, range, 's');
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-list-bulleted-button',
                    target: (e) => {
                        e.preventDefault();
                        let small_editor = new Plugins$1.Small_editor();
                        small_editor.list(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-list-numbered-button',
                    target: (e) => {
                        e.preventDefault();
                        let small_editor = new Plugins$1.Small_editor();
                        small_editor.list(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-add-link-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if (target.classList.contains('ec-ste-active-button')) {
                            target.classList.remove('ec-ste-active-button');
                        }
                        else {
                            target.classList.add('ec-ste-active-button');
                        }
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let small_editor = new Plugins$1.Small_editor();
                                let range = selection.getRangeAt(0);
                                small_editor.apply_tags(params, range, 'a', { 'href': '#' });
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-dropdown .ec-button',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        let dropdown = target.closest('.ec-ste-dropdown');
                        if (dropdown) {
                            setTimeout(() => {
                                dropdown?.classList.add('ec-ste-dropdown-show');
                            }, 100);
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-dropdown .ec-fonts a',
                    target: (e) => {
                        e.preventDefault();
                        new PluginsSmallEditorCore.Font().change_font_family(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-dropdown .ec-ste-text-sizes a',
                    target: (e) => {
                        e.preventDefault();
                        new PluginsSmallEditorCore.Font().change_font_size(e, params);
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-button-color button[type="button"]',
                    target: (e) => {
                        e.preventDefault();
                        new Plugins$1.Color().add_color_box(e, params);
                        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                        let cwindow = iframe.contentWindow;
                        if (cwindow) {
                            let selection = cwindow.getSelection();
                            if (selection && (selection.rangeCount > 0)) {
                                let range = selection.getRangeAt(0);
                                range.commonAncestorContainer.parentElement.closest('.ec-element-content-data').focus();
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-small-text-editor .ec-ste-expand-all-button',
                    target: (e) => {
                        let target = e.target;
                        if (target.closest('.ec-composer-container')?.classList.contains('ec-small-text-editor-expanded')) {
                            target.closest('.ec-composer-container')?.classList.remove('ec-small-text-editor-expanded');
                        }
                        else {
                            target.closest('.ec-composer-container')?.classList.add('ec-small-text-editor-expanded');
                        }
                    },
                    capture: false
                }
            ];
        }
    }
    Components.Text = Text;
})(Components$2 = Components$2 || (Components$2 = {}));

var Components$1;
(function (Components) {
    class Modules {
        get_events(params) {
            return [{
                    action: 'dragover',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if ((target !== null) && target.closest('.ec-cover-upload-box-drop-area')) {
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-start')[0].classList.remove('ec-cover-upload-box-drop-area-show');
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-drop')[0].classList.add('ec-cover-upload-box-drop-area-show');
                        }
                        else if ((target !== null) && target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]')) {
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-drop')[0].classList.remove('ec-cover-upload-box-drop-area-show');
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-start')[0].classList.add('ec-cover-upload-box-drop-area-show');
                        }
                    },
                    capture: false
                }, {
                    action: 'dragleave',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if ((target !== null) && target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]') && !target.closest('.ec-cover-upload-box-drop-area')) {
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-drop')[0].classList.remove('ec-cover-upload-box-drop-area-show');
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-start')[0].classList.add('ec-cover-upload-box-drop-area-show');
                        }
                    },
                    capture: false
                }, {
                    action: 'drop',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        if ((target !== null) && target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]')) {
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-drop')[0].classList.remove('ec-cover-upload-box-drop-area-show');
                            params.selector.getElementsByClassName('ec-cover-upload-box-drop-area-start')[0].classList.add('ec-cover-upload-box-drop-area-show');
                            if (e.dataTransfer.files.length > 0) {
                                params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-file').files = e.dataTransfer.files;
                                params.selector.querySelector('.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-file').dispatchEvent(new Event('change', { bubbles: true, cancelable: true }));
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousedown',
                    target: (e) => {
                        if (e.buttons === 1) {
                            let target = e.target;
                            if (target.classList.contains('ec-module')) {
                                e.preventDefault();
                                Array.from(params.selector.getElementsByClassName('ec-module')).map((module) => {
                                    module.classList.remove('ec-module-temp', 'ec-module-temp-show');
                                });
                                target.classList.add('ec-module-temp');
                                let module = target.cloneNode(true);
                                let cloned = target.getBoundingClientRect();
                                module.classList.add('ec-module-drag-active');
                                let top = (e.clientY - cloned.y);
                                let left = (e.clientX - cloned.x);
                                module.setAttribute('data-top', top.toString());
                                module.setAttribute('data-left', left.toString());
                                module.style.width = cloned.width + 'px';
                                module.style.height = cloned.height + 'px';
                                module.style.top = (e.clientY - top) + 'px';
                                module.style.left = (e.clientX - left) + 'px';
                                target.closest('.ec-composer').insertAdjacentElement('beforeend', module);
                                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                let lines = iframe.contentWindow.document.getElementsByClassName('ec-composer-template-content-line');
                                for (let line of lines) {
                                    let drops = document.createElement('div');
                                    drops.classList.add('ec-composer-template-content-line-drop');
                                    drops.innerHTML = params.icons('unfold_less');
                                    line.insertAdjacentElement('afterend', drops);
                                }
                                let drops = document.createElement('div');
                                drops.classList.add('ec-composer-template-content-line-drop');
                                drops.innerHTML = params.icons('unfold_less');
                                iframe.contentWindow.document.getElementsByClassName('ec-composer-template')[0].insertAdjacentElement('afterbegin', drops);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mousemove',
                    target: (e) => {
                        if (e.buttons === 1) {
                            if (params.selector.getElementsByClassName('ec-module-drag-active').length > 0) {
                                e.preventDefault();
                                let module = params.selector.getElementsByClassName('ec-module-drag-active')[0];
                                let top = (e.clientY - parseInt(module.getAttribute('data-top')));
                                let left = (e.clientX - parseInt(module.getAttribute('data-left')));
                                module.style.top = top + 'px';
                                module.style.left = left + 'px';
                                let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                                let iframe_rect = iframe?.getBoundingClientRect();
                                if (iframe instanceof HTMLIFrameElement) {
                                    let line = params.selector.getElementsByClassName('ec-module-drag-active')[0];
                                    let iframe_body = iframe?.contentWindow.document.getElementsByTagName('body');
                                    if (iframe_body) {
                                        if (iframe_body[0].classList.contains('ec-composer-template-preview')) {
                                            return;
                                        }
                                        let line_position = line.getBoundingClientRect();
                                        let line_top = line_position.y;
                                        let line_height = line_position.height;
                                        if (iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                                            Array.from(iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                                                item.classList.remove('ec-composer-template-content-line-drop-active');
                                            });
                                            let found = 0;
                                            Array.from(iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop')).forEach((element) => {
                                                if (found > 0)
                                                    return;
                                                let element_position = element.getBoundingClientRect();
                                                let element_top = (iframe_rect instanceof DOMRect) ? (iframe_rect.y + element_position.y) : 0;
                                                if ((line_top <= element_top) && ((line_top + line_height) >= element_top)) {
                                                    element.classList.add('ec-composer-template-content-line-drop-active');
                                                    found++;
                                                    return;
                                                }
                                                else if (!element.nextElementSibling) {
                                                    if (((line_top - element_top) > -1) && ((line_top - element_top) < 300)) {
                                                        element.classList.add('ec-composer-template-content-line-drop-active');
                                                        found++;
                                                        return;
                                                    }
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'mouseup',
                    target: (e) => {
                        e.preventDefault();
                        if (params.selector.getElementsByClassName('ec-module-drag-active').length > 0) {
                            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            let iframe_body = iframe?.contentWindow.document.getElementsByTagName('body');
                            if (iframe_body) {
                                let iframe_body_child = iframe_body[0];
                                if (iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop-active').length > 0) {
                                    let new_line = get_content({
                                        'format': 7
                                    });
                                    iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop-active')[0].insertAdjacentElement('afterend', new_line);
                                }
                                if (iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                                    Array.from(iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                                        item.remove();
                                    });
                                }
                                params.selector.getElementsByClassName('ec-module-drag-active')[0].remove();
                                let module_id = params.selector.getElementsByClassName('ec-module-temp')[0].getAttribute('data-module');
                                let module_type = (Array.prototype.indexOf.call(Array.from(params.selector.getElementsByClassName('ec-module-temp')[0].closest('.ec-search-sections').getElementsByClassName('ec-search-section')), params.selector.getElementsByClassName('ec-module-temp')[0].closest('.ec-search-section')) < 1) ? 'personal' : 'default';
                                params.selector.getElementsByClassName('ec-module-temp')[0].classList.remove('ec-module-temp');
                                new Classes$1.Modules().get_module(params, module_id, module_type);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'input',
                    element: '.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-menu-module-name',
                    target: (e) => {
                        e.preventDefault();
                        let target = e.target;
                        target.closest('.ec-composer-modal').getElementsByClassName('ec-module-advanced-fields')[0].classList.add('ec-module-advanced-fields-expand');
                        setTimeout(() => {
                            target.closest('.ec-composer-modal').getElementsByClassName('ec-module-advanced-fields')[0].classList.remove('ec-module-advanced-fields-expand');
                            target.closest('.ec-composer-modal').getElementsByClassName('ec-module-advanced-fields')[0].classList.add('ec-module-advanced-fields-expanded');
                        }, 300);
                    },
                    capture: false
                }, {
                    action: 'input',
                    element: '.ec-modules-component .ec-search .ec-search-input',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            target.closest('div').classList.remove('ec-search-complete');
                            target.closest('div').classList.add('ec-search-active');
                            Classes$1.Timer.schedule_event('search_images', () => {
                                target.closest('div').classList.remove('ec-search-active');
                                if (target.value.length > 0) {
                                    target.closest('div').classList.add('ec-search-complete');
                                }
                                if (target.classList.contains('ec-search-personal-modules')) {
                                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules').innerHTML = '';
                                    new Classes$1.Modules().get_modules(params, 'personal', 1);
                                }
                                else {
                                    params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules').innerHTML = '';
                                    new Classes$1.Modules().get_modules(params, 'default', 1);
                                }
                            }, 1000);
                        }
                    },
                    capture: false
                }, {
                    action: 'change',
                    element: '.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-file',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            let create_module = target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]');
                            if ((target.files !== null) && (target.files.length > 0)) {
                                create_module.getElementsByClassName('ec-cover-uploaded-files-list')[0].innerHTML = '';
                                create_module.getElementsByClassName('ec-cover-uploaded-files')[0].classList.remove('ec-cover-uploaded-files-show');
                                let uploaded_images = '';
                                for (let image of target.files) {
                                    uploaded_images += '<li class="ec-cover-uploaded-file ec-cover-uploaded-file-uploading" data-file="' + image.lastModified + '_' + image.size + '">'
                                        + '<div class="ec-grid">'
                                        + '<div class="ec-grid-column-11">'
                                        + '<div class="ec-cover-uploaded-file-icon">'
                                        + params.icons('upload_file')
                                        + '</div>'
                                        + '<div class="ec-cover-uploaded-file-info">'
                                        + '<h4>'
                                        + image.name
                                        + '</h4>'
                                        + '<h6>'
                                        + '<span class="ec-cover-uploaded-done">0</span> / <span class="ec-cover-upload-total" data-total="' + image.size + '">' + format_file_size(image.size) + '</span>'
                                        + '</h6>'
                                        + '<div class="ec-cover-uploaded-file-loading-progress">'
                                        + '<div class="ec-cover-uploaded-file-loading-progress-bar"></div>'
                                        + '</div>'
                                        + '</div>'
                                        + '</div>'
                                        + '<div class="ec-grid-column-1">'
                                        + '<div class="ec-cover-uploaded-percentage"></div>'
                                        + '</div>'
                                        + '</div>'
                                        + '</li>';
                                    let form = new FormData();
                                    form.append('file_name', image.lastModified + '_' + image.size);
                                    form.append('file', image);
                                    let http = new XMLHttpRequest();
                                    http.open('POST', params.options('api_url') + 'api/upload_module_cover', true);
                                    http.upload.onprogress = function (e) {
                                        if (e.lengthComputable) {
                                            let percent = (e.loaded / e.total) * 100;
                                            let file_size = create_module.querySelector('.ec-cover-uploaded-file[data-file="' + this.file_name + '"] .ec-cover-upload-total').getAttribute('data-total');
                                            if (file_size) {
                                                let uploaded_size = (percent / 100) * parseInt(file_size);
                                                create_module.querySelector('.ec-cover-uploaded-file[data-file="' + this.file_name + '"] .ec-cover-uploaded-done').textContent = format_file_size(uploaded_size);
                                            }
                                            create_module.querySelector('.ec-cover-uploaded-file[data-file="' + this.file_name + '"] .ec-cover-uploaded-percentage').textContent = percent.toFixed(0) + '%';
                                            let progress_width = create_module.querySelector('.ec-cover-uploaded-file[data-file="' + this.file_name + '"] .ec-cover-uploaded-file-loading-progress').clientWidth;
                                            let progress_bar = (percent / 100) * progress_width;
                                            create_module.querySelector('.ec-cover-uploaded-file[data-file="' + this.file_name + '"] .ec-cover-uploaded-file-loading-progress-bar').style.width = progress_bar.toFixed(0) + 'px';
                                        }
                                    }.bind({
                                        file_name: image.lastModified + '_' + image.size
                                    });
                                    http.onload = function () {
                                        if (http.status >= 200 && http.status < 300) {
                                            let data = JSON.parse(http.response);
                                            if (!data.success && (typeof data.file_name !== 'undefined')) {
                                                create_module.querySelector('.ec-cover-uploaded-file[data-file="' + data.file_name + '"]').classList.add('ec-cover-uploaded-file-uploading');
                                                create_module.querySelector('.ec-cover-uploaded-file[data-file="' + data.file_name + '"]').classList.add('ec-cover-uploaded-file-failed');
                                                create_module.querySelector('.ec-cover-uploaded-file[data-file="' + data.file_name + '"] h6').textContent = data.message;
                                            }
                                            else if (typeof data.original_name !== 'undefined') {
                                                create_module.querySelector('.ec-cover-uploaded-file[data-file="' + data.file_name + '"]').setAttribute('data-name', data.original_name);
                                            }
                                        }
                                        else {
                                            console.error('Upload failed with status ' + http.status);
                                        }
                                    };
                                    http.onerror = function () {
                                        console.error('There was an error with the XMLHttpRequest');
                                    };
                                    http.send(form);
                                    break;
                                }
                                create_module.getElementsByClassName('ec-cover-uploaded-files-list')[0].innerHTML = uploaded_images;
                                create_module.getElementsByClassName('ec-cover-uploaded-files')[0].classList.add('ec-cover-uploaded-files-show');
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-menu a[data-scope="modules"]',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            e.preventDefault();
                            if (params.selector.querySelectorAll('.ec-modules-component .ec-search-sections > .ec-search-section')[0].getAttribute('loading')) {
                                params.selector.querySelectorAll('.ec-modules-component .ec-search-sections > .ec-search-section')[0].removeAttribute('loading');
                                new Classes$1.Modules().get_modules(params, 'personal', 1);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-cover-upload-box-drop-area a',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            e.preventDefault();
                            let create_module = target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]');
                            create_module.getElementsByClassName('ec-file')[0].click();
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-composer-modal[data-scope="ec-composer-create-module-modal"] .ec-save-module-button',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            target.closest('.ec-composer-modal-footer').getElementsByClassName('ec-composer-modal-message')[0].classList.remove('ec-composer-modal-message-success', 'ec-composer-modal-message-error');
                            let create_module = target.closest('.ec-composer-modal[data-scope="ec-composer-create-module-modal"]');
                            let module = {
                                name: create_module.getElementsByClassName('ec-menu-module-name')[0].value,
                                category: create_module.getElementsByClassName('ec-module-category-button')[0].getAttribute('data-id'),
                                description: create_module.getElementsByClassName('ec-menu-module-description')[0].value
                            };
                            if (create_module.getElementsByClassName('ec-cover-uploaded-file').length > 0) {
                                module['cover'] = create_module.getElementsByClassName('ec-cover-uploaded-file')[0].getAttribute('data-name');
                            }
                            let itemplate = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            let idocument = itemplate.contentDocument;
                            if (idocument) {
                                let selected_lines = idocument.getElementsByClassName('ec-composer-template-content-line-selected');
                                if (selected_lines.length > 0) {
                                    module['html'] = remove_buttons(selected_lines[0].outerHTML);
                                    module['css'] = '';
                                    let elements = selected_lines[0].getElementsByClassName('ec-element-content');
                                    if (elements.length > 0) {
                                        for (let element of elements) {
                                            let element_id = element.getAttribute('data-id');
                                            if (!element_id) {
                                                continue;
                                            }
                                            let style = idocument.head.querySelector('style[data-element="' + element_id + '"]');
                                            if (style) {
                                                module['css'] += style.outerHTML.replaceAll(element_id, element_id);
                                            }
                                        }
                                    }
                                }
                            }
                            target.classList.add('ec-saving-module-button');
                            setTimeout(() => {
                                new Classes$1.Modules().create_module(params, module);
                            }, 1000);
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-modules-component .ec-search-buttons .ec-search-button',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            target.closest('.ec-modules-component').querySelector(target.closest('.ec-modules-component').getElementsByClassName('ec-search-active-button')[0].getAttribute('data-target')).classList.add('ec-search-section-hide');
                            target.closest('.ec-modules-component').querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-start');
                            setTimeout(() => {
                                Array.from(target.closest('.ec-search-buttons').getElementsByClassName('ec-search-button')).forEach((element) => {
                                    element.classList.remove('ec-search-active-button');
                                });
                                target.classList.add('ec-search-active-button');
                                Array.from(target.closest('.ec-modules-component').getElementsByClassName('ec-search-section')).forEach((element) => {
                                    element.classList.remove('ec-search-section-show', 'ec-search-section-hide', 'ec-search-section-start');
                                });
                                target.closest('.ec-modules-component').querySelector(target.getAttribute('data-target')).classList.add('ec-search-section-show');
                                if (target.closest('.ec-search').classList.contains('ec-search-default')) {
                                    target.closest('.ec-search').classList.remove('ec-search-default');
                                    target.closest('.ec-search').classList.add('ec-search-personal');
                                }
                                else {
                                    target.closest('.ec-search').classList.remove('ec-search-personal');
                                    target.closest('.ec-search').classList.add('ec-search-default');
                                    if (target.closest('.ec-modules-component').querySelectorAll(target.getAttribute('data-target') + ' .ec-modules .ec-module').length < 1) {
                                        new Classes$1.Modules().get_modules(params, 'default', 1);
                                    }
                                }
                            }, 100);
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-modules-component .ec-search-sections > .ec-search-section .ec-loading-button',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            e.preventDefault();
                            let module_type = (Array.prototype.indexOf.call(Array.from(target.closest('.ec-search-sections').getElementsByClassName('ec-search-section')), target.closest('.ec-search-section')) < 1) ? 'personal' : 'default';
                            target.classList.add('ec-load-more-active');
                            setTimeout(() => {
                                let page = target.closest('.ec-loading-button').getAttribute('data-page') ? parseInt(target.closest('.ec-loading-button').getAttribute('data-page')) : 1;
                                new Classes$1.Modules().get_modules(params, module_type, page);
                            }, 1000);
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-modules-component .ec-search a',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            e.preventDefault();
                            target.closest('div').classList.remove('ec-search-complete');
                            target.closest('div').classList.remove('ec-search-active');
                            target.closest('div').getElementsByClassName('ec-search-input')[0].value = '';
                            if (target.closest('.ec-search').classList.contains('ec-search-personal')) {
                                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:first-child .ec-modules').innerHTML = '';
                                new Classes$1.Modules().get_modules(params, 'personal', 1);
                            }
                            else {
                                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules').innerHTML = '';
                                new Classes$1.Modules().get_modules(params, 'default', 1);
                            }
                        }
                    },
                    capture: false
                }, {
                    action: 'click',
                    element: '.ec-modules-component .ec-categories a',
                    target: (e) => {
                        let target = e.target;
                        if (target !== null) {
                            e.preventDefault();
                            let category_id = target.getAttribute('data-id');
                            let category_name = target.textContent;
                            if (category_id && category_name) {
                                target.closest('.ec-option-selector-dropdown').getElementsByClassName('ec-button')[0].setAttribute('data-id', category_id);
                                target.closest('.ec-option-selector-dropdown').querySelector('.ec-button > span').textContent = category_name;
                                params.selector.querySelector('.ec-modules-component .ec-search-sections > .ec-search-section:last-child .ec-modules').innerHTML = '';
                                new Classes$1.Modules().get_modules(params, 'default', 1);
                            }
                        }
                    },
                    capture: false
                }];
        }
    }
    Components.Modules = Modules;
})(Components$1 = Components$1 || (Components$1 = {}));

const Components = {
    Tabs: Components$d.Tabs,
    Sections: Components$c.Sections,
    Main: Components$b.Main,
    Search: Components$a.Search,
    History: Components$9.History,
    Code: Components$8.Code,
    Content: Components$7.Content,
    Modals: Components$6.Modals,
    Elements: Components$5.Elements,
    Structures: Components$4.Structures,
    Options: Components$3.Options,
    Text: Components$2.Text,
    Modules: Components$1.Modules
};

function header$1(params) {
    return '<nav class="ec-composer-header ec-position-absolute ec-topbar-position">'
        + '<div class="ec-display-flex ec-justify-content-space-between">'
        + '<div class="ec-display-flex">'
        + '<div class="ec-composer-mode">'
        + '<input type="radio" name="ec-composer-mode-option-' + params.template_id + '" value="0" id="ec-composer-mode-' + params.template_id + '-0" class="ec-composer-mode-0" checked>'
        + '<label for="ec-composer-mode-' + params.template_id + '-0">'
        + '<span class="ec-composer-mode-text">'
        + params.words('editor')
        + '</span>'
        + '<span class="ec-composer-mode-icon">'
        + params.icons('edit_square')
        + '</span>'
        + '</label>'
        + '<input type="radio" name="ec-composer-mode-option-' + params.template_id + '" value="1" id="ec-composer-mode-' + params.template_id + '-1" class="ec-composer-mode-1">'
        + '<label for="ec-composer-mode-' + params.template_id + '-1">'
        + '<span class="ec-composer-mode-text">'
        + params.words('preview')
        + '</span>'
        + '<span class="ec-composer-mode-icon">'
        + params.icons('frame_inspect')
        + '</span>'
        + '</label>'
        + '<div class="ec-composer-mode-active"></div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-display-flex">'
        + '<div class="ec-composer-name">'
        + '<div class="ec-composer-name-text" contenteditable="true">'
        + params.words('template')
        + '</div>'
        + '<button type="button" class="ec-composer-name-icon">'
        + params.icons('edit_square', { 'icon_class': 'ec-composer-edit-name-icon' })
        + params.icons('save', { 'icon_class': 'ec-composer-unsaved-changes-name-icon' })
        + params.icons('check', { 'icon_class': 'ec-composer-updated-success-name-icon' })
        + params.icons('close', { 'icon_class': 'ec-composer-updated-error-name-icon' })
        + '</button>'
        + '</div>'
        + '</div>'
        + '<div class="ec-display-flex">'
        + '<div class="ec-group ec-mr-5 ec-header-buttons">'
        + '<button type="button" class="ec-button ec-save-settings-button">'
        + params.icons('settings')
        + '</button>'
        + '<button type="button" class="ec-button ec-save-export-button">'
        + params.icons('upgrade')
        + '</button>'
        + '</div>'
        + '<button type="button" class="ec-button ec-templates-button">'
        + params.icons('templates')
        + '<span class="ec-save-module-text">'
        + params.words('templates')
        + '</span>'
        + '</button>'
        + '</div>'
        + '</div>'
        + '</nav>';
}

function menu$2(params) {
    return '<aside class="ec-composer-menu ec-position-absolute ec-position-left">'
        + '<ul class="ec-composer-nav">'
        + '<li class="ec-composer-nav-item">'
        + '<a href="#ec-tab-elements-' + params.template_id + '" class="ec-composer-nav-link ec-composer-nav-link-active" data-scope="elements">'
        + params.icons('layers')
        + '</a>'
        + '</li>'
        + '<li class="ec-composer-nav-item">'
        + '<a href="#ec-tab-rows-' + params.template_id + '" class="ec-composer-nav-link" data-scope="structures">'
        + params.icons('design_services')
        + '</a>'
        + '</li>'
        + '<li class="ec-composer-nav-item">'
        + '<a href="#ec-tab-modules-' + params.template_id + '" class="ec-composer-nav-link" data-scope="modules">'
        + params.icons('dashboard_customize')
        + '</a>'
        + '</li>'
        + '<li class="ec-composer-nav-item">'
        + '<a href="#ec-tab-history-' + params.template_id + '" class="ec-composer-nav-link" data-scope="history">'
        + params.icons('history')
        + '</a>'
        + '</li>'
        + '</ul>'
        + '</aside>';
}

function element(params) {
    return '<section class="ec-composer-element-options ec-position-absolute ec-position-left">'
        + '<div class="ec-composer-element-options-area">'
        + '<div class="ec-composer-element-options-area-header ec-display-flex ec-justify-content-space-between">'
        + '<a href="#" class="ec-composer-element-options-cancel">'
        + params.icons('arrow_back')
        + params.words('go_back')
        + '</a>'
        + '<div class="ec-composer-element-options-tabs">'
        + '<input type="radio" name="ec-composer-element-options-tab-' + params.template_id + '" value="0" id="ec-composer-element-options-tab-' + params.template_id + '-0" class="ec-composer-element-options-tab-0" checked />'
        + '<label for="ec-composer-element-options-tab-' + params.template_id + '-0">'
        + params.icons('desktop')
        + '</label>'
        + '<input type="radio" name="ec-composer-element-options-tab-' + params.template_id + '" value="1" id="ec-composer-element-options-tab-' + params.template_id + '-1" class="ec-composer-element-options-tab-1" />'
        + '<label for="ec-composer-element-options-tab-' + params.template_id + '-1">'
        + params.icons('phone')
        + '</label>'
        + '<div class="ec-composer-element-options-tab-active"></div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-element-options-area-body">'
        + '<div class="ec-sections ec-sections-show" data-scope="desktop"></div>'
        + '<div class="ec-sections" data-scope="mobile"></div>'
        + '</div>'
        + '</section>';
}

function body(params) {
    let categories = '';
    let modules = new Classes$1.Modules();
    let categories_list = modules.get_modules_categories(params);
    if (categories_list.length > 0) {
        for (let category of categories_list) {
            categories += '<li>'
                + '<a href="#" data-id="' + category.slug + '">'
                + category.name
                + '</a>'
                + '</li>';
        }
    }
    return '<main class="ec-composer-main">'
        + '<div class="ec-composer-panel">'
        + '<div class="ec-tabs"></div>'
        + '</div>'
        + '<div class="ec-composer-container ec-scrollbar-container">'
        + '<div class="ec-small-text-editor">'
        + '<div class="ec-display-flex ec-justify-content-space-between">'
        + '<div class="ec-display-flex ec-justify-content-start">'
        + '<div class="ec-ste-group-buttons">'
        + '<button type="button" class="ec-button ec-ste-align-button" data-direction="left">'
        + params.icons('format_align_left')
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-align-button" data-direction="center">'
        + params.icons('format_align_center')
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-align-button" data-direction="right">'
        + params.icons('format_align_right')
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-align-button" data-direction="justify">'
        + params.icons('format_align_justify')
        + '</button>'
        + '</div>'
        + '<div class="ec-ste-group-buttons">'
        + '<button type="button" class="ec-button ec-ste-format-italic-button">'
        + params.icons('format_italic')
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-format-underlined-button">'
        + params.icons('format_underlined')
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-format-strikethrough-button">'
        + params.icons('format_strikethrough_s')
        + '</button>'
        + '</div>'
        + '<div class="ec-ste-group-buttons">'
        + '<button type="button" class="ec-button ec-ste-list-bulleted-button">'
        + params.icons('format_list_bulleted', { 'icon_class': 'ec-ste-list-icon' })
        + '</button>'
        + '<button type="button" class="ec-button ec-ste-list-numbered-button">'
        + params.icons('format_list_numbered', { 'icon_class': 'ec-ste-list-icon' })
        + '</button>'
        + '</div>'
        + '<div class="ec-ste-group-buttons">'
        + '<button type="button" class="ec-button ec-ste-add-link-button">'
        + params.icons('link')
        + '</button>'
        + '</div>'
        + '<div class="ec-ste-expand-more-group-buttons">'
        + '<button type="button" class="ec-button ec-ste-expand-all-button">'
        + params.icons('ungroup')
        + '</button>'
        + '</div>'
        + '</div>'
        + '<div class="ec-display-flex ec-justify-content-end">'
        + '<div class="ec-ste-dropdown" data-scope="fonts">'
        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
        + '<span>'
        + params.words('font_family')
        + '</span>'
        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
        + '</button>'
        + '<div class="ec-ste-menu">'
        + get_all_fonts()
        + '</div>'
        + '</div>'
        + '<div class="ec-ste-dropdown" data-scope="text-weight">'
        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
        + '<span>'
        + params.words('weight')
        + '</span>'
        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
        + '</button>'
        + '<div class="ec-ste-menu">'
        + '<ul class="ec-ste-text-weights"></ul>'
        + '</div>'
        + '</div>'
        + '<div class="ec-ste-dropdown" data-scope="text-size">'
        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
        + '<span>'
        + params.words('size')
        + '</span>'
        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
        + '</button>'
        + '<div class="ec-ste-menu">'
        + get_text_sizes()
        + '</div>'
        + '</div>'
        + '<div class="ec-button-color">'
        + '<button type="button" style="--bgcolor: #2984ff;" data-color="#2984ff"></button>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<iframe class="ec-composer-template-container" frameborder="0" sandbox="allow-same-origin allow-modals"></iframe>'
        + '<div class="ec-preview-word">'
        + params.words('preview')
        + '</div>'
        + '<div class="ec-composer-code-container">'
        + '<div class="ec-composer-code-header">'
        + '<div class="ec-display-flex ec-justify-content-space-between">'
        + '<div class="ec-display-flex">'
        + '<button type="button" class="ec-button ec-composer-code-tab ec-composer-code-active-tab" data-tab="html">'
        + params.words('html')
        + '</button>'
        + '<button type="button" class="ec-button ec-composer-code-tab ec-composer-code-active-tab" data-tab="css">'
        + params.words('css')
        + '</button>'
        + '</div>'
        + '<div class="ec-display-flex">'
        + '<button type="button" class="ec-button ec-template-resize-code-button">'
        + params.icons('drag')
        + '</button>'
        + '</div>'
        + '<div class="ec-display-flex">'
        + '<button type="button" class="ec-button ec-template-hide-code-button">'
        + params.icons('close', { 'icon_class': 'ec-close-icon' })
        + '</button>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-code-body">'
        + '<div class="ec-composer-code-html ec-composer-code-show">'
        + '<iframe class="ec-composer-element-html-container" frameborder="0" sandbox="allow-same-origin allow-modals"></iframe>'
        + '<div class="ec-composer-reload-html-icon">'
        + params.icons('autorenew', { 'icon_class': 'ec-composer-reload-html-loading-icon' })
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-code-css ec-composer-code-show">'
        + '<iframe class="ec-composer-element-css-container" frameborder="0" sandbox="allow-same-origin allow-modals"></iframe>'
        + '<div class="ec-composer-reload-css-icon">'
        + params.icons('autorenew', { 'icon_class': 'ec-composer-reload-css-loading-icon' })
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-code-class-dropdown"></div>'
        + '<div class="ec-composer-code-contextmenu">'
        + '<a href="#" class="ec-composer-code-contextmenu-cut">'
        + params.words('cut')
        + '</a>'
        + '<a href="#" class="ec-composer-code-contextmenu-copy">'
        + params.words('copy')
        + '</a>'
        + '<a href="#" class="ec-composer-code-contextmenu-paste">'
        + params.words('paste')
        + '</a>'
        + '</div>'
        + '<a href="#" class="ec-template-code-button ec-template-code-hide-button">'
        + params.icons('frame_source')
        + '</a>'
        + '</div>'
        + '<div class="ec-composer-shadow">'
        + '<div class="ec-composer-modal ec-composer-modal-medium" data-scope="ec-composer-rows-modal">'
        + '<div class="ec-composer-modal-header ec-display-flex ec-justify-content-space-between">'
        + '<h3 class="ec-display-flex ec-justify-content-start">'
        + params.icons('low_priority', { 'icon_class': 'ec-section-header-icon' })
        + '<span>'
        + params.words('structures')
        + '</span>'
        + '</h3>'
        + '<button type="button" class="ec-button ec-template-hide-modal-button">'
        + params.icons('close', { 'icon_class': 'ec-close-icon' })
        + '</button>'
        + '</div>'
        + '<div class="ec-composer-modal-body">'
        + '<div class="ec-rows"></div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-modal ec-composer-modal-large" data-scope="ec-composer-create-module-modal">'
        + '<div class="ec-composer-modal-header ec-display-flex ec-justify-content-space-between">'
        + '<h3 class="ec-display-flex ec-justify-content-start">'
        + params.icons('new_window', { 'icon_class': 'ec-section-header-icon' })
        + '<span>'
        + params.words('create_module')
        + '</span>'
        + '</h3>'
        + '<button type="button" class="ec-button ec-template-hide-modal-button">'
        + params.icons('close', { 'icon_class': 'ec-close-icon' })
        + '</button>'
        + '</div>'
        + '<div class="ec-composer-modal-body">'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-composer-modal-text-field">'
        + '<h3>'
        + params.words('name')
        + params.icons('asterisk', { 'icon_class': 'ec-composer-modal-required-icon' })
        + '</h3>'
        + '<input type="text" placeholder="' + params.words('enter_module_name') + '" class="ec-menu-module-name ec-mb-1" id="ec-menu-module-name-' + params.template_id + '">'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12 ec-module-advanced-fields">'
        + '<div class="ec-grid ec-mt-3">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-composer-modal-select-field">'
        + '<h3>'
        + params.words('category')
        + '</h3>'
        + '<div class="ec-composer-modal-select-dropdown">'
        + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between ec-module-category-button">'
        + '<span>'
        + params.words('uncategorized')
        + '</span>'
        + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
        + '</button>'
        + '<div class="ec-composer-modal-select-menu">'
        + '<ul>'
        + categories
        + '</ul>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-grid ec-mt-3">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-composer-modal-textarea-field">'
        + '<h3>'
        + params.words('description')
        + '</h3>'
        + '<textarea placeholder="' + params.words('enter_module_description') + '" class="ec-menu-module-description" id="ec-menu-module-description-' + params.template_id + '"></textarea>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-grid ec-mt-3">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-composer-modal-upload-field">'
        + '<h3>'
        + params.words('cover')
        + params.icons('asterisk', { 'icon_class': 'ec-composer-modal-required-icon' })
        + '</h3>'
        + '<div class="ec-cover-upload-box">'
        + '<div class="ec-cover-upload-box-drop-area">'
        + '<div class="ec-cover-upload-box-drop-area-start ec-cover-upload-box-drop-area-show">'
        + '<div class="ec-cover-upload-box-icon-box">'
        + '<div class="ec-cover-upload-box-icon">'
        + params.icons('cloud_upload')
        + '</div>'
        + '</div>'
        + '<h6>'
        + params.words('drag_and_drop_files')
        + '</h6>'
        + '<p>'
        + params.words('supported_upload_format')
        + '</p>'
        + '</div>'
        + '<div class="ec-cover-upload-box-drop-area-drop">'
        + '<div class="ec-cover-upload-box-icon-box">'
        + '<div class="ec-cover-upload-box-icon">'
        + params.icons('cloud_queue')
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-block-footer ec-display-none">'
        + '<form method="post" enctype="multipart/form-data">'
        + '<input type="file" class="ec-file" multiple />'
        + '</form>'
        + '</div>'
        + '<div class="ec-cover-uploaded-files ec-mb-1">'
        + '<h3 class="ec-media-title">'
        + '<span>'
        + params.words('files')
        + '</span>'
        + '</h3>'
        + '<ul class="ec-cover-uploaded-files-list"></ul>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-modal-footer">'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12">'
        + '<button type="button" class="ec-button ec-save-module-button">'
        + params.icons('save', { 'icon_class': 'ec-default-icon' })
        + params.icons('autorenew', { 'icon_class': 'ec-loading-icon' })
        + params.words('save')
        + '</button>'
        + '</div>'
        + '</div>'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-composer-modal-message"></div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-modal ec-composer-modal-large" data-scope="ec-composer-settings-modal">'
        + '<div class="ec-composer-modal-header ec-display-flex ec-justify-content-space-between">'
        + '<h3 class="ec-display-flex ec-justify-content-start">'
        + params.icons('settings', { 'icon_class': 'ec-section-header-icon' })
        + '<span>'
        + params.words('settings')
        + '</span>'
        + '</h3>'
        + '<button type="button" class="ec-button ec-template-hide-modal-button">'
        + params.icons('close', { 'icon_class': 'ec-close-icon' })
        + '</button>'
        + '</div>'
        + '<div class="ec-composer-modal-body">'
        + '<div class="ec-sections"></div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-modal ec-composer-modal-large" data-scope="ec-composer-export-modal">'
        + '<div class="ec-composer-modal-header ec-display-flex ec-justify-content-space-between">'
        + '<h3 class="ec-display-flex ec-justify-content-start">'
        + params.icons('upgrade', { 'icon_class': 'ec-section-header-icon' })
        + '<span>'
        + params.words('export_template')
        + '</span>'
        + '</h3>'
        + '<button type="button" class="ec-button ec-template-hide-modal-button">'
        + params.icons('close', { 'icon_class': 'ec-close-icon' })
        + '</button>'
        + '</div>'
        + '<div class="ec-composer-modal-body">'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12">'
        + '<ul>'
        + '<li>'
        + '<div>'
        + '<h3>'
        + params.words('html_css')
        + '</h3>'
        + '<p>'
        + params.words('html_css_description')
        + '</p>'
        + '</div>'
        + '<div>'
        + '<button type="button" class="ec-button ec-save-download-html-button">'
        + params.icons('download', { 'icon_class': 'ec-download-icon' })
        + params.icons('autorenew', { 'icon_class': 'ec-loading-icon' })
        + '<span class="ec-save-module-text">'
        + params.words('download')
        + '</span>'
        + '</button>'
        + '</div>'
        + '</li>'
        + '</ul>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-modal-footer">'
        + '<div class="ec-grid">'
        + '<div class="ec-grid-column-12">'
        + '<div class="ec-m-0 ec-composer-modal-message"></div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-save-changes-modal ec-display-flex ec-justify-content-start">'
        + '<div class="ec-composer-save-changes-icon ec-composer-save-changes-saving-icon">'
        + params.icons('autorenew', { 'icon_class': 'ec-section-saving-changes-loading-icon' })
        + params.icons('check', { 'icon_class': 'ec-section-saving-changes-success-icon' })
        + params.icons('close', { 'icon_class': 'ec-section-saving-changes-failed-icon' })
        + '</div>'
        + '<div>'
        + '<p>'
        + params.words('saving_changes')
        + '</p>'
        + '</div>'
        + '</div>'
        + '<div class="ec-composer-preview"></div>'
        + '</main>';
}

function modules$1(params) {
    return '<div role="ec-tab" class="ec-tab" id="ec-tab-modules-' + params.template_id + '"></div>';
}

function elements$1(params) {
    return '<div role="ec-tab" class="ec-tab ec-tab-show" id="ec-tab-elements-' + params.template_id + '"></div>';
}

function history$2(params) {
    return '<div role="ec-tab" class="ec-tab" id="ec-tab-history-' + params.template_id + '"></div>';
}

function rows(params) {
    return '<div role="ec-tab" class="ec-tab" id="ec-tab-rows-' + params.template_id + '"></div>';
}

var Controllers$1;
(function (Controllers) {
    class Builder {
        element = '';
        constructor(element) {
            this.element = element;
        }
        initialize() {
            if (document.getElementsByTagName('head').length < 1) {
                show_message(get_word('error_name') + ': ' + get_word('no_head_tag_found'));
            }
            else {
                let builder_options = get_option('builder');
                if (typeof builder_options !== 'boolean') {
                    if (typeof builder_options.css === 'object') {
                        if (builder_options.css.length > 0) {
                            for (let css of builder_options.css) {
                                if (!document.querySelector('link[href="' + css.href + '"]')) {
                                    let css_link = document.createElement('link');
                                    css_link.setAttribute('href', css.href);
                                    css_link.setAttribute('rel', 'stylesheet');
                                    document.getElementsByTagName('head')[0].append(css_link);
                                }
                            }
                        }
                    }
                }
                let default_css_url = get_option('css_url') + 'main.css';
                let css_link = document.querySelector('link[href="' + default_css_url + '"]');
                if (!css_link) {
                    let link = document.createElement('link');
                    link.setAttribute('href', default_css_url);
                    link.setAttribute('rel', 'stylesheet');
                    link.setAttribute('id', 'ec-composer-css-link');
                    document.getElementsByTagName('head')[0].append(link);
                }
            }
        }
        setup() {
            let builder_options = get_option('builder');
            let selector = document.querySelector(this.element);
            selector.style.overflow = 'hidden';
            let container = '<div class="ec-composer"></div>';
            selector.innerHTML = container;
            if (builder_options?.start?.animation) {
                new Plugins$1.StartLoading().get_content(selector);
            }
            let template_id = '';
            if (builder_options.template_id) {
                template_id = builder_options.template_id;
                this.template(template_id, false);
            }
            else {
                template_id = this.uniqueid();
                this.template(template_id, true);
            }
            let view_params = {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon,
                selector: selector
            };
            let builder = '';
            builder += header$1(view_params);
            builder += menu$2(view_params);
            builder += element(view_params);
            builder += body(view_params);
            selector.querySelector('.ec-composer').innerHTML += builder;
            let itemplate = selector.getElementsByClassName('ec-composer-template-container');
            if (typeof builder_options.css === 'object') {
                if (builder_options.css.length > 0) {
                    let css_link = document.createElement('link');
                    css_link.setAttribute('href', builder_options.css[0].href);
                    css_link.setAttribute('rel', 'stylesheet');
                    itemplate[0].contentDocument.head.innerHTML += css_link.outerHTML;
                }
            }
            let fonts_link = get_fonts_link();
            if (fonts_link) {
                let link = document.createElement('link');
                link.setAttribute('href', fonts_link);
                link.setAttribute('rel', 'stylesheet');
                document.head.appendChild(link);
                itemplate[0].contentDocument.head.innerHTML += link.outerHTML;
            }
            itemplate[0].contentDocument.head.innerHTML += get_styles('template');
            itemplate[0].contentDocument.head.innerHTML += get_styles('library');
            itemplate[0].contentDocument.head.innerHTML += get_styles('default');
            itemplate[0].contentDocument.body.innerHTML = '<div class="ec-composer-template"></div>';
            itemplate[0].contentDocument.body.getElementsByClassName('ec-composer-template')[0].innerHTML = get_content({
                'format': 1
            }).outerHTML;
            let tabs = '';
            tabs += elements$1({
                template_id: template_id
            });
            tabs += rows({
                template_id: template_id
            });
            tabs += modules$1({
                template_id: template_id
            });
            tabs += history$2({
                template_id: template_id
            });
            selector.querySelector('.ec-tabs').innerHTML += tabs;
            selector.querySelector('#ec-tab-elements-' + template_id).innerHTML += get_section('elements', {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon,
                selector: selector
            });
            selector.querySelector('#ec-tab-rows-' + template_id).innerHTML += get_section('rows', {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon
            });
            selector.querySelector('.ec-composer-modal[data-scope="ec-composer-rows-modal"] .ec-composer-modal-body .ec-rows').innerHTML += get_section('rows', {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon,
                only_rows: 1
            });
            selector.querySelector('#ec-tab-modules-' + template_id).innerHTML += get_section('modules', {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon
            });
            selector.querySelector('#ec-tab-history-' + template_id).innerHTML += get_section('history', {
                template_id: template_id,
                options: get_option,
                words: get_word,
                icons: get_icon
            });
            let components_list = Object.keys(Components);
            if (components_list.length > 0) {
                for (let component of components_list) {
                    let component_class = Object.getOwnPropertyDescriptor(Components, component);
                    let component_events = new component_class.value().get_events({
                        options: get_option,
                        words: get_word,
                        icons: get_icon,
                        selector: selector,
                        template_id: template_id
                    });
                    if (component_events.length > 0) {
                        for (let event of component_events) {
                            if ((typeof event.capture === 'boolean') && (typeof event.target === 'function') && (typeof event.action === 'string')) {
                                let iframe = (typeof event.iframe !== 'undefined') ? event.iframe : '';
                                if (typeof event.element === 'string') {
                                    new Classes$1.Events().addEventListener(selector.querySelectorAll(event.element), event.action, event.target, iframe, event.capture);
                                }
                                else {
                                    new Classes$1.Events().addEventListener('', event.action, event.target, iframe, event.capture);
                                }
                            }
                        }
                    }
                }
            }
        }
        uniqueid() {
            let allowed = 'abcdefghijklmnopqrstuvwxyz';
            let tchars = allowed.length;
            let first_number = Math.floor(Math.random() * tchars);
            let first_char = allowed.slice(first_number, (first_number + 1));
            let second_number = Math.floor(Math.random() * tchars);
            let second_char = allowed.slice(second_number, (second_number + 1));
            return first_char + second_char + Date.now();
        }
        template(template_id, create) {
            let element = this.element;
            let selector = document.querySelector(element);
            let params = {
                options: get_option,
                selector: selector,
                words: get_word,
                icons: get_icon,
                template_id: template_id
            };
            let http_send = new Classes$1.Https();
            if (selector !== undefined) {
                setTimeout(() => {
                    if (create) {
                        new Classes$1.Backup().save_html_update(params);
                        let send_request = new Promise((resolve, reject) => {
                            let template_html = get_template(params);
                            let template = {
                                template_id: template_id,
                                html: template_html,
                                css: get_styles('default').replace('<style data-scope="default">', '').replace('</style>', ''),
                                library: get_styles('library').replace('<style>', '').replace('</style>', '')
                            };
                            let response = http_send.post(get_option('api_url') + 'api/create_template', template);
                            resolve(response);
                        });
                        send_request.then(response => {
                            if (response.success) {
                                new Classes$1.Backup().save_html_update(params);
                                new Classes$1.History().get_history_all(params);
                                new Classes$1.History().get_history_recent(params, 'ec-composer-template-container');
                            }
                        });
                        send_request.catch(error => {
                            show_message(error);
                        });
                    }
                    else {
                        new Classes$1.Backup().save_html_update(params);
                        new Classes$1.History().get_history_all(params);
                        new Classes$1.History().get_history_recent(params, 'ec-composer-template-container');
                    }
                }, 500);
            }
        }
    }
    Controllers.Builder = Builder;
})(Controllers$1 = Controllers$1 || (Controllers$1 = {}));

const Controllers = {
    Builder: Controllers$1.Builder
};

var Core$2;
(function (Core) {
    class Builder {
        element = '';
        controller;
        constructor(element) {
            this.element = element;
            this.controller = new Controllers.Builder(element);
        }
        run_builder() {
            this.controller.initialize();
            this.controller.setup();
        }
    }
    Core.Builder = Builder;
})(Core$2 = Core$2 || (Core$2 = {}));

const run_builder = (element) => {
    new Core$2.Builder(element).run_builder();
};

var Core$1;
(function (Core) {
    class Errors extends Error {
        constructor(message) {
            super(message);
        }
    }
    Core.Errors = Errors;
})(Core$1 = Core$1 || (Core$1 = {}));

const show_message = (message) => {
    try {
        throw new Core$1.Errors(message);
    }
    catch (error) {
        console.log(error.message);
    }
};

const add = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'add'
            + '</span>';
    }
};

const app_registration = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'app_registration'
            + '</span>';
    }
};

const edit_square = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'edit_square'
            + '</span>';
    }
};

const settings$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'settings'
            + '</span>';
    }
};

const frame_inspect = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'frame_inspect'
            + '</span>';
    }
};

const upgrade = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'upgrade'
            + '</span>';
    }
};

const save$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'save'
            + '</span>';
    }
};

const slide_library = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'slide_library'
            + '</span>';
    }
};

const design_services = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'design_services'
            + '</span>';
    }
};

const dashboard = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'dashboard'
            + '</span>';
    }
};

const dashboard_customize = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'dashboard_customize'
            + '</span>';
    }
};

const imagesmode = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'imagesmode'
            + '</span>';
    }
};

const code = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'code'
            + '</span>';
    }
};

const add_circle = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'add_circle'
            + '</span>';
    }
};

const history$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'history'
            + '</span>';
    }
};

const low_priority = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra['icon_class'] : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'low_priority'
            + '</span>';
    }
};

const column$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'text_select_move_up'
            + '</span>';
    }
};

const text$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'subject'
            + '</span>';
    }
};

const button$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'smart_button'
            + '</span>';
    }
};

const image$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'image'
            + '</span>';
    }
};

const video$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'smart_display'
            + '</span>';
    }
};

const video_library = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'video_library'
            + '</span>';
    }
};

const menu$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'view_column_2'
            + '</span>';
    }
};

const html$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'code_blocks'
            + '</span>';
    }
};

const divider$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'align_center'
            + '</span>';
    }
};

const spacer$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'pin_end'
            + '</span>';
    }
};

const share$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'present_to_all'
            + '</span>';
    }
};

const image_left = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_image_left'
            + '</span>';
    }
};

const image_right = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_image_right'
            + '</span>';
    }
};

const banner$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'pallet'
            + '</span>';
    }
};

const carousel$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'art_track'
            + '</span>';
    }
};

const timer$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'timer'
            + '</span>';
    }
};

const accordion$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'library_books'
            + '</span>';
    }
};

const swipe_right = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'swipe_right'
            + '</span>';
    }
};

const swipe_down = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'swipe_down'
            + '</span>';
    }
};

const expand_more = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'expand_more'
            + '</span>';
    }
};

const expand_all = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'expand_all'
            + '</span>';
    }
};

const elements_section = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'magic_button'
            + '</span>';
    }
};

const elements_section_advanced = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'auto_awesome'
            + '</span>';
    }
};

const reviews$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'reviews'
            + '</span>';
    }
};

const forms$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'source_notes'
            + '</span>';
    }
};

const modules_section = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'style'
            + '</span>';
    }
};

const layers = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'layers'
            + '</span>';
    }
};

const new_label = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'new_label'
            + '</span>';
    }
};

const person_pin_circle = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'person_pin_circle'
            + '</span>';
    }
};

const autorenew = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'autorenew'
            + '</span>';
    }
};

const media_section = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'gallery_thumbnail'
            + '</span>';
    }
};

const image_search = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'image_search'
            + '</span>';
    }
};

const backup = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'backup'
            + '</span>';
    }
};

const cancel$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'cancel'
            + '</span>';
    }
};

const cloud_upload = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'cloud_upload'
            + '</span>';
    }
};

const cloud_queue = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'cloud_queue'
            + '</span>';
    }
};

const cloud_done = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'cloud_done'
            + '</span>';
    }
};

const cloud_off = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'cloud_off'
            + '</span>';
    }
};

const task_alt = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'task_alt'
            + '</span>';
    }
};

const notifications = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'notifications'
            + '</span>';
    }
};

const history_section = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'manage_search'
            + '</span>';
    }
};

const backup_restore = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'settings_backup_restore'
            + '</span>';
    }
};

const frame_source = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'frame_source'
            + '</span>';
    }
};

const text_increase = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'text_increase'
            + '</span>';
    }
};

const text_decrease = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'text_decrease'
            + '</span>';
    }
};

const drag = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp ec-drag-icon' + icon_class + '">'
            + 'drag_indicator'
            + '</span>';
    }
};

const close$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'close'
            + '</span>';
    }
};

const library_add = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'library_add'
            + '</span>';
    }
};

const link = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'link'
            + '</span>';
    }
};

const link_add = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'add_link'
            + '</span>';
    }
};

const link_off = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'link_off'
            + '</span>';
    }
};

const place_item = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'place_item'
            + '</span>';
    }
};

const trash = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'delete'
            + '</span>';
    }
};

const unfold_more = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'unfold_more'
            + '</span>';
    }
};

const unfold_less = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'unfold_less'
            + '</span>';
    }
};

const backup_table = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'backup_table'
            + '</span>';
    }
};

const arrow_back = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'arrow_back'
            + '</span>';
    }
};

const mark_chat_unread = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'mark_chat_unread'
            + '</span>';
    }
};

const phone = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'smartphone'
            + '</span>';
    }
};

const desktop = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'desktop_windows'
            + '</span>';
    }
};

const align_justify_flex_start = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'align_justify_flex_start'
            + '</span>';
    }
};

const align_justify_center = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'align_justify_center'
            + '</span>';
    }
};

const align_justify_flex_end = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'align_justify_flex_end'
            + '</span>';
    }
};

const remove = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'remove'
            + '</span>';
    }
};

const check = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'check'
            + '</span>';
    }
};

const refresh = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'refresh'
            + '</span>';
    }
};

const south = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'south'
            + '</span>';
    }
};

const format_align_center = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_align_center'
            + '</span>';
    }
};

const format_align_left = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_align_left'
            + '</span>';
    }
};

const format_align_right = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_align_right'
            + '</span>';
    }
};

const format_align_justify = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_align_justify'
            + '</span>';
    }
};

const format_bold = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_bold'
            + '</span>';
    }
};

const format_underlined = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_underlined'
            + '</span>';
    }
};

const format_italic = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_italic'
            + '</span>';
    }
};

const format_list_bulleted = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_list_bulleted'
            + '</span>';
    }
};

const format_list_numbered = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'format_list_numbered'
            + '</span>';
    }
};

const format_strikethrough_s = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'strikethrough_s'
            + '</span>';
    }
};

const ungroup = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'ungroup'
            + '</span>';
    }
};

const upload_file = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'upload_file'
            + '</span>';
    }
};

const title$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'text_fields_alt'
            + '</span>';
    }
};

const align_space_around = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'align_space_around'
            + '</span>';
    }
};

const icons$2 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'art_track'
            + '</span>';
    }
};

const facebook = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 50 50">'
            + '<path' + icon_class + ' d="M25,3C12.85,3,3,12.85,3,25c0,11.03,8.125,20.137,18.712,21.728V30.831h-5.443v-5.783h5.443v-3.848 c0-6.371,3.104-9.168,8.399-9.168c2.536,0,3.877,0.188,4.512,0.274v5.048h-3.612c-2.248,0-3.033,2.131-3.033,4.533v3.161h6.588 l-0.894,5.783h-5.694v15.944C38.716,45.318,47,36.137,47,25C47,12.85,37.15,3,25,3z" fill="#4267B2"></path>'
            + '</svg>';
    }
};

const instagram = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 48 48">'
            + '<path' + icon_class + ' d="M 16.5 5 C 10.16639 5 5 10.16639 5 16.5 L 5 31.5 C 5 37.832757 10.166209 43 16.5 43 L 31.5 43 C 37.832938 43 43 37.832938 43 31.5 L 43 16.5 C 43 10.166209 37.832757 5 31.5 5 L 16.5 5 z M 16.5 8 L 31.5 8 C 36.211243 8 40 11.787791 40 16.5 L 40 31.5 C 40 36.211062 36.211062 40 31.5 40 L 16.5 40 C 11.787791 40 8 36.211243 8 31.5 L 8 16.5 C 8 11.78761 11.78761 8 16.5 8 z M 34 12 C 32.895 12 32 12.895 32 14 C 32 15.105 32.895 16 34 16 C 35.105 16 36 15.105 36 14 C 36 12.895 35.105 12 34 12 z M 24 14 C 18.495178 14 14 18.495178 14 24 C 14 29.504822 18.495178 34 24 34 C 29.504822 34 34 29.504822 34 24 C 34 18.495178 29.504822 14 24 14 z M 24 17 C 27.883178 17 31 20.116822 31 24 C 31 27.883178 27.883178 31 24 31 C 20.116822 31 17 27.883178 17 24 C 17 20.116822 20.116822 17 24 17 z" fill="#cf04c4"></path>'
            + '</svg>';
    }
};

const pinterest = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 50 50">'
            + '<path' + icon_class + ' d="M25,2C12.3178711,2,2,12.3178711,2,25c0,9.8841553,6.2675781,18.3302612,15.036377,21.5769653	c-0.2525635-2.2515869-0.2129517-5.9390259,0.2037964-7.7243652c0.3902588-1.677002,2.5212402-10.6871338,2.5212402-10.6871338	s-0.6433105-1.2883301-0.6433105-3.1911011c0-2.9901733,1.7324219-5.2211914,3.8898315-5.2211914	c1.8349609,0,2.7197876,1.3776245,2.7197876,3.0281982c0,1.8457031-1.1734619,4.6026611-1.78125,7.1578369	c-0.506897,2.1409302,1.0733643,3.8865356,3.1836548,3.8865356c3.821228,0,6.7584839-4.0296021,6.7584839-9.8453369	c0-5.147583-3.697998-8.7471924-8.9795532-8.7471924c-6.1167603,0-9.7072754,4.588562-9.7072754,9.3309937	c0,1.8473511,0.7111816,3.8286743,1.6000977,4.9069824c0.175293,0.2133179,0.2009277,0.3994141,0.1488647,0.6160278	c-0.1629028,0.678894-0.5250854,2.1392822-0.5970459,2.4385986c-0.0934448,0.3944702-0.3117676,0.4763184-0.7186279,0.2869263	c-2.685791-1.2503052-4.364502-5.1756592-4.364502-8.3295898c0-6.7815552,4.9268188-13.0108032,14.206543-13.0108032	c7.4588623,0,13.2547607,5.3138428,13.2547607,12.4179077c0,7.4100342-4.6729126,13.3729858-11.1568604,13.3729858	c-2.178894,0-4.2263794-1.132019-4.9267578-2.4691772c0,0-1.0783081,4.1048584-1.3404541,5.1112061	c-0.4524536,1.7404175-2.3892822,5.3460083-3.3615723,6.9837036C20.1704712,47.6074829,22.5397949,48,25,48	c12.6826172,0,23-10.3173828,23-23C48,12.3178711,37.6826172,2,25,2z" fill="#E60023"></path>'
            + '</svg>';
    }
};

const tiktok = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 50 50">'
            + '<path' + icon_class + ' d="M41,4H9C6.243,4,4,6.243,4,9v32c0,2.757,2.243,5,5,5h32c2.757,0,5-2.243,5-5V9C46,6.243,43.757,4,41,4z M37.006,22.323 c-0.227,0.021-0.457,0.035-0.69,0.035c-2.623,0-4.928-1.349-6.269-3.388c0,5.349,0,11.435,0,11.537c0,4.709-3.818,8.527-8.527,8.527 s-8.527-3.818-8.527-8.527s3.818-8.527,8.527-8.527c0.178,0,0.352,0.016,0.527,0.027v4.202c-0.175-0.021-0.347-0.053-0.527-0.053 c-2.404,0-4.352,1.948-4.352,4.352s1.948,4.352,4.352,4.352s4.527-1.894,4.527-4.298c0-0.095,0.042-19.594,0.042-19.594h4.016 c0.378,3.591,3.277,6.425,6.901,6.685V22.323z" fill="#ff0050"></path>'
            + '</svg>';
    }
};

const twitter = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 64 64">'
            + '<path' + icon_class + ' d="M61.932,15.439c-2.099,0.93-4.356,1.55-6.737,1.843c2.421-1.437,4.283-3.729,5.157-6.437	c-2.265,1.328-4.774,2.303-7.444,2.817C50.776,11.402,47.735,10,44.366,10c-6.472,0-11.717,5.2-11.717,11.611	c0,0.907,0.106,1.791,0.306,2.649c-9.736-0.489-18.371-5.117-24.148-12.141c-1.015,1.716-1.586,3.726-1.586,5.847	c0,4.031,2.064,7.579,5.211,9.67c-1.921-0.059-3.729-0.593-5.312-1.45c0,0.035,0,0.087,0,0.136c0,5.633,4.04,10.323,9.395,11.391	c-0.979,0.268-2.013,0.417-3.079,0.417c-0.757,0-1.494-0.086-2.208-0.214c1.491,4.603,5.817,7.968,10.942,8.067	c-4.01,3.109-9.06,4.971-14.552,4.971c-0.949,0-1.876-0.054-2.793-0.165C10.012,54.074,16.173,56,22.786,56	c21.549,0,33.337-17.696,33.337-33.047c0-0.503-0.016-1.004-0.04-1.499C58.384,19.83,60.366,17.78,61.932,15.439" fill="#1DA1F2"></path>'
            + '</svg>';
    }
};

const whatsapp = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 50 50">'
            + '<path' + icon_class + ' d="M25,2C12.318,2,2,12.318,2,25c0,3.96,1.023,7.854,2.963,11.29L2.037,46.73c-0.096,0.343-0.003,0.711,0.245,0.966 C2.473,47.893,2.733,48,3,48c0.08,0,0.161-0.01,0.24-0.029l10.896-2.699C17.463,47.058,21.21,48,25,48c12.682,0,23-10.318,23-23 S37.682,2,25,2z M36.57,33.116c-0.492,1.362-2.852,2.605-3.986,2.772c-1.018,0.149-2.306,0.213-3.72-0.231 c-0.857-0.27-1.957-0.628-3.366-1.229c-5.923-2.526-9.791-8.415-10.087-8.804C15.116,25.235,13,22.463,13,19.594 s1.525-4.28,2.067-4.864c0.542-0.584,1.181-0.73,1.575-0.73s0.787,0.005,1.132,0.021c0.363,0.018,0.85-0.137,1.329,1.001 c0.492,1.168,1.673,4.037,1.819,4.33c0.148,0.292,0.246,0.633,0.05,1.022c-0.196,0.389-0.294,0.632-0.59,0.973 s-0.62,0.76-0.886,1.022c-0.296,0.291-0.603,0.606-0.259,1.19c0.344,0.584,1.529,2.493,3.285,4.039 c2.255,1.986,4.158,2.602,4.748,2.894c0.59,0.292,0.935,0.243,1.279-0.146c0.344-0.39,1.476-1.703,1.869-2.286 s0.787-0.487,1.329-0.292c0.542,0.194,3.445,1.604,4.035,1.896c0.59,0.292,0.984,0.438,1.132,0.681 C37.062,30.587,37.062,31.755,36.57,33.116z" fill="#25d366"></path>'
            + '</svg>';
    }
};

const youtube = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 72 72">'
            + '<path' + icon_class + ' d="M61.115,18.856C63.666,21.503,64,25.709,64,36s-0.334,14.497-2.885,17.144C58.563,55.791,55.906,56,36,56	s-22.563-0.209-25.115-2.856C8.334,50.497,8,46.291,8,36s0.334-14.497,2.885-17.144S16.094,16,36,16S58.563,16.209,61.115,18.856z M31.464,44.476l13.603-8.044l-13.603-7.918V44.476z" fill="#FF0000"></path>'
            + '</svg>';
    }
};

const linkedin = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' class="' + extra.icon_class + '"' : '';
        return '<svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="100" height="100" viewBox="0 0 50 50">'
            + '<path' + icon_class + ' d="M41,4H9C6.24,4,4,6.24,4,9v32c0,2.76,2.24,5,5,5h32c2.76,0,5-2.24,5-5V9C46,6.24,43.76,4,41,4z M17,20v19h-6V20H17z M11,14.47c0-1.4,1.2-2.47,3-2.47s2.93,1.07,3,2.47c0,1.4-1.12,2.53-3,2.53C12.2,17,11,15.87,11,14.47z M39,39h-6c0,0,0-9.26,0-10 c0-2-1-4-3.5-4.04h-0.08C27,24.96,26,27.02,26,29c0,0.91,0,10,0,10h-6V20h6v2.56c0,0,1.93-2.56,5.81-2.56 c3.97,0,7.19,2.73,7.19,8.26V39z" fill="#0077B5"></path>'
            + '</svg>';
    }
};

const shapes = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'shapes'
            + '</span>';
    }
};

const file_download = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'file_download'
            + '</span>';
    }
};

const new_window = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'new_window'
            + '</span>';
    }
};

const asterisk = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'emergency'
            + '</span>';
    }
};

const download$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'download'
            + '</span>';
    }
};

const search = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'manage_search'
            + '</span>';
    }
};

const arrow_right_alt = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'arrow_right_alt'
            + '</span>';
    }
};

const templates$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'slide_library'
            + '</span>';
    }
};

const product$1 = {
    get_icon: (extra) => {
        let icon_class = (typeof extra?.['icon_class'] !== 'undefined') ? ' ' + extra.icon_class : '';
        return '<span class="material-symbols-sharp' + icon_class + '">'
            + 'gallery_thumbnail'
            + '</span>';
    }
};

var icons$1 = {
    add,
    app_registration,
    edit_square,
    settings: settings$1,
    frame_inspect,
    upgrade,
    save: save$1,
    slide_library,
    design_services,
    dashboard,
    dashboard_customize,
    imagesmode,
    code,
    add_circle,
    history: history$1,
    low_priority,
    column: column$1,
    text: text$1,
    button: button$1,
    image: image$1,
    video: video$1,
    video_library,
    menu: menu$1,
    html: html$1,
    divider: divider$1,
    spacer: spacer$1,
    share: share$1,
    image_left,
    image_right,
    banner: banner$1,
    carousel: carousel$1,
    timer: timer$1,
    accordion: accordion$1,
    swipe_right,
    swipe_down,
    expand_more,
    expand_all,
    elements_section,
    elements_section_advanced,
    reviews: reviews$1,
    forms: forms$1,
    modules_section,
    layers,
    new_label,
    person_pin_circle,
    autorenew,
    media_section,
    image_search,
    backup,
    cancel: cancel$1,
    cloud_upload,
    cloud_queue,
    cloud_done,
    cloud_off,
    task_alt,
    notifications,
    history_section,
    backup_restore,
    frame_source,
    text_increase,
    text_decrease,
    drag,
    close: close$1,
    check,
    library_add,
    link,
    link_add,
    link_off,
    place_item,
    trash,
    unfold_more,
    unfold_less,
    backup_table,
    arrow_back,
    mark_chat_unread,
    phone,
    desktop,
    align_justify_flex_start,
    align_justify_center,
    align_justify_flex_end,
    remove,
    refresh,
    south,
    format_align_center,
    format_align_left,
    format_align_right,
    format_align_justify,
    format_bold,
    format_underlined,
    format_italic,
    format_list_bulleted,
    format_list_numbered,
    format_strikethrough_s,
    ungroup,
    upload_file,
    title: title$1,
    align_space_around,
    icons: icons$2,
    facebook,
    instagram,
    pinterest,
    tiktok,
    twitter,
    whatsapp,
    youtube,
    linkedin,
    shapes,
    file_download,
    new_window,
    asterisk,
    download: download$1,
    search,
    arrow_right_alt,
    templates: templates$1,
    product: product$1
};

const get_icon = (icon, extra) => {
    if (icons$1.hasOwnProperty(icon)) {
        let icon_obj = Object.getOwnPropertyDescriptor(icons$1, icon);
        if (icon_obj && icon_obj.value && typeof icon_obj.value.get_icon === 'function') {
            return icon_obj.value.get_icon(extra);
        }
        else {
            return '';
        }
    }
    else {
        return '';
    }
};

const get_instance = (name) => {
    return Core$4.Instances.get_instance(name);
};
const save_instance = (instance) => {
    return Core$4.Instances.save_instance(instance);
};

const get_option = (name) => {
    return new Core$3.Options().get_option(name);
};
const update_options = (updated_options) => {
    new Core$3.Options().replace_options(updated_options);
};

var error_name = "Error";
var no_container_provided = "No container ID provided.";
var the_container_not_found = "The container ID was not found in the document.";
var the_container_duplicates = "The container ID is not unique.";
var the_instance_already_registered = "The instance is already registered.";
var no_head_tag_found = "The head tag was not found.";
var editor = "Editor";
var preview = "Preview";
var modules = "Modules";
var module = "Module";
var save = "Save";
var sections$5 = "Sections";
var column = "Column";
var text = "Text";
var button = "Button";
var menu = "Menu";
var html = "HTML";
var css = "CSS";
var divider = "Divider";
var spacer = "Spacer";
var image_text = "Image & Text";
var share = "Share";
var social = "Social";
var banner = "Banner";
var carousel = "Carousel";
var timer = "Timer";
var accordion = "Accordion";
var elements = "Elements";
var advanced = "Advanced";
var forms = "Forms";
var reviews = "Reviews";
var structures = "Structures";
var search_for_modules = "Search for modules ...";
var load_more = "Load More";
var template = "Template";
var search_for_images = "Search for images ...";
var media = "Media";
var upload = "Upload";
var drag_and_drop_files = "Drag & drop or <a href=\"#\">choose files</a>";
var supported_upload_format = "Supported formats: PNG, GIF and JPEG";
var images = "Images";
var videos = "Videos";
var show_all = "Show All";
var files = "Files";
var history = "History";
var today = "Today";
var restore = "Restore";
var invalid_tag = "Invalid tag:";
var unclosed_tags = "The code has unclosed tags.";
var extra_closed_tags = "The code has extra closed tags.";
var the_html_code_is_not_valid = "The html code is not valid.";
var cut = "Cut";
var copy = "Copy";
var paste = "Paste";
var drag_elements_here = "Drag elements here";
var go_back = "Go Back";
var background = "Background";
var margin = "Margin";
var margin_top = "Margin Top";
var margin_top_description = "Margin top position.";
var margin_right = "Margin Right";
var margin_right_description = "Margin right position.";
var margin_bottom = "Margin Bottom";
var margin_bottom_description = "Margin bottom position.";
var margin_left = "Margin Left";
var margin_left_description = "Margin left position.";
var no_element_found = "The element was not found.";
var no_element_options_found = "The element has no options.";
var option_invalid_parameters = "The option has no valid parameters.";
var option_not_found = "The option was not found.";
var saving_changes = "Saving changes ...";
var no_font_found = "The font was not found.";
var weight = "Weight";
var size = "Size";
var font_family = "Font Family";
var this_text_model = "This is a text model.";
var close = "Close";
var enter_url = "Https ...";
var invalid_protocol = "Invalid protocol.";
var unit = "Unit";
var padding = "Padding";
var padding_top = "Padding Top";
var padding_top_description = "Padding top position.";
var padding_right = "Padding Right";
var padding_right_description = "Padding right position.";
var padding_bottom = "Padding Bottom";
var padding_bottom_description = "Padding bottom position.";
var padding_left = "Padding Left";
var padding_left_description = "Padding left position.";
var color = "Color";
var colors = "Colors";
var color_background = "Background Color";
var color_background_description = "Choose background color.";
var color_text = "Text Color";
var color_text_description = "Choose text color.";
var color_bullets = "Bullets Color";
var color_bullets_description = "Choose bullets color.";
var height = "Height";
var line_height = "Line Height";
var line_height_description = "Choose line height.";
var letter_spacing = "Letter Spacing";
var letter_spacing_description = "Choose letter spacing.";
var font_family_description = "Choose font family.";
var font_size = "Font Size";
var font_size_description = "Choose font size.";
var font_weight = "Font Weight";
var font_weight_description = "Choose font weight.";
var text_align = "Text Align";
var text_align_description = "Choose text alignment.";
var column_color_background = "Column Background Color";
var column_color_background_description = "Choose column background color.";
var button_color_background = "Button Background Color";
var button_color_background_description = "Choose button background color.";
var button_color_text = "Button Text Color";
var button_color_text_description = "Choose button text color.";
var border = "Border";
var border_width = "Width";
var border_width_description = "Choose border width.";
var border_style = "Style";
var border_style_description = "Choose border style.";
var button_color_border = "Border Color";
var button_color_border_description = "Choose border color.";
var width = "Width";
var button_width = "Button Width";
var button_width_description = "Choose button width.";
var radius = "Radius";
var border_top_left_radius = "Top - Left";
var border_top_left_radius_description = "Choose the border top left radius.";
var border_top_right_radius = "Top - Right";
var border_top_right_radius_description = "Choose the border top right radius.";
var border_bottom_right_radius = "Bottom - Right";
var border_bottom_right_radius_description = "Choose the border bottom right radius.";
var border_bottom_left_radius = "Bottom - Left";
var border_bottom_left_radius_description = "Choose the border bottom left radius.";
var content = "Content";
var text_button_description = "Edit the button text.";
var url_button = "Button URL";
var url_button_description = "Edit the button url.";
var image = "Image";
var video = "Video";
var gallery = "Gallery";
var no_images_were_found = "No images were found.";
var min_width = "Min Width";
var min_width_description = "Choose the min width.";
var max_width = "Max Width";
var max_width_description = "Choose the max width.";
var position = "Position";
var image_position = "Image Position";
var image_position_description = "Choose image position.";
var button_position = "Button Position";
var button_position_description = "Choose button position.";
var cover = "Cover";
var url = "URL";
var url_image = "Image URL";
var url_image_description = "Edit the image url.";
var url_video = "Video URL";
var url_video_description = "Edit the video url.";
var title = "Title";
var icons = "Icons";
var a_sample_content_title = "A sample content title";
var text_title_description = "Edit the title.";
var title_width = "Width";
var title_width_description = "Choose the width.";
var divider_width = "Divider Width";
var divider_width_description = "Choose the width.";
var divider_height = "Divider Height";
var divider_height_description = "Choose the height.";
var color_divider_background = "Divider Background Color";
var color_divider_background_description = "Choose divider background color.";
var divider_position = "Divider Position";
var divider_position_description = "Choose divider position.";
var item = "Item";
var menu_position = "Menu Position";
var menu_position_description = "Choose menu position.";
var direction = "Direction";
var menu_direction = "Menu Direction";
var menu_direction_description = "Choose menu direction.";
var vertical = "Vertical";
var horizontal = "Horizontal";
var space = "Space";
var vertical_space_items = "Items Vertical Space";
var vertical_space_items_description = "Choose vertical space between items.";
var horizontal_space_items = "Items Horizontal Space";
var horizontal_space_items_description = "Choose horizontal space between items.";
var text_decoration = "Text Decoration";
var text_decoration_description = "Choose text decoration for items.";
var menu_item = "Item";
var menu_item_description = "Edit the menu item.";
var delete_it = "Delete";
var new_item = "New Item";
var clone = "Clone";
var icon_width = "Icons Width";
var icon_width_description = "Choose icons width.";
var icon_height = "Icons Height";
var icon_height_description = "Choose icons height.";
var icons_space = "Icons Space";
var icons_space_description = "Choose space between icons.";
var networks = "Networks";
var network_was_not_found = "The network was not found.";
var icon_position = "Icon Position";
var icon_position_description = "Choose icon position.";
var search_for_icons = "Search for icons ...";
var no_icons_were_found = "No icons were found.";
var resource_not_found = "Resource not found.";
var internal_server_error = "Internal server error.";
var unknown_error_occurred = "Unknown error occurred.";
var create_module = "Create Module";
var name = "Name";
var enter_module_name = "Enter the module's name ...";
var description = "Description";
var enter_module_description = "Enter the module's description ...";
var category = "Category";
var uncategorized = "Uncategorized";
var header = "Header";
var footer = "Footer";
var no_modules_were_found = "No modules were found.";
var settings = "Settings";
var analytics = "Analytics";
var template_position = "Template Position";
var template_position_description = "Choose template position.";
var utm_source = "Trafic Source";
var utm_source_description = "Identify the advertiser, site, publication, etc. that is sending traffic to your property.";
var utm_enter_source = "Enter the utm_source ...";
var utm_medium = "Marketing Type";
var utm_medium_description = "The advertising or marketing medium, for example: cpc, banner, email newsletter.";
var utm_enter_medium = "Enter the utm_medium ...";
var utm_campaign = "Campaign";
var utm_campaign_description = "The individual campaign name, slogan, promo code, etc. for a product.";
var utm_enter_campaign = "Enter the utm_campaign ...";
var utm_term = "Paid Search Keywords";
var utm_term_description = "Identify paid search keywords.";
var utm_enter_term = "Enter the utm_term ...";
var utm_content = "Content Identification";
var utm_content_description = "Used to differentiate similar content, or links within the same ad.";
var utm_enter_content = "Enter the utm_content ...";
var export_template = "Export";
var html_css = "HTML";
var html_css_description = "Export the template in a HTML file with css inside.";
var download = "Download";
var google_analytics = "Google Analytics";
var google_analytics_description = "Add parameters to URLs to identify the campaigns that refer traffic.";
var template_width_description = "Choose template width.";
var ai_assistant = "AI Assistant";
var enter_a_prompt_here = "Enter a prompt here ...";
var welcome_email = "welcome email";
var generate_email_subject = "generate email subject";
var confirmation_email = "confirmation email";
var sales_promotional_email = "sales promotional email";
var generate_survey_email = "generate survey email";
var job_seeking_email = "job seeking email";
var generate_follow_up_email = "generate follow-up email";
var cancel = "Cancel";
var insert = "Insert";
var bard = "Bard";
var chatgpt = "ChatGPT";
var add_to_template = "Add to Template";
var templates = "Templates";
var product = "Product";
var product_short_description = "Product short description";
var product_size = "Size: XL";
var product_quantity = "Quantity: 1";
var product_price = "$99.00";
var product_name = "Product Name";
var product_description = "Product Description";
var product_size_category = "Product Size";
var product_quantity_category = "Product Quantity";
var url_product = "Product URL";
var url_product_description = "Edit the product url.";
var product_price_category = "Product Price";
var color_border = "Border Color";
var color_border_description = "Choose border color.";
var url_icon = "Icon URL";
var url_icon_description = "Edit the icon url.";
var icons_position = "Icons Position";
var icons_position_description = "Choose icons position.";
var color_link = "Link Color";
var color_link_description = "Choose link color.";
var color_link_border = "Link Border Color";
var color_link_border_description = "Choose link border color.";
var buttons = "Buttons";
var categories = "Categories";
var template_color_background = "Template Color";
var template_color_background_description = "Choose a default template's color.";
var language_main = {
	error_name: error_name,
	no_container_provided: no_container_provided,
	the_container_not_found: the_container_not_found,
	the_container_duplicates: the_container_duplicates,
	the_instance_already_registered: the_instance_already_registered,
	no_head_tag_found: no_head_tag_found,
	editor: editor,
	preview: preview,
	modules: modules,
	module: module,
	save: save,
	sections: sections$5,
	column: column,
	text: text,
	button: button,
	menu: menu,
	html: html,
	css: css,
	divider: divider,
	spacer: spacer,
	image_text: image_text,
	share: share,
	social: social,
	banner: banner,
	carousel: carousel,
	timer: timer,
	accordion: accordion,
	elements: elements,
	advanced: advanced,
	forms: forms,
	reviews: reviews,
	structures: structures,
	search_for_modules: search_for_modules,
	load_more: load_more,
	template: template,
	search_for_images: search_for_images,
	media: media,
	upload: upload,
	drag_and_drop_files: drag_and_drop_files,
	supported_upload_format: supported_upload_format,
	images: images,
	videos: videos,
	show_all: show_all,
	files: files,
	history: history,
	today: today,
	restore: restore,
	invalid_tag: invalid_tag,
	unclosed_tags: unclosed_tags,
	extra_closed_tags: extra_closed_tags,
	the_html_code_is_not_valid: the_html_code_is_not_valid,
	cut: cut,
	copy: copy,
	paste: paste,
	drag_elements_here: drag_elements_here,
	go_back: go_back,
	background: background,
	margin: margin,
	margin_top: margin_top,
	margin_top_description: margin_top_description,
	margin_right: margin_right,
	margin_right_description: margin_right_description,
	margin_bottom: margin_bottom,
	margin_bottom_description: margin_bottom_description,
	margin_left: margin_left,
	margin_left_description: margin_left_description,
	no_element_found: no_element_found,
	no_element_options_found: no_element_options_found,
	option_invalid_parameters: option_invalid_parameters,
	option_not_found: option_not_found,
	saving_changes: saving_changes,
	no_font_found: no_font_found,
	weight: weight,
	size: size,
	font_family: font_family,
	this_text_model: this_text_model,
	close: close,
	enter_url: enter_url,
	invalid_protocol: invalid_protocol,
	unit: unit,
	padding: padding,
	padding_top: padding_top,
	padding_top_description: padding_top_description,
	padding_right: padding_right,
	padding_right_description: padding_right_description,
	padding_bottom: padding_bottom,
	padding_bottom_description: padding_bottom_description,
	padding_left: padding_left,
	padding_left_description: padding_left_description,
	color: color,
	colors: colors,
	color_background: color_background,
	color_background_description: color_background_description,
	color_text: color_text,
	color_text_description: color_text_description,
	color_bullets: color_bullets,
	color_bullets_description: color_bullets_description,
	height: height,
	line_height: line_height,
	line_height_description: line_height_description,
	letter_spacing: letter_spacing,
	letter_spacing_description: letter_spacing_description,
	font_family_description: font_family_description,
	font_size: font_size,
	font_size_description: font_size_description,
	font_weight: font_weight,
	font_weight_description: font_weight_description,
	text_align: text_align,
	text_align_description: text_align_description,
	column_color_background: column_color_background,
	column_color_background_description: column_color_background_description,
	button_color_background: button_color_background,
	button_color_background_description: button_color_background_description,
	button_color_text: button_color_text,
	button_color_text_description: button_color_text_description,
	border: border,
	border_width: border_width,
	border_width_description: border_width_description,
	border_style: border_style,
	border_style_description: border_style_description,
	button_color_border: button_color_border,
	button_color_border_description: button_color_border_description,
	width: width,
	button_width: button_width,
	button_width_description: button_width_description,
	radius: radius,
	border_top_left_radius: border_top_left_radius,
	border_top_left_radius_description: border_top_left_radius_description,
	border_top_right_radius: border_top_right_radius,
	border_top_right_radius_description: border_top_right_radius_description,
	border_bottom_right_radius: border_bottom_right_radius,
	border_bottom_right_radius_description: border_bottom_right_radius_description,
	border_bottom_left_radius: border_bottom_left_radius,
	border_bottom_left_radius_description: border_bottom_left_radius_description,
	content: content,
	text_button_description: text_button_description,
	url_button: url_button,
	url_button_description: url_button_description,
	image: image,
	video: video,
	gallery: gallery,
	no_images_were_found: no_images_were_found,
	min_width: min_width,
	min_width_description: min_width_description,
	max_width: max_width,
	max_width_description: max_width_description,
	position: position,
	image_position: image_position,
	image_position_description: image_position_description,
	button_position: button_position,
	button_position_description: button_position_description,
	cover: cover,
	url: url,
	url_image: url_image,
	url_image_description: url_image_description,
	url_video: url_video,
	url_video_description: url_video_description,
	title: title,
	icons: icons,
	a_sample_content_title: a_sample_content_title,
	text_title_description: text_title_description,
	title_width: title_width,
	title_width_description: title_width_description,
	divider_width: divider_width,
	divider_width_description: divider_width_description,
	divider_height: divider_height,
	divider_height_description: divider_height_description,
	color_divider_background: color_divider_background,
	color_divider_background_description: color_divider_background_description,
	divider_position: divider_position,
	divider_position_description: divider_position_description,
	item: item,
	menu_position: menu_position,
	menu_position_description: menu_position_description,
	direction: direction,
	menu_direction: menu_direction,
	menu_direction_description: menu_direction_description,
	vertical: vertical,
	horizontal: horizontal,
	space: space,
	vertical_space_items: vertical_space_items,
	vertical_space_items_description: vertical_space_items_description,
	horizontal_space_items: horizontal_space_items,
	horizontal_space_items_description: horizontal_space_items_description,
	text_decoration: text_decoration,
	text_decoration_description: text_decoration_description,
	menu_item: menu_item,
	menu_item_description: menu_item_description,
	delete_it: delete_it,
	new_item: new_item,
	clone: clone,
	icon_width: icon_width,
	icon_width_description: icon_width_description,
	icon_height: icon_height,
	icon_height_description: icon_height_description,
	icons_space: icons_space,
	icons_space_description: icons_space_description,
	networks: networks,
	network_was_not_found: network_was_not_found,
	icon_position: icon_position,
	icon_position_description: icon_position_description,
	search_for_icons: search_for_icons,
	no_icons_were_found: no_icons_were_found,
	resource_not_found: resource_not_found,
	internal_server_error: internal_server_error,
	unknown_error_occurred: unknown_error_occurred,
	create_module: create_module,
	name: name,
	enter_module_name: enter_module_name,
	description: description,
	enter_module_description: enter_module_description,
	category: category,
	uncategorized: uncategorized,
	header: header,
	footer: footer,
	no_modules_were_found: no_modules_were_found,
	settings: settings,
	analytics: analytics,
	template_position: template_position,
	template_position_description: template_position_description,
	utm_source: utm_source,
	utm_source_description: utm_source_description,
	utm_enter_source: utm_enter_source,
	utm_medium: utm_medium,
	utm_medium_description: utm_medium_description,
	utm_enter_medium: utm_enter_medium,
	utm_campaign: utm_campaign,
	utm_campaign_description: utm_campaign_description,
	utm_enter_campaign: utm_enter_campaign,
	utm_term: utm_term,
	utm_term_description: utm_term_description,
	utm_enter_term: utm_enter_term,
	utm_content: utm_content,
	utm_content_description: utm_content_description,
	utm_enter_content: utm_enter_content,
	export_template: export_template,
	html_css: html_css,
	html_css_description: html_css_description,
	download: download,
	google_analytics: google_analytics,
	google_analytics_description: google_analytics_description,
	template_width_description: template_width_description,
	ai_assistant: ai_assistant,
	enter_a_prompt_here: enter_a_prompt_here,
	welcome_email: welcome_email,
	generate_email_subject: generate_email_subject,
	confirmation_email: confirmation_email,
	sales_promotional_email: sales_promotional_email,
	generate_survey_email: generate_survey_email,
	job_seeking_email: job_seeking_email,
	generate_follow_up_email: generate_follow_up_email,
	cancel: cancel,
	insert: insert,
	bard: bard,
	chatgpt: chatgpt,
	add_to_template: add_to_template,
	templates: templates,
	product: product,
	product_short_description: product_short_description,
	product_size: product_size,
	product_quantity: product_quantity,
	product_price: product_price,
	product_name: product_name,
	product_description: product_description,
	product_size_category: product_size_category,
	product_quantity_category: product_quantity_category,
	url_product: url_product,
	url_product_description: url_product_description,
	product_price_category: product_price_category,
	color_border: color_border,
	color_border_description: color_border_description,
	url_icon: url_icon,
	url_icon_description: url_icon_description,
	icons_position: icons_position,
	icons_position_description: icons_position_description,
	color_link: color_link,
	color_link_description: color_link_description,
	color_link_border: color_link_border,
	color_link_border_description: color_link_border_description,
	buttons: buttons,
	categories: categories,
	template_color_background: template_color_background,
	template_color_background_description: template_color_background_description
};

var english_lang = /*#__PURE__*/Object.freeze({
    __proto__: null,
    a_sample_content_title: a_sample_content_title,
    accordion: accordion,
    add_to_template: add_to_template,
    advanced: advanced,
    ai_assistant: ai_assistant,
    analytics: analytics,
    background: background,
    banner: banner,
    bard: bard,
    border: border,
    border_bottom_left_radius: border_bottom_left_radius,
    border_bottom_left_radius_description: border_bottom_left_radius_description,
    border_bottom_right_radius: border_bottom_right_radius,
    border_bottom_right_radius_description: border_bottom_right_radius_description,
    border_style: border_style,
    border_style_description: border_style_description,
    border_top_left_radius: border_top_left_radius,
    border_top_left_radius_description: border_top_left_radius_description,
    border_top_right_radius: border_top_right_radius,
    border_top_right_radius_description: border_top_right_radius_description,
    border_width: border_width,
    border_width_description: border_width_description,
    button: button,
    button_color_background: button_color_background,
    button_color_background_description: button_color_background_description,
    button_color_border: button_color_border,
    button_color_border_description: button_color_border_description,
    button_color_text: button_color_text,
    button_color_text_description: button_color_text_description,
    button_position: button_position,
    button_position_description: button_position_description,
    button_width: button_width,
    button_width_description: button_width_description,
    buttons: buttons,
    cancel: cancel,
    carousel: carousel,
    categories: categories,
    category: category,
    chatgpt: chatgpt,
    clone: clone,
    close: close,
    color: color,
    color_background: color_background,
    color_background_description: color_background_description,
    color_border: color_border,
    color_border_description: color_border_description,
    color_bullets: color_bullets,
    color_bullets_description: color_bullets_description,
    color_divider_background: color_divider_background,
    color_divider_background_description: color_divider_background_description,
    color_link: color_link,
    color_link_border: color_link_border,
    color_link_border_description: color_link_border_description,
    color_link_description: color_link_description,
    color_text: color_text,
    color_text_description: color_text_description,
    colors: colors,
    column: column,
    column_color_background: column_color_background,
    column_color_background_description: column_color_background_description,
    confirmation_email: confirmation_email,
    content: content,
    copy: copy,
    cover: cover,
    create_module: create_module,
    css: css,
    cut: cut,
    default: language_main,
    delete_it: delete_it,
    description: description,
    direction: direction,
    divider: divider,
    divider_height: divider_height,
    divider_height_description: divider_height_description,
    divider_position: divider_position,
    divider_position_description: divider_position_description,
    divider_width: divider_width,
    divider_width_description: divider_width_description,
    download: download,
    drag_and_drop_files: drag_and_drop_files,
    drag_elements_here: drag_elements_here,
    editor: editor,
    elements: elements,
    enter_a_prompt_here: enter_a_prompt_here,
    enter_module_description: enter_module_description,
    enter_module_name: enter_module_name,
    enter_url: enter_url,
    error_name: error_name,
    export_template: export_template,
    extra_closed_tags: extra_closed_tags,
    files: files,
    font_family: font_family,
    font_family_description: font_family_description,
    font_size: font_size,
    font_size_description: font_size_description,
    font_weight: font_weight,
    font_weight_description: font_weight_description,
    footer: footer,
    forms: forms,
    gallery: gallery,
    generate_email_subject: generate_email_subject,
    generate_follow_up_email: generate_follow_up_email,
    generate_survey_email: generate_survey_email,
    go_back: go_back,
    google_analytics: google_analytics,
    google_analytics_description: google_analytics_description,
    header: header,
    height: height,
    history: history,
    horizontal: horizontal,
    horizontal_space_items: horizontal_space_items,
    horizontal_space_items_description: horizontal_space_items_description,
    html: html,
    html_css: html_css,
    html_css_description: html_css_description,
    icon_height: icon_height,
    icon_height_description: icon_height_description,
    icon_position: icon_position,
    icon_position_description: icon_position_description,
    icon_width: icon_width,
    icon_width_description: icon_width_description,
    icons: icons,
    icons_position: icons_position,
    icons_position_description: icons_position_description,
    icons_space: icons_space,
    icons_space_description: icons_space_description,
    image: image,
    image_position: image_position,
    image_position_description: image_position_description,
    image_text: image_text,
    images: images,
    insert: insert,
    internal_server_error: internal_server_error,
    invalid_protocol: invalid_protocol,
    invalid_tag: invalid_tag,
    item: item,
    job_seeking_email: job_seeking_email,
    letter_spacing: letter_spacing,
    letter_spacing_description: letter_spacing_description,
    line_height: line_height,
    line_height_description: line_height_description,
    load_more: load_more,
    margin: margin,
    margin_bottom: margin_bottom,
    margin_bottom_description: margin_bottom_description,
    margin_left: margin_left,
    margin_left_description: margin_left_description,
    margin_right: margin_right,
    margin_right_description: margin_right_description,
    margin_top: margin_top,
    margin_top_description: margin_top_description,
    max_width: max_width,
    max_width_description: max_width_description,
    media: media,
    menu: menu,
    menu_direction: menu_direction,
    menu_direction_description: menu_direction_description,
    menu_item: menu_item,
    menu_item_description: menu_item_description,
    menu_position: menu_position,
    menu_position_description: menu_position_description,
    min_width: min_width,
    min_width_description: min_width_description,
    module: module,
    modules: modules,
    name: name,
    network_was_not_found: network_was_not_found,
    networks: networks,
    new_item: new_item,
    no_container_provided: no_container_provided,
    no_element_found: no_element_found,
    no_element_options_found: no_element_options_found,
    no_font_found: no_font_found,
    no_head_tag_found: no_head_tag_found,
    no_icons_were_found: no_icons_were_found,
    no_images_were_found: no_images_were_found,
    no_modules_were_found: no_modules_were_found,
    option_invalid_parameters: option_invalid_parameters,
    option_not_found: option_not_found,
    padding: padding,
    padding_bottom: padding_bottom,
    padding_bottom_description: padding_bottom_description,
    padding_left: padding_left,
    padding_left_description: padding_left_description,
    padding_right: padding_right,
    padding_right_description: padding_right_description,
    padding_top: padding_top,
    padding_top_description: padding_top_description,
    paste: paste,
    position: position,
    preview: preview,
    product: product,
    product_description: product_description,
    product_name: product_name,
    product_price: product_price,
    product_price_category: product_price_category,
    product_quantity: product_quantity,
    product_quantity_category: product_quantity_category,
    product_short_description: product_short_description,
    product_size: product_size,
    product_size_category: product_size_category,
    radius: radius,
    resource_not_found: resource_not_found,
    restore: restore,
    reviews: reviews,
    sales_promotional_email: sales_promotional_email,
    save: save,
    saving_changes: saving_changes,
    search_for_icons: search_for_icons,
    search_for_images: search_for_images,
    search_for_modules: search_for_modules,
    sections: sections$5,
    settings: settings,
    share: share,
    show_all: show_all,
    size: size,
    social: social,
    space: space,
    spacer: spacer,
    structures: structures,
    supported_upload_format: supported_upload_format,
    template: template,
    template_color_background: template_color_background,
    template_color_background_description: template_color_background_description,
    template_position: template_position,
    template_position_description: template_position_description,
    template_width_description: template_width_description,
    templates: templates,
    text: text,
    text_align: text_align,
    text_align_description: text_align_description,
    text_button_description: text_button_description,
    text_decoration: text_decoration,
    text_decoration_description: text_decoration_description,
    text_title_description: text_title_description,
    the_container_duplicates: the_container_duplicates,
    the_container_not_found: the_container_not_found,
    the_html_code_is_not_valid: the_html_code_is_not_valid,
    the_instance_already_registered: the_instance_already_registered,
    this_text_model: this_text_model,
    timer: timer,
    title: title,
    title_width: title_width,
    title_width_description: title_width_description,
    today: today,
    uncategorized: uncategorized,
    unclosed_tags: unclosed_tags,
    unit: unit,
    unknown_error_occurred: unknown_error_occurred,
    upload: upload,
    url: url,
    url_button: url_button,
    url_button_description: url_button_description,
    url_icon: url_icon,
    url_icon_description: url_icon_description,
    url_image: url_image,
    url_image_description: url_image_description,
    url_product: url_product,
    url_product_description: url_product_description,
    url_video: url_video,
    url_video_description: url_video_description,
    utm_campaign: utm_campaign,
    utm_campaign_description: utm_campaign_description,
    utm_content: utm_content,
    utm_content_description: utm_content_description,
    utm_enter_campaign: utm_enter_campaign,
    utm_enter_content: utm_enter_content,
    utm_enter_medium: utm_enter_medium,
    utm_enter_source: utm_enter_source,
    utm_enter_term: utm_enter_term,
    utm_medium: utm_medium,
    utm_medium_description: utm_medium_description,
    utm_source: utm_source,
    utm_source_description: utm_source_description,
    utm_term: utm_term,
    utm_term_description: utm_term_description,
    vertical: vertical,
    vertical_space_items: vertical_space_items,
    vertical_space_items_description: vertical_space_items_description,
    video: video,
    videos: videos,
    weight: weight,
    welcome_email: welcome_email,
    width: width
});

const get_words = (lang) => {
    if (lang === 'english') {
        return english_lang;
    }
    else {
        return false;
    }
};

const lang = get_option('language') ? get_option('language') : 'english';
const word_list = get_words(lang);
const get_word = (word) => {
    return word_list[word] ? word_list[word] : '';
};

const sections$4 = {
    get_section: (params) => {
        let section = '<div class="ec-sections">';
        section += '<div class="ec-section-actions">'
            + '<button type="button" class="ec-section-action-hide-button">'
            + params.icons('close', { 'icon_class': 'ec-section-action-hide-icon' })
            + '<span class="ec-section-action-hide-text">'
            + params.words('close')
            + '</span>'
            + '</button>'
            + '</div>';
        let general_elements_list = '';
        let advanced_elements_list = '';
        let elements_keys = Object.keys(elements$2);
        let total_elements = elements_keys.length;
        for (var f = 0; f < total_elements; f++) {
            let name_space = Object.getOwnPropertyDescriptor(elements$2, elements_keys[f])?.value.Resources.Elements;
            let key = Object.keys(name_space)[0];
            let element_class = new name_space[key]();
            let get_element = element_class.get_element(params);
            let get_info = element_class.get_info(params);
            if (get_info.category === 'general') {
                general_elements_list += get_element;
            }
            else {
                advanced_elements_list += get_element;
            }
        }
        if (params.options('builder')?.resources?.elements?.sections?.general?.enabled) {
            let show = params.options('builder')?.resources?.elements?.sections?.general?.show ? ' ec-section-show' : '';
            section += '<div class="ec-section' + show + '">'
                + '<div class="ec-section-header">'
                + '<button type="button">'
                + params.icons('elements_section', { 'icon_class': 'ec-section-header-icon' })
                + '<span>'
                + params.words('elements')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<div class="ec-elements">'
                + general_elements_list
                + '</div>'
                + '</div>'
                + '</div>';
        }
        if (params.options('builder')?.resources?.elements?.sections?.advanced?.enabled) {
            let show = params.options('builder')?.resources?.elements?.sections?.advanced?.show ? ' ec-section-show' : '';
            section += '<div class="ec-section' + show + '">'
                + '<div class="ec-section-header">'
                + '<button type="button">'
                + params.icons('elements_section_advanced', { 'icon_class': 'ec-section-header-icon' })
                + '<span>'
                + params.words('advanced')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<div class="ec-elements">'
                + advanced_elements_list
                + '</div>'
                + '</div>'
                + '</div>';
        }
        section += '</div>';
        setTimeout(() => {
            if (Object.keys(elements$2).length > 0) {
                for (let element of Object.keys(elements$2)) {
                    let name_space = Object.getOwnPropertyDescriptor(elements$2, element)?.value.Resources.Elements;
                    let key = Object.keys(name_space)[0];
                    let element_class = new name_space[key]();
                    let element_events = element_class.get_events(params);
                    if (typeof element_events !== 'undefined') {
                        for (let event of element_events) {
                            if (!event) {
                                continue;
                            }
                            let iframe = (typeof event.iframe !== 'undefined') ? event.iframe : '';
                            if (typeof event.element === 'string') {
                                new Classes$1.Events().addEventListener(params.selector.querySelectorAll(event.element), event.action, event.target, iframe, event.capture);
                            }
                            else {
                                new Classes$1.Events().addEventListener('', event.action, event.target, iframe, event.capture);
                            }
                        }
                    }
                }
            }
            if (Object.keys(templates$2).length > 0) {
                for (let template of Object.keys(templates$2)) {
                    let the_options_class = Object.getOwnPropertyDescriptor(templates$2, template)?.value;
                    let template_events = new the_options_class(params).get_events(params);
                    if (template_events !== undefined) {
                        for (let event of template_events) {
                            let iframe = (typeof event.iframe !== 'undefined') ? event.iframe : '';
                            if (typeof event.element === 'string') {
                                new Classes$1.Events().addEventListener(params.selector.querySelectorAll(event.element), event.action, event.target, iframe, event.capture);
                            }
                            else {
                                new Classes$1.Events().addEventListener('', event.action, event.target, iframe, event.capture);
                            }
                        }
                    }
                }
            }
        }, 200);
        return section;
    }
};

const sections$3 = {
    get_section: (params) => {
        let section = '<div class="ec-sections">';
        section += '<div class="ec-section-actions">'
            + '<button type="button" class="ec-section-action-hide-button">'
            + params.icons('close', { 'icon_class': 'ec-section-action-hide-icon' })
            + '<span class="ec-section-action-hide-text">'
            + params.words('close')
            + '</span>'
            + '</button>'
            + '</div>';
        if (params.options('builder')?.resources?.rows?.sections?.general?.enabled) {
            let show = params.options('builder')?.resources?.rows?.sections?.general?.show ? ' ec-section-show' : '';
            let rows = '<div class="ec-row">'
                + '<div class="ec-row-columns-one" data-format="1">'
                + '<div></div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-row">'
                + '<div class="ec-row-columns-two" data-format="2">'
                + '<div></div>'
                + '<div></div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-row">'
                + '<div class="ec-row-columns-three" data-format="3">'
                + '<div></div>'
                + '<div></div>'
                + '<div></div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-row">'
                + '<div class="ec-row-columns-four" data-format="4">'
                + '<div></div>'
                + '<div></div>'
                + '<div></div>'
                + '<div></div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-row">'
                + '<div class="ec-row-columns-two-2" data-format="5">'
                + '<div></div>'
                + '<div></div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-row">'
                + '<div class="ec-row-columns-two-3" data-format="6">'
                + '<div></div>'
                + '<div></div>'
                + '</div>'
                + '</div>';
            if (typeof params.only_rows === 'number') {
                return rows;
            }
            section += '<div class="ec-section' + show + '">'
                + '<div class="ec-section-header">'
                + '<button type="button">'
                + params.icons('low_priority', { 'icon_class': 'ec-section-header-icon' })
                + '<span>'
                + params.words('structures')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<div class="ec-rows">'
                + rows
                + '</div>'
                + '</div>'
                + '</div>';
        }
        section += '</div>';
        return section;
    }
};

const sections$2 = {
    get_section: (params) => {
        let categories = '';
        let modules = new Classes$1.Modules();
        let categories_list = modules.get_modules_categories(params);
        if (categories_list.length > 0) {
            for (let category of categories_list) {
                categories += '<li>'
                    + '<a href="#" data-id="' + category.slug + '">'
                    + category.name
                    + '</a>'
                    + '</li>';
            }
        }
        let section = '<div class="ec-sections">';
        section += '<div class="ec-section-actions">'
            + '<button type="button" class="ec-section-action-hide-button">'
            + params.icons('close', { 'icon_class': 'ec-section-action-hide-icon' })
            + '<span class="ec-section-action-hide-text">'
            + params.words('close')
            + '</span>'
            + '</button>'
            + '</div>';
        if (params.options('builder')?.resources?.modules?.sections?.general?.enabled) {
            let show = params.options('builder')?.resources?.modules?.sections?.general?.show ? ' ec-section-show' : '';
            section += '<div class="ec-section' + show + '">'
                + '<div class="ec-section-header">'
                + '<button type="button">'
                + params.icons('modules_section', { 'icon_class': 'ec-section-header-icon' })
                + '<span>'
                + params.words('modules')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<div class="ec-block ec-modules-component">'
                + '<div class="ec-block-header">'
                + '<div class="ec-search ec-search-personal">'
                + '<div class="ec-search-personal-search">'
                + '<input type="text" class="ec-search-input ec-search-personal-modules" placeholder="' + params.words('search_for_modules') + '" id="ec-search-my-modules-section-' + params.template_id + '-input">'
                + '<a href="#">'
                + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                + params.icons('cancel', { 'icon_class': 'ec-cancel-icon' })
                + '</a>'
                + '</div>'
                + '<div class="ec-search-default-search">'
                + '<input type="text" class="ec-search-input ec-search-default-modules" placeholder="' + params.words('search_for_modules') + '" id="ec-search-default-modules-section-' + params.template_id + '-input">'
                + '<a href="#">'
                + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                + params.icons('cancel', { 'icon_class': 'ec-cancel-icon' })
                + '</a>'
                + '</div>'
                + '<div class="ec-search-buttons">'
                + '<button type="button" class="ec-search-button ec-search-active-button" data-target="#ec-search-my-modules-section-' + params.template_id + '">'
                + params.icons('person_pin_circle')
                + '</button>'
                + '<button type="button" class="ec-search-button" data-target="#ec-search-modules-section-' + params.template_id + '">'
                + params.icons('new_label')
                + '</button>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-block-body">'
                + '<div class="ec-search-sections">'
                + '<div class="ec-search-section ec-search-section-show" id="ec-search-my-modules-section-' + params.template_id + '" loading="lazy">'
                + '<div class="ec-modules-list">'
                + '<div class="ec-modules"></div>'
                + '<div class="ec-no-modules-found">'
                + '<p>'
                + params.words('no_modules_were_found')
                + '</p>'
                + '</div>'
                + '<div class="ec-loading-button">'
                + '<a href="#">'
                + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                + params.words('load_more')
                + '</a>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-search-section" id="ec-search-modules-section-' + params.template_id + '">'
                + '<div class="ec-option-selector">'
                + '<div class="ec-option-selector-dropdown">'
                + '<button type="button" class="ec-button ec-display-flex ec-justify-content-space-between">'
                + '<span>'
                + params.words('categories')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-dropdown-icon' })
                + '</button>'
                + '<div class="ec-option-selector-menu">'
                + '<ul class="ec-categories">'
                + categories
                + '</ul>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '<div class="ec-modules-list">'
                + '<div class="ec-modules"></div>'
                + '<div class="ec-no-modules-found">'
                + '<p>'
                + params.words('no_modules_were_found')
                + '</p>'
                + '</div>'
                + '<div class="ec-loading-button">'
                + '<a href="#">'
                + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                + params.words('load_more')
                + '</a>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>'
                + '</div>';
        }
        section += '</div>';
        return section;
    }
};

const sections$1 = {
    get_section: (params) => {
        let section = '<div class="ec-sections">';
        section += '<div class="ec-section-actions">'
            + '<button type="button" class="ec-section-action-hide-button">'
            + params.icons('close', { 'icon_class': 'ec-section-action-hide-icon' })
            + '<span class="ec-section-action-hide-text">'
            + params.words('close')
            + '</span>'
            + '</button>'
            + '</div>';
        if (params.options('builder')?.resources?.history?.sections?.general?.enabled) {
            let show = params.options('builder')?.resources?.history?.sections?.general?.show ? ' ec-section-show' : '';
            section += '<div class="ec-section ec-section-history' + show + '">'
                + '<div class="ec-section-header">'
                + '<button type="button">'
                + params.icons('history_section', { 'icon_class': 'ec-section-header-icon' })
                + '<span>'
                + params.words('history')
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body"></div>'
                + '<div class="ec-section-footer">'
                + '<div class="ec-loading-button">'
                + '<a href="#">'
                + params.icons('autorenew', { 'icon_class': 'ec-load-more-icon' })
                + params.words('load_more')
                + '</a>'
                + '</div>'
                + '</div>'
                + '</div>';
        }
        section += '</div>';
        return section;
    }
};

var sections = {
    elements: sections$4,
    rows: sections$3,
    modules: sections$2,
    history: sections$1
};

const get_section = (section, params) => {
    if (sections) {
        let sections_list = '';
        let sections_keys = Object.keys(sections);
        let total_sections = sections_keys.length;
        let i = 0;
        do {
            if (section !== sections_keys[i]) {
                i++;
                continue;
            }
            sections_list += Object.getOwnPropertyDescriptor(sections, sections_keys[i])?.value.get_section(params);
            i++;
        } while (i < total_sections);
        return sections_list;
    }
    else {
        return '';
    }
};

const get_styles = (scope) => {
    let styles = '';
    if (scope === 'template') {
        let style = document.createElement('style');
        style.textContent = `

            @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100;200;300;400;500;600&family=Didact+Gothic&family=Work+Sans:wght@200;300;400;500&display=swap');

            body {
                padding-right: 0;
                overflow: visible;
                height: 100%;
                color: #12130f;
            }

            body::-webkit-scrollbar {
                width: 4px;
                height: 4px;
            }
            
            body::-webkit-scrollbar-track {
                border-radius: 4px;
                background-color: transparent;
            }
            
            body::-webkit-scrollbar-thumb {
                border-radius: 4px;
                background-color: transparent;
            }

            body.ec-composer-template-preview {
                pointer-events: none;
                user-select: none;
            }

            body [contenteditable="true"] {
                outline: none;
            }
            
            body table {
                font-size: inherit;
            }

            body a {
                text-decoration: none;
                color: #2984ff;
            }

            .ec-disable-mouse * {
                pointer-events: none !important;
            }

            .ec-composer-template {
                margin: 0 10px 300px !important;
                padding-bottom: 100px !important;
            }

            .ec-composer-template .ec-composer-template-row td {
                vertical-align: top;
            }   
            
            @media only screen and (max-width: 600px) {

                .ec-composer-template-row > tbody > tr {
                    display: block;
                }

                .ec-composer-template-row > tbody > tr > td {
                    display: block;
                    width: 100% !important;
                }

            }

            .ec-composer-template .ec-composer-template-content-line-temp-show {
                animation: 0.3s ec-show-content ease-in-out forwards; 
            }            

            .ec-composer-template .ec-composer-template-content-line-drop {
                position: relative;
                width: 100%;
                outline: 1px solid #d7b740;
                opacity: 0;
                transition: opacity 0.3s ease-in;
            }

            .ec-composer-template .ec-composer-template-content-line-drop.ec-composer-template-content-line-drop-active {
                opacity: 1;
            }           
            
            .ec-composer-template .ec-composer-template-content-line-drop > span {
                position: absolute;
                top: -9px;
                left: 50%;
                z-index: 9999;
                margin-left: -24px;
                width: 20px;
                height: 19px;
                border-radius: 3px;
                text-align: center;
                font-size: 17px;
                color: #FFFFFF;
                background-color: #d7b740;
            } 
            
            .ec-composer-template .ec-composer-template-content-line {
                padding: 0 15px;
                box-sizing: border-box;
                width: 100%;
                outline: none;
                outline-offset: -2px;
            }

            .ec-composer-template .ec-composer-template-content-line:hover {
                position: relative;
            }

            .ec-composer-template .ec-composer-template-content-line.ec-composer-template-content-line-drag-active {
                position: absolute;
                right: 0;
                left: 0;
                cursor: grab;
            }

            .ec-composer-template button {
                cursor: pointer;
            }   

            .ec-composer-template .ec-composer-template-content-line .ec-composer-template-content-move-button {
                display: none;
                position: absolute;
                z-index: 3;
                top: calc(50% - 15px);
                left: 0;
                width: 27px;
                height: 30px;
                border: 0;
                border-radius: 0 3px 3px 0;
                color: #FFFFFF;
                background-color: #d7b740;
                cursor: grab;
            }
            
            .ec-composer-template button > * {
                font-size: 22px;
                pointer-events: none;
            }
            
            .ec-composer-template .ec-composer-template-content-buttons-group {
                display: none;
                position: absolute;
                top: 50%;
                right: 0;
                z-index: 3;
                margin-top: -15px;
                border-radius: 3px 0 0 3px;
                overflow: hidden;
            }

            .ec-composer-template .ec-composer-template-content-buttons-group > button {
                width: 35px;
                height: 30px;
                border: 0;
                color: #FFFFFF;
                background-color: #d7b740;
            }

            .ec-composer-template .ec-composer-template-content-line:only-child .ec-composer-template-content-buttons-group > .ec-composer-template-content-delete-button {
                opacity: 0.5;
                pointer-events: none;
            }
            
            .ec-composer-template .ec-composer-template-content-buttons-group > button:hover {
                background-color: rgba(215, 183, 64, 0.8);
            }

            .ec-composer-template .ec-composer-template-content-line:hover {
                outline: 2px solid #d7b740;
            }          
 
            .ec-composer-template .ec-composer-template-content-line:hover .ec-composer-template-content-move-button,
            .ec-composer-template .ec-composer-template-content-line:hover .ec-composer-template-content-buttons-group {
                display: block;
            }

            .ec-composer-template .ec-composer-template-content-line.ec-composer-template-content-line-drag-active {
                outline: none;
            }

            .ec-composer-template .ec-composer-template-content-line.ec-composer-template-content-line-drag-active .ec-composer-template-content-move-button,
            .ec-composer-template .ec-composer-template-content-line.ec-composer-template-content-line-drag-active .ec-composer-template-content-buttons-group {
                display: none;
            }   
            
            .ec-composer-template .ec-composer-template-content-line:has(.ec-composer-template-cell:hover) {
                outline: none;
            }
            
            .ec-composer-template .ec-composer-template-content-line:has(.ec-composer-template-cell:hover) .ec-composer-template-content-move-button,
            .ec-composer-template .ec-composer-template-content-line:has(.ec-composer-template-cell:hover) .ec-composer-template-content-buttons-group {
                display: none;
            }  

            body:has(.ec-element-content.ec-composer-element-drag-active) .ec-composer-template .ec-composer-template-content-line,
            body:has(.ec-element-content ~ .ec-composer-template-cell-drop) .ec-composer-template .ec-element-content {
                position: unset;
                outline: none;
            }

            body:has(.ec-element-content.ec-composer-element-drag-active) .ec-composer-template .ec-composer-template-content-move-button,
            body:has(.ec-element-content.ec-composer-element-drag-active) .ec-composer-template .ec-composer-template-content-buttons-group {
                display: none;
            }
            
            .ec-composer-template .ec-element-content .ec-element-content-data:not([contenteditable]) > * {
                pointer-events: none;
            } 

            .ec-composer-template .ec-element-content[data-name="product"] .ec-element-content-data:not([contenteditable]) > * {
                pointer-events: all;
            }             
            
            .ec-composer-template .ec-element-content .ec-element-content-data .ec-element-cover {
                display: block;
                width: 100%;
                height: 72px;
                text-align: center;
                background-color: #f3f3f3;
            }
            
            .ec-composer-template .ec-element-content .ec-element-content-data .ec-element-cover > * {
                margin-top: 11px;
                font-size: 48px;
                color: #cccccc;
            }

            .ec-composer-template .ec-element-content .ec-composer-element-buttons-group {
                display: none;
                position: absolute;
                right: 0;
                bottom: -30px;
                z-index: 3;
                margin-top: -15px;
                border-radius: 0 0 3px 3px;
                overflow: hidden;
            }

            .ec-element-content.ec-composer-element-drag-active {
                position: absolute;
                right: 0;
                left: 0;
                cursor: grab;
            }

            .ec-element-content.ec-composer-element-drag-active .ec-composer-element-buttons-group {
                display: none;
            }

            .ec-composer-template .ec-element-content .ec-composer-element-buttons-group > button {
                width: 35px;
                height: 30px;
                border: 0;
                color: #FFFFFF;
                background-color: #f18f01;
            }

            .ec-composer-template .ec-element-content .ec-composer-element-buttons-group > button.ec-composer-element-move-button {
                cursor: grab;
            }            

            .ec-composer-template .ec-element-content .ec-composer-element-buttons-group > button:hover {
                background-color: rgba(241, 143, 1, 0.8);
            }
            
            .ec-composer-template .ec-element-content:hover,
            .ec-composer-template .ec-element-content.ec-element-content-active {
                position: relative;
                box-sizing: border-box;
                outline: 2px solid #f18f01;
                outline-offset: -2px;
            }
            
            .ec-composer-template .ec-element-content:hover .ec-composer-element-buttons-group,
            .ec-composer-template .ec-element-content.ec-element-content-active .ec-composer-element-buttons-group {
                display: block;
            }

            body:has(.ec-element-content.ec-composer-element-drag-active) .ec-composer-template .ec-element-content,
            body:has(.ec-element-content ~ .ec-composer-template-cell-drop) .ec-composer-template .ec-element-content {
                position: unset;
                outline: none;
            }

            body:has(.ec-element-content.ec-composer-element-drag-active) .ec-composer-template .ec-composer-element-buttons-group,
            body:has(.ec-element-content ~ .ec-composer-template-cell-drop) .ec-composer-template .ec-composer-element-buttons-group {
                display: none;
            }

            .ec-composer-template .ec-composer-template-cell .ec-composer-template-cell-placeholder {
                display: block;
                padding: 2px;
                width: 100%;
                height: 70px;
                text-align: center;
                text-decoration: none;
                font-size: 24px;
            }

            .ec-composer-template .ec-composer-template-row .ec-composer-template-cell:has(.ec-composer-template-cell-placeholder) {
                padding: 0;
                background-color: #FFFFFF;
            }

            .ec-composer-template .ec-composer-template-cell .ec-composer-template-cell-placeholder > span {
                display: block;
                width: calc(100% - 6px);
                height: 68px;
                border: 1px dashed #dcdee2;
                background-color: #fdfdfd;
            }
            
            .ec-composer-template .ec-composer-template-cell .ec-composer-template-cell-placeholder .ec-composer-template-cell-placeholder-icon {
                display: block;
                line-height: 45px;
                color: #5b567f;
            }
            
            .ec-composer-template .ec-composer-template-cell .ec-composer-template-cell-placeholder .ec-composer-template-cell-placeholder-text {
                display: block;
                margin-top: -2px;
                font-family: 'Poppins', sans-serif;
                font-size: 12px;
                color: #8e94a2;
            }

            .ec-composer-template .ec-composer-template-cell-drop {
                position: relative;
                width: 100%;
                outline: 1px solid #f18f01;
                opacity: 0;
                transition: all 0.3s ease-in;
            }

            .ec-composer-template .ec-composer-template-cell-drop.ec-composer-template-cell-drop-active {
                opacity: 1;
            }

            .ec-composer-template .ec-composer-template-cell-drop > span {
                position: absolute;
                top: -9px;
                left: 50%;
                margin-left: -10px;
                width: 20px;
                height: 19px;
                border-radius: 3px;
                text-align: center;
                font-size: 17px;
                color: #FFFFFF;
                background-color: #f18f01;
            } 

            .ec-show-content {
                animation: 0.3s ec-show-content ease-in-out forwards; 
            }

            .ec-hide-content {
                animation: 0.3s ec-hide-content ease-in-out forwards; 
            }
            
            @keyframes ec-show-content {

                0% {
                    transform: scaleY(0.4);
                    opacity: 0;
                }
            
                100% {
                    transform: scaleY(1);
                    opacity: 1;
                }
            
            }

            @keyframes ec-hide-content {

                0% {
                    transform: scaleY(1);
                    opacity: 1;
                }
            
                100% {
                    transform: scaleY(0.4);
                    opacity: 0;
                }
            
            }   

        `;
        styles = style.outerHTML;
    }
    else if (scope === 'html') {
        let style = document.createElement('style');
        style.textContent = `

            body {
                margin: 0 8px;
            }

            body [contenteditable="true"] {
                outline: none;
                scrollbar-width: none;
                -ms-overflow-style: none;                
            }

            body::-webkit-scrollbar {
                display: none;
            }

            .ec-composer-code-editor {
                display: flex;
                position: absolute;
                top: 0;
                right: 5px;
                bottom: 0;
                left: 0;
            }
            
            .ec-composer-code-index {
                padding-top: 5px;
                width: 30px;
                user-select: none;
                overflow-y: auto;
                overflow-x: hidden;
                scrollbar-width: none;
                -ms-overflow-style: none;     
            }

            .ec-composer-code-index::-webkit-scrollbar {
                display: none;
            }

            .ec-composer-code-editor-line-index {
                box-sizing: border-box;
                padding: 0 2px 0 0;
                min-height: 22px;
                line-height: 22px;
                text-align: right;
                font-family: system-ui;
                font-size: 11px;
                font-weight: 600;
                color: #FFFFFF;
                overflow-y: auto;
            }

            .ec-composer-code-lines {
                margin-left: 3px;
                padding: 5px 0 0 0;
                width: calc(100% - 33px);
                overflow: auto;
            }

            .ec-composer-code-lines::-webkit-scrollbar-corner {
                background-color: #20201d;
            }

            .ec-composer-code-lines::-webkit-scrollbar {
                width: 6px;
                height: 6px;
            }
            
            .ec-composer-code-lines::-webkit-scrollbar-track {
                width: 6px;
                height: 6px;
            }
            
            .ec-composer-code-lines::-webkit-scrollbar-thumb {
                width: 6px;
                height: 6px;
                border-radius: 6px;
                background-color: #FFFFFF;
            } 

            .ec-composer-code-editor-line {
                width: auto;
                min-height: 23px;
                animation: ec-composer-code-editor-line-new 0.1s forwards;
            }
            
            @keyframes ec-composer-code-editor-line-new {

                0% {
                    opacity: 0;
                    caret-color: transparent;   
                }

                99% {
                    opacity: 0;
                    caret-color: transparent;   
                }

                100% {
                    opacity: 1;
                    caret-color: auto;   
                }

            }

            .ec-composer-code-editor-line-code {
                display: inline;
                position: relative;
                box-sizing: border-box;
                white-space: nowrap;
                padding: 0 5px 0;
                width: auto;
                min-height: 23px;
                line-height: 22px;
                letter-spacing: 0.6px;
                font-family: system-ui;
                font-size: 11px;
                font-weight: 600;
                color: #e8eaed;
            }

            .ec-composer-code-editor-line-code > * {
                display: inline;
            }

            .ec-code-tag-start-open:has(+ .ec-code-tag-start-name + .ec-code-tag-close),
            .ec-code-tag-start-name:has(~ .ec-code-tag-start-open, + .ec-code-tag-close),
            .ec-code-tag-start-open + .ec-code-tag-start-name + .ec-code-tag-close,
            .ec-code-tag-start-open:has(+ .ec-code-tag-start-name + .ec-code-whitespace),
            .ec-code-tag-start-name:has(~ .ec-code-tag-start-open, + .ec-code-whitespace),                    
            .ec-code-tag-end-open:has(+ .ec-code-tag-end-slash + .ec-code-tag-end-name + .ec-code-tag-close),
            .ec-code-tag-end-slash:has(~ .ec-code-tag-end-open, + .ec-code-tag-end-name + .ec-code-tag-close),
            .ec-code-tag-end-open + .ec-code-tag-end-slash + .ec-code-tag-end-name:has(+ .ec-code-tag-close),
            .ec-code-tag-end-open + .ec-code-tag-end-slash + .ec-code-tag-end-name + .ec-code-tag-close,
            .ec-code-tag-meta-value + .ec-composer-code-editor-caret + .ec-code-tag-close,
            .ec-code-tag-meta-name + .ec-composer-code-editor-caret + .ec-code-tag-close,                        
            .ec-code-tag-meta-name + .ec-composer-code-editor-caret + .ec-code-tag-close,
            .ec-code-tag-end-slash + .ec-composer-code-editor-caret + .ec-code-tag-close,
            .ec-code-whitespace + .ec-code-tag-close,
            .ec-code-tag-meta-value + .ec-code-tag-close,
            .ec-code-tag-meta-name + .ec-code-tag-close,
            .ec-code-tag-end-slash + .ec-code-tag-close,
            .ec-code-string + .ec-code-tag-close,           
            .ec-code-tag-end-slash:has(+ .ec-code-tag-close) {
                color: #20a4f3;
            }
            
            .ec-code-hidden-comment-open,
            .ec-code-hidden-comment-exclamation,
            .ec-code-hidden-comment-line,
            .ec-code-hidden-comment-text,
            .ec-code-hidden-comment-whitespace,
            .ec-code-hidden-comment-condition-rules,
            .ec-code-hidden-comment-condition-parenthese,
            .ec-code-hidden-comment-tag-end-open,
            .ec-code-hidden-comment-tag-end-slash,
            .ec-code-hidden-comment-tag-start-name,
            .ec-code-hidden-comment-tag-meta-name,
            .ec-code-hidden-comment-tag-meta-equal,
            .ec-code-hidden-comment-tag-meta-value,
            .ec-code-hidden-comment-tag-close,
            .ec-code-hidden-comment-tag-end-name,
            .ec-code-hidden-comment-close {
                color: #c1cfda;
            }

            .ec-code-tag-meta-name,
            .ec-code-tag-meta-equal {
                color: #b9d9eb;
            }

            .ec-code-tag-meta-value,
            .ec-code-tag-meta-value + .ec-code-string,
            .ec-code-tag-meta-value-slash,
            .ec-code-tag-meta-value-slash + .ec-code-tag-meta-value {
                color: #f6be9a;
            }

        `;
        styles = style.outerHTML;
    }
    else if (scope === 'css') {
        let style = document.createElement('style');
        style.textContent = `

            body {
                margin: 0 8px;
            }

            body [contenteditable="true"] {
                outline: none;
                scrollbar-width: none;
                -ms-overflow-style: none;                
            }

            body::-webkit-scrollbar {
                display: none;
            }

            .ec-composer-code-editor {
                display: flex;
                position: absolute;
                top: 0;
                right: 5px;
                bottom: 0;
                left: 0;
            }
            
            .ec-composer-code-index {
                padding-top: 5px;
                width: 30px;
                user-select: none;
                overflow-y: auto;
                overflow-x: hidden;
                scrollbar-width: none;
                -ms-overflow-style: none;     
            }

            .ec-composer-code-index::-webkit-scrollbar {
                display: none;
            }

            .ec-composer-code-editor-line-index {
                box-sizing: border-box;
                padding: 0 2px 0 0;
                min-height: 22px;
                line-height: 22px;
                text-align: right;
                font-family: system-ui;
                font-size: 11px;
                font-weight: 600;
                color: #FFFFFF;
                overflow-y: auto;
            }

            .ec-composer-code-lines {
                margin-left: 3px;
                padding: 5px 0 0 0;
                width: calc(100% - 33px);
                overflow: auto;
            }

            .ec-composer-code-lines::-webkit-scrollbar-corner {
                background-color: #20201d;
            }

            .ec-composer-code-lines::-webkit-scrollbar {
                width: 6px;
                height: 6px;
            }
            
            .ec-composer-code-lines::-webkit-scrollbar-track {
                width: 6px;
                height: 6px;
            }
            
            .ec-composer-code-lines::-webkit-scrollbar-thumb {
                width: 6px;
                height: 6px;
                border-radius: 6px;
                background-color: #FFFFFF;
            } 

            .ec-composer-code-editor-line {
                width: auto;
                min-height: 23px;
                animation: ec-composer-code-editor-line-new 0.1s forwards;
            }
            
            @keyframes ec-composer-code-editor-line-new {

                0% {
                    opacity: 0;
                    caret-color: transparent;   
                }

                99% {
                    opacity: 0;
                    caret-color: transparent;   
                }

                100% {
                    opacity: 1;
                    caret-color: auto;   
                }

            }

            .ec-composer-code-editor-line-code {
                display: inline;
                position: relative;
                box-sizing: border-box;
                white-space: nowrap;
                padding: 0 5px 0;
                width: auto;
                min-height: 23px;
                line-height: 22px;
                letter-spacing: 0.6px;
                font-family: system-ui;
                font-size: 11px;
                font-weight: 600;
                color: #e8eaed;
            }

            .ec-composer-code-editor-line-code > * {
                display: inline;
            }

            .ec-code-css-comment {
                color: #cbd2dd;
            }
            
            .ec-code-css-text {
                color: #d7c0ae;
            }            

            .ec-code-css-curly-bracket-open,
            .ec-code-css-curly-bracket-close {
                color: #ead637;
            }
            
            .ec-code-css-curly-bracket-open {
                margin-left: 5px;
            }

            .ec-code-css-dots,
            .ec-code-css-end {
                color: #b1bfbf;
            }

            .ec-code-css-text:has(+ .ec-code-css-dots) {
                color: #c2e1ff;
            } 
            
            .ec-code-css-text + .ec-code-css-dots + .ec-code-css-text {
                color: #c39a93;
            } 

            .ec-code-css-at:has(+ .ec-code-css-media),
            .ec-code-css-at + .ec-code-css-media,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text,
            .ec-code-css-at:has(+ .ec-code-css-import),
            .ec-code-css-at + .ec-code-css-import {
                color: #66c3ff;
            }

            .ec-code-css-dots:has(+ .ec-code-css-root),
            .ec-code-css-dots + .ec-code-css-root {
                color: #e88c8c;
            }            

            .ec-code-css-at + .ec-code-css-import + .ec-code-css-text {
                color: #d7fcd4;
            }
            
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-round-bracket-open,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots + .ec-code-css-text + .ec-code-css-round-bracket-close,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text + .ec-code-css-round-bracket-open,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots + .ec-code-css-text + .ec-code-css-round-bracket-close {
                color: #d7fcd4;
            }

            .ec-code-css-at + .ec-code-css-media + .ec-code-css-round-bracket-open + .ec-code-css-text,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text + .ec-code-css-round-bracket-open + .ec-code-css-text {
                color: #b6cca1;
            }

            .ec-code-css-at + .ec-code-css-media + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots {
                color: #ebfef5;
            }  
            
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots + .ec-code-css-text,
            .ec-code-css-at + .ec-code-css-media + .ec-code-css-text + .ec-code-css-round-bracket-open + .ec-code-css-text + .ec-code-css-dots + .ec-code-css-text {
                color: #e09d90;
            }
            
            .ec-code-css-variable:has(+ .ec-code-css-text + .ec-code-css-dots),
            .ec-code-css-variable + .ec-code-css-text:has(+ .ec-code-css-dots) {
                color: #e88c8c;
            }

            .ec-code-css-comment2:has(+ .ec-code-css-text),
            .ec-code-css-comment2 + .ec-code-css-text {
                color: #cbd2dd;
            }            

        `;
        styles = style.outerHTML;
    }
    else if (scope === 'default') {
        let style = document.createElement('style');
        style.setAttribute('data-scope', 'default');
        let fonts_link = get_fonts_link();
        style.textContent = `

            @import url('${fonts_link}');

            body {
                display: grid;
                margin: 0;
                min-height: 100vh;
            }

            table {
                margin: 0;
                padding: 0;
                border-collapse: collapse;
                border-spacing: 0;
            }
              
            th, td {
                padding: 0;
            }

            td:has(.ec-composer-template-row) {
                display: block;
                text-align: center;
            }

            .ec-composer-template {
                position: relative;
                margin: 0;
                font-family: 'Lato', sans-serif;
                font-size: 14px;
                background-color: transparent;
                transition: all 0.3s ease;
            }

            .ec-composer-template-editor.ec-composer-template {
                transform: scaleY(0);
                transform-origin: top;
            }

            .ec-composer-template * {
                margin: 0;
                padding: 0;
                border-collapse: collapse;
            } 
        
            .ec-composer-template-content-line {
                display: flex;
                justify-content: center;
            }
            
            .ec-composer-template-left .ec-composer-template-content-line {
                justify-content: start;
            }

            .ec-composer-template-center .ec-composer-template-content-line {
                justify-content: center;
            }  
            
            .ec-composer-template-right .ec-composer-template-content-line {
                justify-content: end;
            }            
            
            .ec-composer-template-content-line .ec-composer-template-content {
                display: inline-table;
                width: 100%;
            }

            .ec-composer-template-row {
                display: inline-table;
                width: 950px;
                max-width: 100%;
                background-color: transparent;
            }  

            .ec-composer-template .ec-composer-template-row td {
                vertical-align: top;
            }     
            
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(1) {
                width: 100%;
            }
            
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(2),
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(2) ~ .ec-composer-template .ec-composer-template-row td {
                width: 50%;
            }
            
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(3),
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(3) ~ .ec-composer-template .ec-composer-template-row td {
                width: 33.3333%;
            }
            
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(4),
            .ec-composer-template .ec-composer-template-row td:first-child:nth-last-child(4) ~ .ec-composer-template .ec-composer-template-row td {
                width: 25%;
            }

            .ec-composer-template .ec-composer-template-row .ec-composer-template-cell {
                box-sizing: border-box;
                width: 100%;
            }
            
            .ec-composer-template .ec-element-content .ec-element-content-data:not([contenteditable]) {
                display: flex;
                cursor: pointer;
            }

            .ec-element-content .ec-element-content-data {
                display: flex;
                box-sizing: border-box;
                width: 100%;
                flex-direction: column;
            }

            .ec-element-content[data-name="menu"] .ec-element-content-data > ul {
                max-width: fit-content;
            }             

            .ec-element-content[data-name="text"] p,
            .ec-element-content[data-name="text"] ul {
                margin-bottom: 15px;
                width: 100%;
            }  

            .ec-element-content[data-name="text"] .ec-element-content-data > *:last-child {
                margin: 0;
            }

            .ec-element-content[data-name="button"] .ec-element-content-data {
                display: inherit !important;
            }           
            
            .ec-element-content[data-name="button"] a {
                display: inline-block;
                box-sizing: border-box;
                text-decoration: none;
            }

            .ec-element-content[data-name="image"] a,
            .ec-element-content[data-name="video"] a {
                display: block;
                line-height: 0;
            }  

            .ec-element-content[data-name="icons"] img {
                width: fit-content;
            } 
            
            .ec-element-content[data-name="product"] .ec-element-product {
                display: grid;
                grid-template-columns: 20% 60% calc(20% - 60px);
                grid-gap: 10px;
                padding: 7px 0;
                border-bottom: 1px solid;
            }

            .ec-element-content[data-name="product"] .ec-element-cover {
                margin: 4px auto 0;
                width: 80% !important;
            }    
            
            .ec-element-content[data-name="product"] .ec-element-image {
                width: 100%;
                text-align: center;
            }            

            .ec-element-content[data-name="product"] .ec-element-product-image img {
                max-width: 100%;
                max-height: 80px;
            }

            .ec-element-content[data-name="product"] .ec-element-product-image,
            .ec-element-content[data-name="product"] .ec-element-product-price {
                display: flex;
            }

            .ec-element-content[data-name="product"] .ec-element-product-price h3 {
                width: 100%;
            }
            
            .ec-element-content[data-name="product"] .ec-element-product > * {
                pointer-events: all;
            }   

            @media only screen and (max-width: 949px) {
                
                .ec-composer-template-row {
                    width: 100%;
                }

            }
            
            @media only screen and (max-width: 600px) {

                .ec-composer-template-row > tbody > tr {
                    display: block;
                }

                .ec-composer-template-row > tbody > tr > td {
                    display: block;
                    width: 100% !important;
                }

            }

        `;
        styles = style.outerHTML;
    }
    else if (scope === 'library') {
        let style = document.createElement('style');
        style.textContent = `

            .ec-display-block {
                display: block;
            } 
            
            .ec-display-inline-block {
                display: inline-block;
            }   
            
            .ec-display-none {
                display: none;
            }
            
            .ec-display-flex {
                display: flex;
            } 
            
            .ec-display-grid {
                display: grid;
            }
            
            .ec-no-list-bullets {
                list-style-type: none;
            }

        `;
        styles = style.outerHTML;
    }
    return styles;
};
const prepare_styles = (element_id, properties, element_styles) => {
    if (properties.length > 0) {
        let elements_styles = {};
        let styles = '';
        for (let property of properties) {
            let element_name = property.element_name ? property.element_name : '';
            delete property.element_name;
            if (element_name.length > 0) {
                if (typeof elements_styles[element_name] !== 'undefined') {
                    elements_styles[element_name].push({
                        [Object.keys(property)[0].replaceAll('_', '-')]: property[Object.keys(property)[0]]
                    });
                }
                else {
                    elements_styles[element_name] = [{
                            [Object.keys(property)[0].replaceAll('_', '-')]: property[Object.keys(property)[0]]
                        }];
                }
                continue;
            }
            styles += `\n    ` + Object.keys(property)[0].replaceAll('_', '-') + ': ' + property[Object.keys(property)[0]] + `;`;
        }
        let style = document.createElement('style');
        style.setAttribute('data-element', element_id);
        let css_style = `.ec-element-content[data-id="${element_id}"] .ec-element-content-data {`;
        css_style += styles;
        css_style += `\n` + `}`;
        if (Object.keys(elements_styles).length > 0) {
            for (let element of Object.keys(elements_styles)) {
                css_style += `\n.ec-element-content[data-id="${element_id}"] .ec-element-content-data ${element} {`;
                css_style += `\n`;
                if (elements_styles[element].length > 0) {
                    for (let property of elements_styles[element]) {
                        css_style += `    ` + Object.keys(property)[0] + ': ' + Object.values(property)[0] + `;`;
                    }
                }
                css_style += `\n` + `}`;
            }
        }
        css_style += element_styles;
        css_style += `\n@media only screen and (max-width: 600px) {`;
        css_style += `\n    .ec-element-content[data-id="${element_id}"] .ec-element-content-data {`;
        css_style += `        ` + styles;
        css_style += `\n    }`;
        if (Object.keys(elements_styles).length > 0) {
            for (let element of Object.keys(elements_styles)) {
                css_style += `\n    .ec-element-content[data-id="${element_id}"] .ec-element-content-data ${element} {`;
                css_style += `\n`;
                if (elements_styles[element].length > 0) {
                    for (let property of elements_styles[element]) {
                        css_style += `        ` + Object.keys(property)[0] + ': ' + Object.values(property)[0] + `;`;
                    }
                }
                css_style += `\n    }`;
            }
        }
        css_style += `\n}`;
        style.innerHTML = css_style;
        return style.outerHTML;
    }
};
const adapt_styles = (property_name, property_value) => {
    if (property_name === 'justify-content') {
        return property_value.toString().replace('left', 'start').replace('right', 'end');
    }
    else if (property_name === 'align-self') {
        return property_value.toString().replace('left', 'start').replace('right', 'end');
    }
    else {
        return property_value;
    }
};
const adapt_selector = (selector) => {
    selector = selector.replaceAll('&gt;', '>');
    return selector;
};
const update_property_value = (sheet, element_id, element_name, property_name, property_value, device) => {
    let style_list = '';
    if (sheet !== null) {
        if (sheet.cssRules.length > 0) {
            for (let rule of sheet.cssRules) {
                if (typeof rule.href !== 'undefined') {
                    style_list += rule.cssText;
                    continue;
                }
                if (element_id) {
                    if (typeof rule.media !== 'undefined') {
                        style_list += '@media ' + rule.conditionText + ' {';
                        if (rule.conditionText.replaceAll(' ', '').search('(max-width:600px)') > -1) {
                            if (rule.cssRules.length > 0) {
                                for (let media_rule of rule.cssRules) {
                                    style_list += adapt_selector(media_rule.selectorText) + ' {';
                                    let style = media_rule.style;
                                    let property_found = 0;
                                    for (let property of media_rule.style) {
                                        if (((((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name) || (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) && (property === property_name)) && (device === 'mobile')) {
                                            style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                            property_found = 1;
                                        }
                                        else {
                                            style_list += property + ': ' + style.getPropertyValue(property) + ';';
                                        }
                                    }
                                    if ((property_found < 1) && (device !== 'desktop')) {
                                        if (((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name)) {
                                            style_list += property_name + ': ' + adapt_styles(property_name, property_value) + ';';
                                        }
                                        else if (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name) {
                                            style_list += property_name + ': ' + property_value + ';';
                                        }
                                    }
                                    style_list += '}';
                                }
                            }
                        }
                        else {
                            if (rule.cssRules.length > 0) {
                                for (let media_rule of rule.cssRules) {
                                    style_list += adapt_selector(media_rule.selectorText) + ' {';
                                    let style = media_rule.style;
                                    let property_found = 0;
                                    for (let property of media_rule.style) {
                                        if (((((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name) || (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) && (property === property_name)) && (device === 'mobile')) {
                                            style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                            property_found = 1;
                                        }
                                        else {
                                            style_list += property + ': ' + style.getPropertyValue(property) + ';';
                                        }
                                    }
                                    if ((property_found < 1) && (device !== 'desktop')) {
                                        if (((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name)) {
                                            style_list += property_name + ': ' + adapt_styles(property_name, property_value) + ';';
                                        }
                                        else if (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name) {
                                            style_list += property_name + ': ' + property_value + ';';
                                        }
                                    }
                                    style_list += '}';
                                }
                            }
                        }
                        style_list += '}';
                    }
                    else {
                        style_list += adapt_selector(rule.selectorText) + ' {';
                        let style = rule.style;
                        let property_found = 0;
                        for (let property of rule.style) {
                            if (((((rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name) || (rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) && (property === property_name)) && (device === 'desktop')) {
                                style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                property_found = 1;
                            }
                            else {
                                style_list += property + ': ' + style.getPropertyValue(property) + ';';
                            }
                        }
                        if ((property_found < 1) && (device === 'desktop')) {
                            if (((rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name)) {
                                style_list += property_name + ': ' + adapt_styles(property_name, property_value) + ';';
                            }
                            else if (rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name) {
                                style_list += property_name + ': ' + property_value + ';';
                            }
                        }
                        style_list += '}';
                    }
                }
                else {
                    if (typeof rule.media !== 'undefined') {
                        style_list += '@media ' + rule.conditionText + ' {';
                        if (rule.conditionText.replaceAll(' ', '').search('(max-width:600px)') > -1) {
                            if (rule.cssRules.length > 0) {
                                for (let media_rule of rule.cssRules) {
                                    style_list += adapt_selector(media_rule.selectorText) + ' {';
                                    let style = media_rule.style;
                                    let property_found = 0;
                                    for (let property of media_rule.style) {
                                        if (((((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name) || (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) && (property === property_name)) && (device === 'mobile')) {
                                            style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                            property_found = 1;
                                        }
                                        else {
                                            style_list += property + ': ' + style.getPropertyValue(property) + ';';
                                        }
                                    }
                                    if ((property_found < 1) && (device !== 'desktop')) {
                                        if (((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name)) {
                                            style_list += property_name + ': ' + adapt_styles(property_name, property_value) + ';';
                                        }
                                        else if (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name) {
                                            style_list += property_name + ': ' + property_value + ';';
                                        }
                                    }
                                    style_list += '}';
                                }
                            }
                        }
                        else {
                            if (rule.cssRules.length > 0) {
                                for (let media_rule of rule.cssRules) {
                                    style_list += adapt_selector(media_rule.selectorText) + ' {';
                                    let style = media_rule.style;
                                    let property_found = 0;
                                    for (let property of media_rule.style) {
                                        if (((((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name) || (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name)) && (property === property_name)) && (device === 'mobile')) {
                                            style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                            property_found = 1;
                                        }
                                        else {
                                            style_list += property + ': ' + style.getPropertyValue(property) + ';';
                                        }
                                    }
                                    if ((property_found < 1) && (device !== 'desktop')) {
                                        if (((media_rule.selectorText.replaceAll(' ', '') === '.ec-element-content[data-id="' + element_id + '"].ec-element-content-data') && !element_name)) {
                                            style_list += property_name + ': ' + adapt_styles(property_name, property_value) + ';';
                                        }
                                        else if (media_rule.selectorText.slice(-(' ' + element_name).length) === ' ' + element_name) {
                                            style_list += property_name + ': ' + property_value + ';';
                                        }
                                    }
                                    style_list += '}';
                                }
                            }
                        }
                        style_list += '}';
                    }
                    else {
                        style_list += adapt_selector(rule.selectorText) + ' {';
                        let style = rule.style;
                        let property_found = 0;
                        for (let property of rule.style) {
                            if ((rule.selectorText === element_name) && (property === property_name)) {
                                style_list += property + ': ' + adapt_styles(property, property_value) + ';';
                                property_found = 1;
                            }
                            else {
                                style_list += property + ': ' + style.getPropertyValue(property) + ';';
                            }
                        }
                        if ((rule.selectorText === element_name) && (property_found < 1)) {
                            style_list += property_name + ': ' + property_value + ';';
                        }
                        style_list += '}';
                    }
                }
            }
        }
    }
    return style_list;
};

const create_content = (format = 1) => {
    let table = document.createElement('table');
    table.classList.add('ec-composer-template-row');
    let row = table.insertRow(0);
    let cell = document.createElement('div');
    cell.classList.add('ec-composer-template-cell');
    let placeholder = document.createElement('a');
    placeholder.setAttribute('href', '#');
    placeholder.classList.add('ec-composer-template-cell-placeholder');
    let text = document.createElement('span');
    text.classList.add('ec-composer-template-cell-placeholder-text');
    text.innerText = get_word('drag_elements_here');
    placeholder.innerHTML = '<span>'
        + get_icon('place_item', { 'icon_class': 'ec-composer-template-cell-placeholder-icon' })
        + text.outerHTML
        + '</span>';
    cell.innerHTML = placeholder.outerHTML;
    if (format === 1) {
        row.insertCell(0).innerHTML = cell.outerHTML;
    }
    else if (format === 2) {
        row.insertCell(0).innerHTML = cell.outerHTML;
        row.insertCell(1).innerHTML = cell.outerHTML;
    }
    else if (format === 3) {
        row.insertCell(0).innerHTML = cell.outerHTML;
        row.insertCell(1).innerHTML = cell.outerHTML;
        row.insertCell(2).innerHTML = cell.outerHTML;
    }
    else if (format === 4) {
        row.insertCell(0).innerHTML = cell.outerHTML;
        row.insertCell(1).innerHTML = cell.outerHTML;
        row.insertCell(2).innerHTML = cell.outerHTML;
        row.insertCell(3).innerHTML = cell.outerHTML;
    }
    else if (format === 5) {
        row.insertCell(0).innerHTML = cell.outerHTML;
        row.insertCell(1).innerHTML = cell.outerHTML;
        row.cells[1].style.width = '75%';
    }
    else if (format === 6) {
        row.insertCell(0).innerHTML = cell.outerHTML;
        row.insertCell(1).innerHTML = cell.outerHTML;
        row.cells[0].style.width = '75%';
    }
    else if (format === 7) {
        row.classList.add('ec-composer-template-module-placeholder');
    }
    return table;
};
const get_content = (params) => {
    let format = (typeof params.format === 'number') ? params.format : 1;
    let content = create_content(format);
    let buttons = '';
    let mbutton = document.createElement('button');
    mbutton.setAttribute('type', 'button');
    mbutton.classList.add('ec-composer-template-content-move-button');
    mbutton.innerHTML = get_icon('drag');
    buttons += mbutton.outerHTML;
    let gbuttons = document.createElement('div');
    gbuttons.classList.add('ec-composer-template-content-buttons-group');
    let ncontent = document.createElement('button');
    ncontent.setAttribute('type', 'button');
    ncontent.classList.add('ec-composer-template-content-new-button');
    ncontent.innerHTML = get_icon('add_circle');
    gbuttons.innerHTML = ncontent.outerHTML;
    let scontent = document.createElement('button');
    scontent.setAttribute('type', 'button');
    scontent.classList.add('ec-composer-template-content-save-button');
    scontent.innerHTML = get_icon('save');
    gbuttons.innerHTML += scontent.outerHTML;
    let dcontent = document.createElement('button');
    dcontent.setAttribute('type', 'button');
    dcontent.classList.add('ec-composer-template-content-delete-button');
    dcontent.innerHTML = get_icon('trash');
    gbuttons.innerHTML += dcontent.outerHTML;
    buttons += gbuttons.outerHTML;
    let cline = document.createElement('div');
    cline.classList.add('ec-composer-template-content-line');
    let table = document.createElement('table');
    table.classList.add('ec-composer-template-content');
    let tbody = table.createTBody();
    tbody.insertRow(0).insertCell(0).innerHTML = content.outerHTML;
    cline.innerHTML = buttons + table.outerHTML;
    return cline;
};
const reset_contents = (params) => {
    let iframe = document.getElementsByClassName('ec-composer-template-container-active');
    if (iframe.length > 0) {
        let iframe_document = iframe[0].contentWindow.document;
        if (iframe_document.getElementsByClassName('ec-composer-template-content-line-drag-active').length > 0) {
            if (iframe_document.getElementsByClassName('ec-composer-template-content-line-drop-active').length > 0) {
                iframe_document.getElementsByClassName('ec-composer-template-content-line-temp')[0].classList.add('ec-composer-template-content-line-temp-show');
                let temp_show = iframe_document.getElementsByClassName('ec-composer-template-content-line-temp-show')[0];
                setTimeout(() => {
                    temp_show.classList.remove('ec-composer-template-content-line-temp-show');
                }, 300);
                iframe_document.getElementsByClassName('ec-composer-template-content-line-drop-active')[0].insertAdjacentElement('afterend', iframe_document.getElementsByClassName('ec-composer-template-content-line-temp')[0]);
            }
            iframe_document.getElementsByClassName('ec-composer-template-content-line-temp')[0].classList.remove('ec-composer-template-content-line-temp');
            if (iframe_document.getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                Array.from(iframe_document.getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                    item.remove();
                });
            }
            iframe_document.getElementsByClassName('ec-composer-template-content-line-drag-active')[0].remove();
        }
        else if (iframe_document.getElementsByClassName('ec-composer-element-drag-active').length > 0) {
            let temp = iframe_document.getElementsByClassName('ec-element-content-temp')[0];
            let cell = temp.closest('.ec-composer-template-cell');
            let drop_active = iframe_document.getElementsByClassName('ec-composer-template-cell-drop-active');
            if (drop_active.length > 0) {
                if (drop_active[0].closest('.ec-composer-template-cell').getElementsByClassName('ec-composer-template-cell-placeholder').length > 0) {
                    drop_active[0].closest('.ec-composer-template-cell').getElementsByClassName('ec-composer-template-cell-placeholder')[0].remove();
                }
                drop_active[0].insertAdjacentElement('afterend', temp);
            }
            temp.classList.remove('ec-element-content-temp');
            Array.from(iframe_document.getElementsByClassName('ec-composer-template-cell-drop')).map((drop) => {
                drop.remove();
            });
            iframe_document.getElementsByClassName('ec-composer-element-drag-active')[0].remove();
            if (cell && cell.getElementsByClassName('ec-element-content').length < 1) {
                let placeholder = document.createElement('a');
                placeholder.setAttribute('href', '#');
                placeholder.classList.add('ec-composer-template-cell-placeholder');
                placeholder.classList.add('ec-show-content');
                let text = document.createElement('span');
                text.classList.add('ec-composer-template-cell-placeholder-text');
                text.innerText = params.words('drag_elements_here');
                placeholder.innerHTML = '<span>'
                    + params.icons('place_item', { 'icon_class': 'ec-composer-template-cell-placeholder-icon' })
                    + text.outerHTML
                    + '</span>';
                cell.innerHTML = placeholder.outerHTML;
                setTimeout(() => {
                    cell.getElementsByClassName('ec-composer-template-cell-placeholder')[0].classList.remove('ec-show-content');
                }, 300);
            }
        }
        iframe[0].classList.remove('ec-composer-template-container-active');
    }
};

const types$1 = {
    color: Color,
    number: Number$1,
    selector: Selector,
    font: Font,
    align: Align,
    position: Position,
    text: Text,
    link: Link,
    images: Images,
    direction: Direction,
    menu: Menu,
    social: Social,
    icons: Icons,
    list: List,
    checkbox: Checkbox,
    ai: Ai
};
const get_element_by_name = (name, params) => {
    let name_space = Object.getOwnPropertyDescriptor(elements$2, 'ResourcesElements' + name.charAt(0).toUpperCase() + name.substring(1))?.value.Resources.Elements;
    if (typeof name_space !== 'undefined') {
        let key = Object.keys(name_space)[0];
        return new name_space[key]();
    }
    else {
        show_message(params.words('error_name') + ': ' + params.words('no_element_found'));
    }
};
const get_element_options = (options, properties_list, params, device) => {
    let options_by_device = (device === 'desktop') ? options.desktop : options.mobile;
    if (options_by_device.length > 0) {
        let sections = '';
        for (let option of options_by_device) {
            let options_list = '';
            if (option.list.length > 0) {
                for (let list of option.list) {
                    if (typeof list.template === 'undefined') {
                        continue;
                    }
                    if (list.element && (typeof properties_list[list.element] !== 'undefined') && (typeof properties_list[list.element][list.name.replaceAll('_', '-')] !== 'undefined')) {
                        list['custom'] = properties_list[list.element][list.name.replaceAll('_', '-')];
                    }
                    else if (!list.element && (typeof properties_list[device] !== 'undefined') && (typeof properties_list[device][list.name.replaceAll('_', '-')] !== 'undefined')) {
                        list['custom'] = properties_list[device][list.name.replaceAll('_', '-')];
                    }
                    let template = list.template;
                    let the_option = new types$1[template](params).get_option(list);
                    if (the_option) {
                        options_list += the_option;
                    }
                }
            }
            let showed_section = '';
            if ((typeof option.collapsed !== 'undefined') && (option.collapsed === true)) {
                showed_section = ' ec-section-show';
            }
            sections += '<div class="ec-section' + showed_section + '">'
                + '<div class="ec-section-header">'
                + '<button type="button" class="ec-justify-content-space-between">'
                + '<span>'
                + option.title
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<ul class="ec-composer-options-list">'
                + options_list
                + '</ul>'
                + '</div>'
                + '</div>';
        }
        return sections;
    }
    else {
        show_message(params.words('error_name') + ': ' + params.words('no_element_options_found'));
    }
};
const move_element = (selector, clientY, clientX, drop_icon) => {
    let element = selector.getElementsByClassName('ec-element-drag-active')[0];
    let top = (clientY - parseInt(element.getAttribute('data-top')));
    let left = (clientX - parseInt(element.getAttribute('data-left')));
    element.style.top = top + 'px';
    element.style.left = left + 'px';
    let iframe = selector.getElementsByClassName('ec-composer-template-container')[0];
    let idocument = iframe.contentDocument;
    if (!idocument) {
        return;
    }
    if (idocument.body.classList.contains('ec-composer-template-preview')) {
        return;
    }
    let client_rect = iframe.getBoundingClientRect();
    if ((clientX >= client_rect.x) && (clientX <= (client_rect.x + client_rect.width)) && (clientY >= client_rect.y) && (clientY <= (client_rect.y + client_rect.height))) {
        if (idocument.getElementsByClassName('ec-composer-template-cell-drop').length < 1) {
            let cells = idocument.querySelectorAll('.ec-composer-template .ec-composer-template-cell');
            if (cells.length > 0) {
                let tcells = cells.length;
                let c = 0;
                do {
                    let drops = document.createElement('div');
                    drops.classList.add('ec-composer-template-cell-drop');
                    drops.innerHTML = drop_icon;
                    cells[c].insertAdjacentElement('afterBegin', drops);
                    c++;
                } while (c < tcells);
            }
            let contents = idocument.querySelectorAll('.ec-composer-template .ec-element-content');
            if (contents.length > 0) {
                let tcontents = contents.length;
                let co = 0;
                do {
                    let drops = document.createElement('div');
                    drops.classList.add('ec-composer-template-cell-drop');
                    drops.innerHTML = drop_icon;
                    contents[co].insertAdjacentElement('afterEnd', drops);
                    co++;
                } while (co < tcontents);
            }
        }
        else {
            Array.from(idocument.getElementsByClassName('ec-composer-template-cell-drop')).map((item) => {
                item.classList.remove('ec-composer-template-cell-drop-active');
            });
            let found = 0;
            let next = 0;
            Array.from(idocument.getElementsByClassName('ec-composer-template-cell-drop')).forEach((element) => {
                if (found > 0)
                    return;
                let cell_rect = element.closest('.ec-composer-template-cell').getBoundingClientRect();
                if (element.nextElementSibling) {
                    if (!element.nextElementSibling.classList.contains('ec-composer-template-cell-placeholder')) {
                        cell_rect = element.nextElementSibling.getBoundingClientRect();
                    }
                }
                if (((((client_rect.y + cell_rect.y) + cell_rect.height) - top) > -1) && ((((client_rect.y + cell_rect.y) + cell_rect.height) - top) < 21) && (next < 1) && (left >= (client_rect.x + cell_rect.x)) && (left <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                    next++;
                    return;
                }
                else if (((((client_rect.y + cell_rect.y) + cell_rect.height) - top) > -1) && ((((client_rect.y + cell_rect.y) + cell_rect.height) - top) < 21) && (next < 1) && ((left + 103.69) <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                    next++;
                    return;
                }
                if (next > 0) {
                    top = top - 20;
                }
                if ((top >= (client_rect.y + cell_rect.y)) && (top <= ((client_rect.y + cell_rect.y) + cell_rect.height)) && (left >= (client_rect.x + cell_rect.x)) && (left <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                    element.classList.add('ec-composer-template-cell-drop-active');
                    found++;
                    if (next > 0)
                        next--;
                }
                else if ((top >= (client_rect.y + cell_rect.y)) && (top <= ((client_rect.y + cell_rect.y) + cell_rect.height)) && ((left + 103.69) >= (client_rect.x + cell_rect.x)) && ((left + 103.69) <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                    element.classList.add('ec-composer-template-cell-drop-active');
                    found++;
                    if (next > 0)
                        next--;
                }
                else if ((top <= (client_rect.y + cell_rect.y)) && ((left + 103.69) >= (client_rect.x + cell_rect.x)) && ((left + 103.69) <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                    element.classList.add('ec-composer-template-cell-drop-active');
                    found++;
                    if (next > 0)
                        next--;
                }
                else if (!element.nextElementSibling) {
                    if (idocument !== null) {
                        let line = element.closest('.ec-composer-template-content-line');
                        let lines = idocument.getElementsByClassName('ec-composer-template-content-line');
                        if ((lines.length - 1) === Array.from(lines).indexOf.call(lines, line)) {
                            if (((top + 77) >= (client_rect.y + cell_rect.y)) && ((left + 103.69) >= (client_rect.x + cell_rect.x)) && ((left + 103.69) <= ((client_rect.x + cell_rect.x) + cell_rect.width))) {
                                element.classList.add('ec-composer-template-cell-drop-active');
                                found++;
                                if (next > 0)
                                    next--;
                            }
                        }
                    }
                }
            });
        }
    }
};
const reset_elements = (params) => {
    if (params.selector.getElementsByClassName('ec-element-drag-active').length > 0) {
        params.selector.getElementsByClassName('ec-element-drag-active')[0].remove();
        let iframe = params.selector.querySelector('.ec-composer-template-container');
        params.selector.getElementsByClassName('ec-element-temp')[0].classList.add('ec-element-temp-show');
        let temp_show = params.selector.getElementsByClassName('ec-element-temp-show')[0];
        let drop_active = iframe.contentWindow.document.getElementsByClassName('ec-composer-template-cell-drop-active');
        if (drop_active.length > 0) {
            let element = get_element_by_name(temp_show.getAttribute('data-name'), params);
            if (typeof element !== 'undefined') {
                let buttons = '';
                let gbuttons = document.createElement('div');
                gbuttons.classList.add('ec-composer-element-buttons-group');
                let mbutton = document.createElement('button');
                mbutton.setAttribute('type', 'button');
                mbutton.classList.add('ec-composer-element-move-button');
                mbutton.innerHTML = params.icons('drag');
                gbuttons.innerHTML += mbutton.outerHTML;
                let clone = document.createElement('button');
                clone.setAttribute('type', 'button');
                clone.classList.add('ec-composer-element-clone-button');
                clone.innerHTML = params.icons('backup_table');
                gbuttons.innerHTML += clone.outerHTML;
                let delement = document.createElement('button');
                delement.setAttribute('type', 'button');
                delement.classList.add('ec-composer-element-delete-button');
                delement.innerHTML = params.icons('trash');
                gbuttons.innerHTML += delement.outerHTML;
                buttons += gbuttons.outerHTML;
                let element_content = element.get_content(params);
                let element_id = 'ec-element-' + Date.now();
                let div = document.createElement('div');
                div.innerHTML = '<div class="ec-element-content" data-id="' + element_id + '" data-name="' + temp_show.getAttribute('data-name') + '">'
                    + element_content
                    + buttons
                    + '</div>';
                drop_active[0].insertAdjacentElement('afterend', div.firstElementChild);
                let element_options = element.get_options(params);
                let element_styles = element.get_styles(element_id);
                if (element_options.desktop.length > 0) {
                    let properties = [];
                    for (let element_option of element_options.desktop) {
                        if (element_option.list.length > 0) {
                            for (let list of element_option.list) {
                                let template = list.template;
                                let css_property = new types$1[template](params).get_property(list);
                                if (typeof css_property !== 'undefined') {
                                    properties.push(css_property);
                                }
                            }
                        }
                    }
                    if (properties.length > 0) {
                        let styles = prepare_styles(element_id, properties, element_styles);
                        if (typeof styles !== 'undefined') {
                            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
                            if (iframe) {
                                let iframeDocument = iframe.contentDocument;
                                if (iframeDocument !== null) {
                                    iframeDocument.head.innerHTML += styles;
                                    setTimeout(() => {
                                        let style = iframeDocument.head.querySelector('style[data-element="' + element_id + '"]');
                                        if (style !== null) {
                                            let backup = new Classes$1.Backup();
                                            backup.update_css_element_id(element_id, params, style.innerHTML, false);
                                        }
                                    }, 1000);
                                }
                            }
                        }
                    }
                }
            }
            if (drop_active[0].closest('.ec-composer-template-cell').getElementsByClassName('ec-composer-template-cell-placeholder').length > 0) {
                drop_active[0].closest('.ec-composer-template-cell').getElementsByClassName('ec-composer-template-cell-placeholder')[0].remove();
            }
        }
        if (iframe.contentWindow.document.getElementsByClassName('ec-composer-template-cell-drop').length > 0) {
            Array.from(iframe.contentWindow.document.getElementsByClassName('ec-composer-template-cell-drop')).map((item) => {
                item.remove();
            });
        }
    }
};
const unselect_element = (params) => {
    let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
    let idocument = iframe.contentDocument;
    iframe.closest('.ec-composer-container').classList.remove('ec-composer-template-mobile');
    params.selector.querySelectorAll('.ec-composer-element-options-tabs > input[type="radio"]')[0].checked = true;
    params.selector.getElementsByClassName('ec-composer-element-options-area-body')[0].classList.remove('ec-composer-element-mobile-options');
    if (idocument.getElementsByClassName('ec-element-content-active').length > 0) {
        let active = idocument.getElementsByClassName('ec-element-content-active')[0];
        active.classList.remove('ec-element-content-active');
        let options = params.selector.getElementsByClassName('ec-composer-element-options')[0];
        options.removeAttribute('data-element');
        options.classList.remove('ec-composer-element-options-show');
        options.classList.add('ec-composer-element-options-hide');
        if (params.selector.getElementsByClassName('ec-ste-show').length > 0) {
            params.selector.getElementsByClassName('ec-ste-show')[0].classList.remove('ec-ste-show');
        }
        params.selector.getElementsByClassName('ec-template-code-button')[0].classList.add('ec-template-code-hide-button');
        params.selector.getElementsByClassName('ec-composer-container')[0].classList.remove('ec-composer-container-template-and-code');
        params.selector.getElementsByClassName('ec-composer-code-container')[0].removeAttribute('style');
        params.selector.getElementsByClassName('ec-composer-template-container')[0].removeAttribute('style');
        setTimeout(() => {
            options.classList.remove('ec-composer-element-options-hide');
        }, 300);
    }
};

const move_structure = (selector, clientY, clientX, drop_icon) => {
    let structure = selector.getElementsByClassName('ec-row-drag-active')[0];
    let top = (clientY - parseInt(structure?.getAttribute('data-top')));
    let left = (clientX - parseInt(structure?.getAttribute('data-left')));
    structure.style.top = top + 'px';
    structure.style.left = left + 'px';
    let iframe = selector.getElementsByClassName('ec-composer-template-container')[0];
    let iframe_rect = iframe?.getBoundingClientRect();
    if ((selector.getElementsByClassName('ec-row-drag-active').length > 0) && (iframe instanceof HTMLIFrameElement)) {
        let line = selector.getElementsByClassName('ec-row-drag-active')[0];
        let iframe_body = iframe?.contentWindow.document.getElementsByTagName('body');
        if (iframe_body) {
            if (iframe_body[0].classList.contains('ec-composer-template-preview')) {
                return;
            }
            let drag_line = (clientY - parseInt(line?.getAttribute('data-top')));
            line.style.top = drag_line + 'px';
            line.style.opacity = '0.3';
            let line_position = line.getBoundingClientRect();
            let line_top = line_position.y;
            let line_height = line_position.height;
            if (iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                Array.from(iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                    item.classList.remove('ec-composer-template-content-line-drop-active');
                });
                Array.from(iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop')).forEach((element) => {
                    let element_position = element.getBoundingClientRect();
                    let element_top = (iframe_rect instanceof DOMRect) ? (iframe_rect.y + element_position.y) : 0;
                    if ((line_top <= element_top) && ((line_top + line_height) >= element_top)) {
                        element.classList.add('ec-composer-template-content-line-drop-active');
                        return;
                    }
                    else if (!element.nextElementSibling) {
                        if (((line_top - element_top) > -1) && ((line_top - element_top) < 300)) {
                            element.classList.add('ec-composer-template-content-line-drop-active');
                            return;
                        }
                    }
                });
            }
        }
    }
};
const reset_structures = (params) => {
    if (params.selector.getElementsByClassName('ec-row-drag-active').length > 0) {
        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
        let iframe_body = iframe?.contentWindow.document.getElementsByTagName('body');
        if (iframe_body) {
            let iframe_body_child = iframe_body[0];
            if (iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop-active').length > 0) {
                let new_line = get_content({
                    'format': ['1', '2', '3', '4', '5', '6'].includes(params.selector.getElementsByClassName('ec-row-drag-active')[0].querySelector('div[data-format]').getAttribute('data-format')) ? parseInt(params.selector.getElementsByClassName('ec-row-drag-active')[0].querySelector('div[data-format]').getAttribute('data-format')) : 1
                });
                new_line.classList.add('ec-show-content');
                iframe_body[0].getElementsByClassName('ec-composer-template-content-line-drop-active')[0].insertAdjacentElement('afterend', new_line);
                setTimeout(() => {
                    iframe_body_child.getElementsByClassName('ec-show-content')[0].classList.remove('ec-show-content');
                }, 300);
            }
            params.selector.getElementsByClassName('ec-row-temp')[0].classList.remove('ec-row-temp');
            params.selector.getElementsByClassName('ec-row-drag-active')[0].remove();
            if (iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop').length > 0) {
                Array.from(iframe_body_child.getElementsByClassName('ec-composer-template-content-line-drop')).map((item) => {
                    item.remove();
                });
            }
        }
    }
};

const types = {
    color: Color,
    number: Number$1,
    selector: Selector,
    font: Font,
    align: Align,
    position: Position,
    text: Text,
    link: Link,
    images: Images,
    direction: Direction,
    menu: Menu,
    social: Social,
    icons: Icons,
    list: List,
    checkbox: Checkbox
};
const remove_buttons = (html) => {
    html = html.split(get_structure_buttons()).join('');
    html = html.split(get_element_buttons()).join('');
    html = html.split(get_placeholder()).join('');
    html = html.replace(' ec-element-content-active', '');
    return html;
};
const remove_javascript = (html) => {
    let reg = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
    return html.replace(reg, '');
};
const get_template = (params) => {
    let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
    if (iframe) {
        let iframeDocument = iframe.contentDocument;
        let html = iframeDocument?.getElementsByClassName('ec-composer-template');
        if (html !== undefined) {
            if (html.length > 0) {
                return remove_javascript(remove_buttons(html[0].outerHTML));
            }
        }
    }
    return '';
};
const get_template_options = (options, properties_list, params) => {
    if (options.length > 0) {
        let sections = '';
        for (let option of options) {
            let options_list = '';
            if (option.list.length > 0) {
                for (let list of option.list) {
                    if (typeof list.template === 'undefined') {
                        continue;
                    }
                    if (list.element && (typeof properties_list[list.element] !== 'undefined') && (typeof properties_list[list.element][list.name.replaceAll('_', '-')] !== 'undefined')) {
                        list['custom'] = properties_list[list.element][list.name.replaceAll('_', '-')];
                    }
                    let template = list.template;
                    let the_option = new types[template](params).get_option(list);
                    if (the_option) {
                        options_list += the_option;
                    }
                }
            }
            let showed_section = '';
            if ((typeof option.collapsed !== 'undefined') && (option.collapsed === true)) {
                showed_section = ' ec-section-show';
            }
            sections += '<div class="ec-section' + showed_section + '">'
                + '<div class="ec-section-header">'
                + '<button type="button" class="ec-justify-content-space-between">'
                + '<span>'
                + option.title
                + '</span>'
                + params.icons('expand_more', { 'icon_class': 'ec-section-header-dropdown-icon' })
                + '</button>'
                + '</div>'
                + '<div class="ec-section-body">'
                + '<ul class="ec-composer-options-list">'
                + options_list
                + '</ul>'
                + '</div>'
                + '</div>';
        }
        return sections;
    }
    else {
        show_message(params.words('error_name') + ': ' + params.words('no_element_options_found'));
    }
};

const get_structure_buttons = () => {
    let buttons = '';
    let mbutton = document.createElement('button');
    mbutton.setAttribute('type', 'button');
    mbutton.classList.add('ec-composer-template-content-move-button');
    mbutton.innerHTML = get_icon('drag');
    buttons += mbutton.outerHTML;
    let gbuttons = document.createElement('div');
    gbuttons.classList.add('ec-composer-template-content-buttons-group');
    let ncontent = document.createElement('button');
    ncontent.setAttribute('type', 'button');
    ncontent.classList.add('ec-composer-template-content-new-button');
    ncontent.innerHTML = get_icon('add_circle');
    gbuttons.innerHTML = ncontent.outerHTML;
    let scontent = document.createElement('button');
    scontent.setAttribute('type', 'button');
    scontent.classList.add('ec-composer-template-content-save-button');
    scontent.innerHTML = get_icon('save');
    gbuttons.innerHTML += scontent.outerHTML;
    let dcontent = document.createElement('button');
    dcontent.setAttribute('type', 'button');
    dcontent.classList.add('ec-composer-template-content-delete-button');
    dcontent.innerHTML = get_icon('trash');
    gbuttons.innerHTML += dcontent.outerHTML;
    buttons += gbuttons.outerHTML;
    return buttons;
};
const get_element_buttons = () => {
    let buttons = '';
    let gbuttons = document.createElement('div');
    gbuttons.classList.add('ec-composer-element-buttons-group');
    let mbutton = document.createElement('button');
    mbutton.setAttribute('type', 'button');
    mbutton.classList.add('ec-composer-element-move-button');
    mbutton.innerHTML = get_icon('drag');
    gbuttons.innerHTML += mbutton.outerHTML;
    let clone = document.createElement('button');
    clone.setAttribute('type', 'button');
    clone.classList.add('ec-composer-element-clone-button');
    clone.innerHTML = get_icon('backup_table');
    gbuttons.innerHTML += clone.outerHTML;
    let delement = document.createElement('button');
    delement.setAttribute('type', 'button');
    delement.classList.add('ec-composer-element-delete-button');
    delement.innerHTML = get_icon('trash');
    gbuttons.innerHTML += delement.outerHTML;
    buttons += gbuttons.outerHTML;
    return buttons;
};
const get_placeholder = () => {
    let placeholder = document.createElement('a');
    placeholder.setAttribute('href', '#');
    placeholder.classList.add('ec-composer-template-cell-placeholder');
    let text = document.createElement('span');
    text.classList.add('ec-composer-template-cell-placeholder-text');
    text.innerText = get_word('drag_elements_here');
    placeholder.innerHTML = '<span>'
        + get_icon('place_item', { 'icon_class': 'ec-composer-template-cell-placeholder-icon' })
        + text.outerHTML
        + '</span>';
    return placeholder.outerHTML;
};

const get_date = (params, timestamp) => {
    let the_date = new Date(parseInt(timestamp) * 1000);
    let year = the_date.getFullYear();
    let month = (the_date.getMonth() + 1).toString().padStart(2, '0');
    let date = the_date.getDate().toString().padStart(2, '0');
    return year + '-' + month + '-' + date;
};
const get_time = (params, timestamp) => {
    let the_date = new Date(parseInt(timestamp) * 1000);
    let hours = the_date.getHours();
    let minutes = the_date.getMinutes().toString().padStart(2, '0');
    let meridiam = (hours > 12) ? 'PM' : 'AM';
    return ((hours > 12) ? (hours - 12) : hours).toString().padStart(2, '0') + ':' + minutes + ' ' + meridiam;
};

const get_all_fonts = () => {
    let fonts_html = '';
    if (Object.keys(fonts).length > 0) {
        let fonts_list = Object.values(fonts);
        fonts_html += '<ul class="ec-fonts">';
        for (let font of fonts_list) {
            fonts_html += '<li>'
                + '<a href="#" style="font-family: ' + font.property + ';" data-font="' + font.slug + '">'
                + font.name
                + '</a>'
                + '</li>';
        }
        fonts_html += '</ul>';
    }
    return fonts_html;
};
const get_fonts_link = () => {
    let fonts_url = '';
    if (Object.keys(fonts).length > 0) {
        let fonts_list = Object.values(fonts);
        for (let font of fonts_list) {
            fonts_url += font.link + '&';
        }
    }
    return 'https://fonts.googleapis.com/css2?' + fonts_url + 'display=swap';
};
const get_text_sizes = () => {
    let sizes = '<ul class="ec-ste-text-sizes">';
    for (let s = 7; s < 99; s++) {
        sizes += '<li>'
            + '<a href="#" data-size="' + s + 'px">'
            + s + 'px'
            + '</a>'
            + '</li>';
    }
    sizes += '</ul>';
    return sizes;
};

const show_index = (selector) => {
    if (typeof selector !== 'undefined' && selector) {
        let all_lines = selector.querySelectorAll('.ec-composer-code-editor-line').length;
        if (all_lines < 1) {
            let new_line = '<div class="ec-composer-code-editor-line"></div>';
            selector.querySelector('.ec-composer-code-lines').innerHTML = new_line;
            all_lines = selector.querySelectorAll('.ec-composer-code-editor-line').length;
        }
        let lines = '';
        let number = 1;
        do {
            let height = selector.querySelectorAll('.ec-composer-code-editor-line')[(number - 1)].offsetHeight;
            lines += '<div class="ec-composer-code-editor-line-index" style="height: ' + height + 'px;">'
                + number
                + '</div>';
            number++;
        } while (number < (all_lines + 1));
        selector.querySelector('.ec-composer-code-index').innerHTML = lines;
    }
};
const sanitize_code = (code) => {
    code = code.replaceAll('    ', '').replaceAll(' ', ' ');
    code = code.replace(/<script>/gi, '');
    code = code.replace(/<style>/gi, '');
    code = code.replace(/onload/gi, '');
    return code;
};

const is_url_valid = (url) => {
    try {
        new URL(url);
        return true;
    }
    catch (e) {
        return false;
    }
};

const format_file_size = (size) => {
    let kilobyte = 1024;
    let megabyte = kilobyte * 1024;
    let gigabyte = megabyte * 1024;
    if (size < kilobyte) {
        return size + ' B';
    }
    else if (size < megabyte) {
        return (size / kilobyte).toFixed(2) + ' KB';
    }
    else if (size < gigabyte) {
        return (size / megabyte).toFixed(2) + ' MB';
    }
    else {
        return (size / gigabyte).toFixed(2) + ' GB';
    }
};
const get_images = async (params, page) => {
    let search = params.selector.querySelector('.ec-option-media .ec-search-input');
    let search_value = search.value;
    let post_fields = {
        page: page,
        search: search_value
    };
    let request_params = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(post_fields)
    };
    let response = await fetch(params.options('api_url') + 'api/get_images', request_params);
    if (!response.ok) {
        if (response.status === 404) {
            show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
        }
        else if (response.status === 500) {
            show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
        }
        else {
            show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
        }
        return;
    }
    let json = await response.json();
    if ((typeof json.images !== 'undefined') && (json.images.length > 0)) {
        let image_id = 0;
        let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
        if (iframe) {
            let iframeDocument = iframe.contentDocument;
            if (iframeDocument !== null) {
                let image = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data img');
                if (image && image.getAttribute('data-id')) {
                    image_id = parseInt(image.getAttribute('data-id'));
                }
            }
        }
        params.selector.querySelector('.ec-media-images').classList.remove('ec-media-images-not-found');
        let preview = [];
        let c = 0;
        let gallery = params.selector.querySelectorAll('.ec-media-images .ec-media-images-list-two-columns > div');
        for (let image of json.images) {
            let selected_class = (image.id === image_id) ? ' class="ec-media-image-selected"' : '';
            if ((preview.length < 3) && (json.page < 2)) {
                preview.push('<li>'
                    + '<a href="' + params.options('share_url') + image.original + '"' + selected_class + ' data-id="' + image.id + '">'
                    + '<img src="' + params.options('share_url') + image.thumbnail + '" alt="' + image.name + '">'
                    + params.icons('task_alt')
                    + '</a>'
                    + '</li>');
            }
            let image_single = '<a href="' + params.options('share_url') + image.original + '"' + selected_class + ' data-id="' + image.id + '">'
                + '<img src="' + params.options('share_url') + image.thumbnail + '" alt="' + image.name + '">'
                + params.icons('task_alt')
                + '</a>';
            if (c % 2 === 0) {
                gallery[0].insertAdjacentHTML('beforeend', image_single);
            }
            else {
                gallery[1].insertAdjacentHTML('beforeend', image_single);
            }
            c++;
        }
        if (!params.selector.querySelector('.ec-media-images')?.classList.contains('ec-media-images-preview') && !params.selector.querySelector('.ec-media-images')?.classList.contains('ec-media-images-all')) {
            params.selector.querySelector('.ec-media-images').classList.add('ec-media-images-preview');
        }
        if (json.page < 2) {
            params.selector.querySelector('.ec-media-images > ul').innerHTML = preview.join('');
        }
        params.selector.querySelector('.ec-media-images .ec-loading-button > a').classList.remove('ec-load-more-active');
        params.selector.querySelector('.ec-media-images .ec-loading-button').setAttribute('data-page', (json.page + 1).toString());
        if (json.images.length > 9) {
            params.selector.querySelector('.ec-media-images .ec-loading-button').classList.remove('ec-loading-disabled-button');
        }
        else {
            params.selector.querySelector('.ec-media-images .ec-loading-button').classList.add('ec-loading-disabled-button');
        }
    }
    else {
        if (params.selector.querySelectorAll('.ec-media-images .ec-media-images-list-two-columns a').length < 1) {
            params.selector.querySelector('.ec-media-images').classList.remove('ec-media-images-preview', 'ec-media-images-all');
            params.selector.querySelector('.ec-media-images').classList.add('ec-media-images-not-found');
        }
    }
};
const get_icons = async (params, page) => {
    let fields = {
        page: page,
        search: params.selector.querySelector('.ec-option-icons .ec-search-input').value
    };
    let request_params = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(fields),
    };
    let response = await fetch(params.options('api_url') + 'api/get_icons', request_params);
    if (!response.ok) {
        if (response.status === 404) {
            show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
        }
        else if (response.status === 500) {
            show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
        }
        else {
            show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
        }
        return;
    }
    let json = await response.json();
    if ((typeof json.icons !== 'undefined') && (json.icons.length > 0)) {
        params.selector.querySelector('.ec-media-icons').classList.remove('ec-media-icons-not-found');
        let preview = [];
        let icons = '';
        for (let icon of json.icons) {
            let sizes = '';
            if (icon.sizes.length > 0) {
                for (let size of icon.sizes) {
                    sizes += '<li>'
                        + '<a href="#" data-size="' + size.size + '">'
                        + size.size + 'px'
                        + '</a>'
                        + '</li>';
                }
            }
            if ((preview.length < 4) && (json.page < 2)) {
                preview.push('<li data-icon="' + icon.icon_id + '">'
                    + '<div class="ec-option-selector-dropdown">'
                    + '<a href="#" class="ec-button ec-option-icons-sizes-button">'
                    + params.icons('file_download')
                    + '</a>'
                    + '<div class="ec-option-selector-menu">'
                    + '<ul class="ec-sizes">'
                    + sizes
                    + '</ul>'
                    + '</div>'
                    + '</div>'
                    + '<img src="' + icon.cover + '" alt="' + icon.icon_id + '">'
                    + '</li>');
            }
            icons += '<li data-icon="' + icon.icon_id + '">'
                + '<div class="ec-option-selector-dropdown">'
                + '<a href="#" class="ec-button ec-option-icons-sizes-button">'
                + params.icons('file_download')
                + '</a>'
                + '<div class="ec-option-selector-menu">'
                + '<ul class="ec-sizes">'
                + sizes
                + '</ul>'
                + '</div>'
                + '</div>'
                + '<img src="' + icon.cover + '" alt="' + icon.icon_id + '">'
                + '</li>';
        }
        let gallery = params.selector.querySelectorAll('.ec-media-icons .ec-media-icons-list-all > ul');
        gallery[0].insertAdjacentHTML('beforeend', icons);
        if (!params.selector.querySelector('.ec-media-icons')?.classList.contains('ec-media-icons-preview') && !params.selector.querySelector('.ec-media-icons')?.classList.contains('ec-media-icons-all')) {
            params.selector.querySelector('.ec-media-icons').classList.add('ec-media-icons-preview');
        }
        if (json.page < 2) {
            params.selector.querySelector('.ec-media-icons > ul').innerHTML = preview.join('');
        }
        params.selector.querySelector('.ec-media-icons .ec-loading-button > a').classList.remove('ec-load-more-active');
        params.selector.querySelector('.ec-media-icons .ec-loading-button').setAttribute('data-page', (json.page + 1).toString());
        if (json.icons.length > 9) {
            params.selector.querySelector('.ec-media-icons .ec-loading-button').classList.remove('ec-loading-disabled-button');
        }
        else {
            params.selector.querySelector('.ec-media-icons .ec-loading-button').classList.add('ec-loading-disabled-button');
        }
    }
    else {
        if (params.selector.querySelectorAll('.ec-media-icons .ec-media-icons-list-all a').length < 1) {
            params.selector.querySelector('.ec-media-icons').classList.remove('ec-media-icons-preview', 'ec-media-icons-all');
            params.selector.querySelector('.ec-media-icons').classList.add('ec-media-icons-not-found');
        }
    }
};
const download_icon = async (params, icon_id, size) => {
    let fields = {
        icon_id: icon_id,
        size: size
    };
    let request_params = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(fields)
    };
    let response = await fetch(params.options('api_url') + 'api/get_icon', request_params);
    if (!response.ok) {
        if (response.status === 404) {
            show_message(params.words('error_name') + ': ' + params.words('resource_not_found'));
        }
        else if (response.status === 500) {
            show_message(params.words('error_name') + ': ' + params.words('internal_server_error'));
        }
        else {
            show_message(params.words('error_name') + ': ' + params.words('unknown_error_occurred'));
        }
        return;
    }
    let json = await response.json();
    if (json.success && (typeof json.file_name !== 'undefined')) {
        setTimeout(() => {
            let image = document.createElement('img');
            image.src = params.options('share_url') + json.file_path;
            image.alt = json.file_name;
            let iframe = params.selector.getElementsByClassName('ec-composer-template-container')[0];
            if (iframe) {
                let iframeDocument = iframe.contentDocument;
                if (iframeDocument !== null) {
                    let content_data = iframeDocument.querySelector('.ec-element-content-active .ec-element-content-data .ec-element-image');
                    if (content_data) {
                        content_data.replaceChildren(image);
                        content_data.classList.remove('ec-element-cover');
                    }
                }
            }
        }, 300);
    }
    else {
        show_message(params.words('error_name') + ': ' + json.message);
    }
};

const show_modal_message = (params, type, message) => {
    let modal = params.selector.querySelector('.ec-composer-modal-show');
    if (modal.getElementsByClassName('ec-composer-modal-message').length > 0) {
        modal.getElementsByClassName('ec-composer-modal-message')[0].innerHTML = message;
        if (type === 'success') {
            modal.getElementsByClassName('ec-composer-modal-message')[0].classList.add('ec-composer-modal-message-success', 'ec-composer-modal-message-success-show');
            setTimeout(() => {
                modal.getElementsByClassName('ec-composer-modal-message')[0].classList.remove('ec-composer-modal-message-success-show');
            }, 300);
        }
        else {
            modal.getElementsByClassName('ec-composer-modal-message')[0].classList.add('ec-composer-modal-message-error', 'ec-composer-modal-message-error-show');
            setTimeout(() => {
                modal.getElementsByClassName('ec-composer-modal-message')[0].classList.remove('ec-composer-modal-message-error-show');
            }, 300);
        }
    }
};

const get_ai_content = async (params) => {
    params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-search');
    params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-error-message');
    params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-suggestions');
    let service = params.selector.querySelector('.ec-option-ai .ec-button-service').getAttribute('data-service');
    let command = params.selector.querySelector('.ec-option-ai .ec-textarea');
    let post_fields = {
        service: service ? service : '',
        command: command.value
    };
    let request_params = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(post_fields)
    };
    let response = await fetch(params.options('api_url') + 'api/get_ai_content', request_params);
    if (!response.ok) {
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-search');
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-error');
        setTimeout(() => {
            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-error');
            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-error-message');
        }, 300);
        if (response.status === 404) {
            params.selector.getElementsByClassName('ec-ai-message')[0].innerHTML = params.words('resource_not_found');
        }
        else if (response.status === 500) {
            params.selector.getElementsByClassName('ec-ai-message')[0].innerHTML = params.words('internal_server_error');
        }
        else {
            params.selector.getElementsByClassName('ec-ai-message')[0].innerHTML = params.words('unknown_error_occurred');
        }
        return;
    }
    let json = await response.json();
    if (json.success) {
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-search');
        params.selector.getElementsByClassName('ec-ai-response')[0].innerHTML = json.response;
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-suggestions');
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-response');
        setTimeout(() => {
            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-response');
        }, 300);
    }
    else {
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-search');
        params.selector.getElementsByClassName('ec-ai-message')[0].innerHTML = json.message;
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-suggestions');
        params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-error');
        setTimeout(() => {
            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.remove('ec-show-error');
            params.selector.querySelector('.ec-composer-options-list > li[data-option="ai"] .ec-block-body')?.classList.add('ec-show-error-message');
        }, 300);
    }
};

var Core;
(function (Core) {
    class Controller {
        constructor(ec_element, updated_options) {
            if (typeof ec_element === 'undefined') {
                show_message(get_word('error_name') + ': ' + get_word('no_container_provided'));
            }
            else if (typeof ec_element !== 'string') {
                show_message(get_word('error_name') + ': ' + get_word('no_container_provided'));
            }
            else if (!ec_element) {
                show_message(get_word('error_name') + ': ' + get_word('the_container_not_found'));
            }
            const element = document.querySelectorAll(ec_element);
            if (element.length < 1) {
                show_message(get_word('error_name') + ': ' + get_word('the_container_not_found'));
            }
            else if (element.length > 1) {
                show_message(get_word('error_name') + ': ' + get_word('the_container_duplicates'));
            }
            const instance = get_instance(ec_element);
            if (typeof instance !== 'undefined') {
                show_message(get_word('error_name') + ': ' + get_word('the_instance_already_registered'));
            }
            if (typeof updated_options !== 'undefined') {
                if (Object.keys(updated_options).length > 0) {
                    this.update_options(updated_options);
                }
            }
            save_instance(ec_element);
            run_builder(ec_element);
        }
        update_options(updated_options) {
            update_options(updated_options);
        }
    }
    Core.Controller = Controller;
})(Core = Core || (Core = {}));

const EC = Core.Controller;

export { EC as default };
